// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/execution/models"
)

// NewChangePhaseExecutionUsingPATCH1Params creates a new ChangePhaseExecutionUsingPATCH1Params object
// with the default values initialized.
func NewChangePhaseExecutionUsingPATCH1Params() *ChangePhaseExecutionUsingPATCH1Params {
	var ()
	return &ChangePhaseExecutionUsingPATCH1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangePhaseExecutionUsingPATCH1ParamsWithTimeout creates a new ChangePhaseExecutionUsingPATCH1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangePhaseExecutionUsingPATCH1ParamsWithTimeout(timeout time.Duration) *ChangePhaseExecutionUsingPATCH1Params {
	var ()
	return &ChangePhaseExecutionUsingPATCH1Params{

		timeout: timeout,
	}
}

// NewChangePhaseExecutionUsingPATCH1ParamsWithContext creates a new ChangePhaseExecutionUsingPATCH1Params object
// with the default values initialized, and the ability to set a context for a request
func NewChangePhaseExecutionUsingPATCH1ParamsWithContext(ctx context.Context) *ChangePhaseExecutionUsingPATCH1Params {
	var ()
	return &ChangePhaseExecutionUsingPATCH1Params{

		Context: ctx,
	}
}

// NewChangePhaseExecutionUsingPATCH1ParamsWithHTTPClient creates a new ChangePhaseExecutionUsingPATCH1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangePhaseExecutionUsingPATCH1ParamsWithHTTPClient(client *http.Client) *ChangePhaseExecutionUsingPATCH1Params {
	var ()
	return &ChangePhaseExecutionUsingPATCH1Params{
		HTTPClient: client,
	}
}

/*ChangePhaseExecutionUsingPATCH1Params contains all the parameters to send to the API endpoint
for the change phase execution using p a t c h 1 operation typically these are written to a http.Request
*/
type ChangePhaseExecutionUsingPATCH1Params struct {

	/*PhaseExecution
	  phaseExecution

	*/
	PhaseExecution *models.PhaseExecutionDto
	/*PhaseName
	  phaseName

	*/
	PhaseName string
	/*ReleaseName
	  releaseName

	*/
	ReleaseName string
	/*ReleaseVersionName
	  releaseVersion

	*/
	ReleaseVersionName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) WithTimeout(timeout time.Duration) *ChangePhaseExecutionUsingPATCH1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) WithContext(ctx context.Context) *ChangePhaseExecutionUsingPATCH1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) WithHTTPClient(client *http.Client) *ChangePhaseExecutionUsingPATCH1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPhaseExecution adds the phaseExecution to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) WithPhaseExecution(phaseExecution *models.PhaseExecutionDto) *ChangePhaseExecutionUsingPATCH1Params {
	o.SetPhaseExecution(phaseExecution)
	return o
}

// SetPhaseExecution adds the phaseExecution to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) SetPhaseExecution(phaseExecution *models.PhaseExecutionDto) {
	o.PhaseExecution = phaseExecution
}

// WithPhaseName adds the phaseName to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) WithPhaseName(phaseName string) *ChangePhaseExecutionUsingPATCH1Params {
	o.SetPhaseName(phaseName)
	return o
}

// SetPhaseName adds the phaseName to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) SetPhaseName(phaseName string) {
	o.PhaseName = phaseName
}

// WithReleaseName adds the releaseName to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) WithReleaseName(releaseName string) *ChangePhaseExecutionUsingPATCH1Params {
	o.SetReleaseName(releaseName)
	return o
}

// SetReleaseName adds the releaseName to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) SetReleaseName(releaseName string) {
	o.ReleaseName = releaseName
}

// WithReleaseVersionName adds the releaseVersionName to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) WithReleaseVersionName(releaseVersionName string) *ChangePhaseExecutionUsingPATCH1Params {
	o.SetReleaseVersionName(releaseVersionName)
	return o
}

// SetReleaseVersionName adds the releaseVersionName to the change phase execution using p a t c h 1 params
func (o *ChangePhaseExecutionUsingPATCH1Params) SetReleaseVersionName(releaseVersionName string) {
	o.ReleaseVersionName = releaseVersionName
}

// WriteToRequest writes these params to a swagger request
func (o *ChangePhaseExecutionUsingPATCH1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PhaseExecution != nil {
		if err := r.SetBodyParam(o.PhaseExecution); err != nil {
			return err
		}
	}

	// path param phaseName
	if err := r.SetPathParam("phaseName", o.PhaseName); err != nil {
		return err
	}

	// path param releaseName
	if err := r.SetPathParam("releaseName", o.ReleaseName); err != nil {
		return err
	}

	// path param releaseVersionName
	if err := r.SetPathParam("releaseVersionName", o.ReleaseVersionName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
