// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/execution/models"
)

// NewChangeTaskExecutionUsingPATCHParams creates a new ChangeTaskExecutionUsingPATCHParams object
// with the default values initialized.
func NewChangeTaskExecutionUsingPATCHParams() *ChangeTaskExecutionUsingPATCHParams {
	var ()
	return &ChangeTaskExecutionUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangeTaskExecutionUsingPATCHParamsWithTimeout creates a new ChangeTaskExecutionUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangeTaskExecutionUsingPATCHParamsWithTimeout(timeout time.Duration) *ChangeTaskExecutionUsingPATCHParams {
	var ()
	return &ChangeTaskExecutionUsingPATCHParams{

		timeout: timeout,
	}
}

// NewChangeTaskExecutionUsingPATCHParamsWithContext creates a new ChangeTaskExecutionUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewChangeTaskExecutionUsingPATCHParamsWithContext(ctx context.Context) *ChangeTaskExecutionUsingPATCHParams {
	var ()
	return &ChangeTaskExecutionUsingPATCHParams{

		Context: ctx,
	}
}

// NewChangeTaskExecutionUsingPATCHParamsWithHTTPClient creates a new ChangeTaskExecutionUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangeTaskExecutionUsingPATCHParamsWithHTTPClient(client *http.Client) *ChangeTaskExecutionUsingPATCHParams {
	var ()
	return &ChangeTaskExecutionUsingPATCHParams{
		HTTPClient: client,
	}
}

/*ChangeTaskExecutionUsingPATCHParams contains all the parameters to send to the API endpoint
for the change task execution using p a t c h operation typically these are written to a http.Request
*/
type ChangeTaskExecutionUsingPATCHParams struct {

	/*PhaseID
	  phaseId

	*/
	PhaseID int64
	/*ReleaseID
	  releaseId

	*/
	ReleaseID int64
	/*TaskExceution
	  taskExceution

	*/
	TaskExceution *models.TaskExecutionDto
	/*TaskID
	  taskId

	*/
	TaskID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) WithTimeout(timeout time.Duration) *ChangeTaskExecutionUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) WithContext(ctx context.Context) *ChangeTaskExecutionUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) WithHTTPClient(client *http.Client) *ChangeTaskExecutionUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPhaseID adds the phaseID to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) WithPhaseID(phaseID int64) *ChangeTaskExecutionUsingPATCHParams {
	o.SetPhaseID(phaseID)
	return o
}

// SetPhaseID adds the phaseId to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) SetPhaseID(phaseID int64) {
	o.PhaseID = phaseID
}

// WithReleaseID adds the releaseID to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) WithReleaseID(releaseID int64) *ChangeTaskExecutionUsingPATCHParams {
	o.SetReleaseID(releaseID)
	return o
}

// SetReleaseID adds the releaseId to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) SetReleaseID(releaseID int64) {
	o.ReleaseID = releaseID
}

// WithTaskExceution adds the taskExceution to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) WithTaskExceution(taskExceution *models.TaskExecutionDto) *ChangeTaskExecutionUsingPATCHParams {
	o.SetTaskExceution(taskExceution)
	return o
}

// SetTaskExceution adds the taskExceution to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) SetTaskExceution(taskExceution *models.TaskExecutionDto) {
	o.TaskExceution = taskExceution
}

// WithTaskID adds the taskID to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) WithTaskID(taskID int64) *ChangeTaskExecutionUsingPATCHParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the change task execution using p a t c h params
func (o *ChangeTaskExecutionUsingPATCHParams) SetTaskID(taskID int64) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeTaskExecutionUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param phaseId
	if err := r.SetPathParam("phaseId", swag.FormatInt64(o.PhaseID)); err != nil {
		return err
	}

	// path param releaseId
	if err := r.SetPathParam("releaseId", swag.FormatInt64(o.ReleaseID)); err != nil {
		return err
	}

	if o.TaskExceution != nil {
		if err := r.SetBodyParam(o.TaskExceution); err != nil {
			return err
		}
	}

	// path param taskId
	if err := r.SetPathParam("taskId", swag.FormatInt64(o.TaskID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
