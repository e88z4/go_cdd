// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/execution/models"
)

// GetReleaseExecutionUsingGETReader is a Reader for the GetReleaseExecutionUsingGET structure.
type GetReleaseExecutionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleaseExecutionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleaseExecutionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetReleaseExecutionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReleaseExecutionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReleaseExecutionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetReleaseExecutionUsingGETOK creates a GetReleaseExecutionUsingGETOK with default headers values
func NewGetReleaseExecutionUsingGETOK() *GetReleaseExecutionUsingGETOK {
	return &GetReleaseExecutionUsingGETOK{}
}

/*GetReleaseExecutionUsingGETOK handles this case with default header values.

OK
*/
type GetReleaseExecutionUsingGETOK struct {
	Payload *models.ReleaseExecutionDto
}

func (o *GetReleaseExecutionUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}][%d] getReleaseExecutionUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetReleaseExecutionUsingGETOK) GetPayload() *models.ReleaseExecutionDto {
	return o.Payload
}

func (o *GetReleaseExecutionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReleaseExecutionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseExecutionUsingGETUnauthorized creates a GetReleaseExecutionUsingGETUnauthorized with default headers values
func NewGetReleaseExecutionUsingGETUnauthorized() *GetReleaseExecutionUsingGETUnauthorized {
	return &GetReleaseExecutionUsingGETUnauthorized{}
}

/*GetReleaseExecutionUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetReleaseExecutionUsingGETUnauthorized struct {
}

func (o *GetReleaseExecutionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}][%d] getReleaseExecutionUsingGETUnauthorized ", 401)
}

func (o *GetReleaseExecutionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReleaseExecutionUsingGETForbidden creates a GetReleaseExecutionUsingGETForbidden with default headers values
func NewGetReleaseExecutionUsingGETForbidden() *GetReleaseExecutionUsingGETForbidden {
	return &GetReleaseExecutionUsingGETForbidden{}
}

/*GetReleaseExecutionUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetReleaseExecutionUsingGETForbidden struct {
}

func (o *GetReleaseExecutionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}][%d] getReleaseExecutionUsingGETForbidden ", 403)
}

func (o *GetReleaseExecutionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReleaseExecutionUsingGETNotFound creates a GetReleaseExecutionUsingGETNotFound with default headers values
func NewGetReleaseExecutionUsingGETNotFound() *GetReleaseExecutionUsingGETNotFound {
	return &GetReleaseExecutionUsingGETNotFound{}
}

/*GetReleaseExecutionUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetReleaseExecutionUsingGETNotFound struct {
}

func (o *GetReleaseExecutionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}][%d] getReleaseExecutionUsingGETNotFound ", 404)
}

func (o *GetReleaseExecutionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
