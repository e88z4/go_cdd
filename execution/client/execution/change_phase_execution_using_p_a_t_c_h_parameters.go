// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/execution/models"
)

// NewChangePhaseExecutionUsingPATCHParams creates a new ChangePhaseExecutionUsingPATCHParams object
// with the default values initialized.
func NewChangePhaseExecutionUsingPATCHParams() *ChangePhaseExecutionUsingPATCHParams {
	var ()
	return &ChangePhaseExecutionUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangePhaseExecutionUsingPATCHParamsWithTimeout creates a new ChangePhaseExecutionUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangePhaseExecutionUsingPATCHParamsWithTimeout(timeout time.Duration) *ChangePhaseExecutionUsingPATCHParams {
	var ()
	return &ChangePhaseExecutionUsingPATCHParams{

		timeout: timeout,
	}
}

// NewChangePhaseExecutionUsingPATCHParamsWithContext creates a new ChangePhaseExecutionUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewChangePhaseExecutionUsingPATCHParamsWithContext(ctx context.Context) *ChangePhaseExecutionUsingPATCHParams {
	var ()
	return &ChangePhaseExecutionUsingPATCHParams{

		Context: ctx,
	}
}

// NewChangePhaseExecutionUsingPATCHParamsWithHTTPClient creates a new ChangePhaseExecutionUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangePhaseExecutionUsingPATCHParamsWithHTTPClient(client *http.Client) *ChangePhaseExecutionUsingPATCHParams {
	var ()
	return &ChangePhaseExecutionUsingPATCHParams{
		HTTPClient: client,
	}
}

/*ChangePhaseExecutionUsingPATCHParams contains all the parameters to send to the API endpoint
for the change phase execution using p a t c h operation typically these are written to a http.Request
*/
type ChangePhaseExecutionUsingPATCHParams struct {

	/*PhaseExceution
	  phaseExceution

	*/
	PhaseExceution *models.PhaseExecutionDto
	/*PhaseID
	  phaseId

	*/
	PhaseID int64
	/*ReleaseID
	  releaseId

	*/
	ReleaseID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) WithTimeout(timeout time.Duration) *ChangePhaseExecutionUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) WithContext(ctx context.Context) *ChangePhaseExecutionUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) WithHTTPClient(client *http.Client) *ChangePhaseExecutionUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPhaseExceution adds the phaseExceution to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) WithPhaseExceution(phaseExceution *models.PhaseExecutionDto) *ChangePhaseExecutionUsingPATCHParams {
	o.SetPhaseExceution(phaseExceution)
	return o
}

// SetPhaseExceution adds the phaseExceution to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) SetPhaseExceution(phaseExceution *models.PhaseExecutionDto) {
	o.PhaseExceution = phaseExceution
}

// WithPhaseID adds the phaseID to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) WithPhaseID(phaseID int64) *ChangePhaseExecutionUsingPATCHParams {
	o.SetPhaseID(phaseID)
	return o
}

// SetPhaseID adds the phaseId to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) SetPhaseID(phaseID int64) {
	o.PhaseID = phaseID
}

// WithReleaseID adds the releaseID to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) WithReleaseID(releaseID int64) *ChangePhaseExecutionUsingPATCHParams {
	o.SetReleaseID(releaseID)
	return o
}

// SetReleaseID adds the releaseId to the change phase execution using p a t c h params
func (o *ChangePhaseExecutionUsingPATCHParams) SetReleaseID(releaseID int64) {
	o.ReleaseID = releaseID
}

// WriteToRequest writes these params to a swagger request
func (o *ChangePhaseExecutionUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PhaseExceution != nil {
		if err := r.SetBodyParam(o.PhaseExceution); err != nil {
			return err
		}
	}

	// path param phaseId
	if err := r.SetPathParam("phaseId", swag.FormatInt64(o.PhaseID)); err != nil {
		return err
	}

	// path param releaseId
	if err := r.SetPathParam("releaseId", swag.FormatInt64(o.ReleaseID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
