// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/execution/models"
)

// ChangeTaskExecutionUsingPATCHReader is a Reader for the ChangeTaskExecutionUsingPATCH structure.
type ChangeTaskExecutionUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeTaskExecutionUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangeTaskExecutionUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewChangeTaskExecutionUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewChangeTaskExecutionUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChangeTaskExecutionUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChangeTaskExecutionUsingPATCHOK creates a ChangeTaskExecutionUsingPATCHOK with default headers values
func NewChangeTaskExecutionUsingPATCHOK() *ChangeTaskExecutionUsingPATCHOK {
	return &ChangeTaskExecutionUsingPATCHOK{}
}

/*ChangeTaskExecutionUsingPATCHOK handles this case with default header values.

OK
*/
type ChangeTaskExecutionUsingPATCHOK struct {
	Payload *models.TaskExecutionDto
}

func (o *ChangeTaskExecutionUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution/{taskId}][%d] changeTaskExecutionUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *ChangeTaskExecutionUsingPATCHOK) GetPayload() *models.TaskExecutionDto {
	return o.Payload
}

func (o *ChangeTaskExecutionUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskExecutionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeTaskExecutionUsingPATCHNoContent creates a ChangeTaskExecutionUsingPATCHNoContent with default headers values
func NewChangeTaskExecutionUsingPATCHNoContent() *ChangeTaskExecutionUsingPATCHNoContent {
	return &ChangeTaskExecutionUsingPATCHNoContent{}
}

/*ChangeTaskExecutionUsingPATCHNoContent handles this case with default header values.

No Content
*/
type ChangeTaskExecutionUsingPATCHNoContent struct {
}

func (o *ChangeTaskExecutionUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution/{taskId}][%d] changeTaskExecutionUsingPATCHNoContent ", 204)
}

func (o *ChangeTaskExecutionUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangeTaskExecutionUsingPATCHUnauthorized creates a ChangeTaskExecutionUsingPATCHUnauthorized with default headers values
func NewChangeTaskExecutionUsingPATCHUnauthorized() *ChangeTaskExecutionUsingPATCHUnauthorized {
	return &ChangeTaskExecutionUsingPATCHUnauthorized{}
}

/*ChangeTaskExecutionUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type ChangeTaskExecutionUsingPATCHUnauthorized struct {
}

func (o *ChangeTaskExecutionUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution/{taskId}][%d] changeTaskExecutionUsingPATCHUnauthorized ", 401)
}

func (o *ChangeTaskExecutionUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangeTaskExecutionUsingPATCHForbidden creates a ChangeTaskExecutionUsingPATCHForbidden with default headers values
func NewChangeTaskExecutionUsingPATCHForbidden() *ChangeTaskExecutionUsingPATCHForbidden {
	return &ChangeTaskExecutionUsingPATCHForbidden{}
}

/*ChangeTaskExecutionUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type ChangeTaskExecutionUsingPATCHForbidden struct {
}

func (o *ChangeTaskExecutionUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution/{taskId}][%d] changeTaskExecutionUsingPATCHForbidden ", 403)
}

func (o *ChangeTaskExecutionUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
