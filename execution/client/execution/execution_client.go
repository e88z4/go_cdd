// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new execution API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for execution API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangePhaseExecutionUsingPATCH(params *ChangePhaseExecutionUsingPATCHParams) (*ChangePhaseExecutionUsingPATCHOK, *ChangePhaseExecutionUsingPATCHNoContent, error)

	ChangePhaseExecutionUsingPATCH1(params *ChangePhaseExecutionUsingPATCH1Params) (*ChangePhaseExecutionUsingPATCH1OK, *ChangePhaseExecutionUsingPATCH1NoContent, error)

	ChangeReleaseExecutionUsingPATCH(params *ChangeReleaseExecutionUsingPATCHParams) (*ChangeReleaseExecutionUsingPATCHOK, *ChangeReleaseExecutionUsingPATCHNoContent, error)

	ChangeTaskExecutionUsingPATCH(params *ChangeTaskExecutionUsingPATCHParams) (*ChangeTaskExecutionUsingPATCHOK, *ChangeTaskExecutionUsingPATCHNoContent, error)

	CreateReleaseManifestUsingPOST(params *CreateReleaseManifestUsingPOSTParams) (*CreateReleaseManifestUsingPOSTOK, *CreateReleaseManifestUsingPOSTCreated, error)

	DeleteReleaseManifestUsingDELETE(params *DeleteReleaseManifestUsingDELETEParams) (*DeleteReleaseManifestUsingDELETEOK, *DeleteReleaseManifestUsingDELETENoContent, error)

	GetAllPhaseTasksExecutionUsingGET(params *GetAllPhaseTasksExecutionUsingGETParams) (*GetAllPhaseTasksExecutionUsingGETOK, error)

	GetPhaseExecutionUsingGET(params *GetPhaseExecutionUsingGETParams) (*GetPhaseExecutionUsingGETOK, error)

	GetPhasesExecutionUsingGET(params *GetPhasesExecutionUsingGETParams) (*GetPhasesExecutionUsingGETOK, error)

	GetReleaseExecutionUsingGET(params *GetReleaseExecutionUsingGETParams) (*GetReleaseExecutionUsingGETOK, error)

	GetReleaseManifestUsingGET(params *GetReleaseManifestUsingGETParams) (*GetReleaseManifestUsingGETOK, error)

	GetTaskExecutionUsingGET(params *GetTaskExecutionUsingGETParams) (*GetTaskExecutionUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangePhaseExecutionUsingPATCH changes a phase execution
*/
func (a *Client) ChangePhaseExecutionUsingPATCH(params *ChangePhaseExecutionUsingPATCHParams) (*ChangePhaseExecutionUsingPATCHOK, *ChangePhaseExecutionUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePhaseExecutionUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changePhaseExecutionUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/releases-execution/{releaseId}/phases-execution/{phaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangePhaseExecutionUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ChangePhaseExecutionUsingPATCHOK:
		return value, nil, nil
	case *ChangePhaseExecutionUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangePhaseExecutionUsingPATCH1 changes a phase execution
*/
func (a *Client) ChangePhaseExecutionUsingPATCH1(params *ChangePhaseExecutionUsingPATCH1Params) (*ChangePhaseExecutionUsingPATCH1OK, *ChangePhaseExecutionUsingPATCH1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePhaseExecutionUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changePhaseExecutionUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/releases-execution/{releaseName}/{releaseVersionName}/phases-execution/{phaseName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangePhaseExecutionUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ChangePhaseExecutionUsingPATCH1OK:
		return value, nil, nil
	case *ChangePhaseExecutionUsingPATCH1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeReleaseExecutionUsingPATCH changes a release execution
*/
func (a *Client) ChangeReleaseExecutionUsingPATCH(params *ChangeReleaseExecutionUsingPATCHParams) (*ChangeReleaseExecutionUsingPATCHOK, *ChangeReleaseExecutionUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeReleaseExecutionUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeReleaseExecutionUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/releases-execution/{releaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeReleaseExecutionUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ChangeReleaseExecutionUsingPATCHOK:
		return value, nil, nil
	case *ChangeReleaseExecutionUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeTaskExecutionUsingPATCH changes a task execution
*/
func (a *Client) ChangeTaskExecutionUsingPATCH(params *ChangeTaskExecutionUsingPATCHParams) (*ChangeTaskExecutionUsingPATCHOK, *ChangeTaskExecutionUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTaskExecutionUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTaskExecutionUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeTaskExecutionUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ChangeTaskExecutionUsingPATCHOK:
		return value, nil, nil
	case *ChangeTaskExecutionUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateReleaseManifestUsingPOST creates a release execution manifest
*/
func (a *Client) CreateReleaseManifestUsingPOST(params *CreateReleaseManifestUsingPOSTParams) (*CreateReleaseManifestUsingPOSTOK, *CreateReleaseManifestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReleaseManifestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createReleaseManifestUsingPOST",
		Method:             "POST",
		PathPattern:        "/releases-execution/{releaseId}/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReleaseManifestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateReleaseManifestUsingPOSTOK:
		return value, nil, nil
	case *CreateReleaseManifestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteReleaseManifestUsingDELETE deletes a release execution manifest
*/
func (a *Client) DeleteReleaseManifestUsingDELETE(params *DeleteReleaseManifestUsingDELETEParams) (*DeleteReleaseManifestUsingDELETEOK, *DeleteReleaseManifestUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReleaseManifestUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReleaseManifestUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/releases-execution/{releaseId}/manifests/{manifestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReleaseManifestUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteReleaseManifestUsingDELETEOK:
		return value, nil, nil
	case *DeleteReleaseManifestUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for execution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllPhaseTasksExecutionUsingGET gets all phase tasks execution
*/
func (a *Client) GetAllPhaseTasksExecutionUsingGET(params *GetAllPhaseTasksExecutionUsingGETParams) (*GetAllPhaseTasksExecutionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPhaseTasksExecutionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllPhaseTasksExecutionUsingGET",
		Method:             "GET",
		PathPattern:        "/releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPhaseTasksExecutionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPhaseTasksExecutionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPhaseTasksExecutionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhaseExecutionUsingGET retrieves a phase execution
*/
func (a *Client) GetPhaseExecutionUsingGET(params *GetPhaseExecutionUsingGETParams) (*GetPhaseExecutionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhaseExecutionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhaseExecutionUsingGET",
		Method:             "GET",
		PathPattern:        "/releases-execution/{releaseId}/phases-execution/{phaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPhaseExecutionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhaseExecutionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhaseExecutionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhasesExecutionUsingGET retrieves all phases execution
*/
func (a *Client) GetPhasesExecutionUsingGET(params *GetPhasesExecutionUsingGETParams) (*GetPhasesExecutionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhasesExecutionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhasesExecutionUsingGET",
		Method:             "GET",
		PathPattern:        "/releases-execution/{releaseId}/phases-execution",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPhasesExecutionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhasesExecutionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhasesExecutionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseExecutionUsingGET retrieves a release execution
*/
func (a *Client) GetReleaseExecutionUsingGET(params *GetReleaseExecutionUsingGETParams) (*GetReleaseExecutionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseExecutionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseExecutionUsingGET",
		Method:             "GET",
		PathPattern:        "/releases-execution/{releaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseExecutionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseExecutionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseExecutionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReleaseManifestUsingGET gets a release execution manifest
*/
func (a *Client) GetReleaseManifestUsingGET(params *GetReleaseManifestUsingGETParams) (*GetReleaseManifestUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseManifestUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReleaseManifestUsingGET",
		Method:             "GET",
		PathPattern:        "/releases-execution/{releaseId}/manifests/{manifestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseManifestUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleaseManifestUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReleaseManifestUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskExecutionUsingGET gets a task execution
*/
func (a *Client) GetTaskExecutionUsingGET(params *GetTaskExecutionUsingGETParams) (*GetTaskExecutionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskExecutionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskExecutionUsingGET",
		Method:             "GET",
		PathPattern:        "/releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskExecutionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskExecutionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskExecutionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
