// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/execution/models"
)

// GetAllPhaseTasksExecutionUsingGETReader is a Reader for the GetAllPhaseTasksExecutionUsingGET structure.
type GetAllPhaseTasksExecutionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllPhaseTasksExecutionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllPhaseTasksExecutionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllPhaseTasksExecutionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllPhaseTasksExecutionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllPhaseTasksExecutionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllPhaseTasksExecutionUsingGETOK creates a GetAllPhaseTasksExecutionUsingGETOK with default headers values
func NewGetAllPhaseTasksExecutionUsingGETOK() *GetAllPhaseTasksExecutionUsingGETOK {
	return &GetAllPhaseTasksExecutionUsingGETOK{}
}

/*GetAllPhaseTasksExecutionUsingGETOK handles this case with default header values.

OK
*/
type GetAllPhaseTasksExecutionUsingGETOK struct {
	Payload *models.ListHolderDtoTaskExecutionDto
}

func (o *GetAllPhaseTasksExecutionUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution][%d] getAllPhaseTasksExecutionUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllPhaseTasksExecutionUsingGETOK) GetPayload() *models.ListHolderDtoTaskExecutionDto {
	return o.Payload
}

func (o *GetAllPhaseTasksExecutionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoTaskExecutionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPhaseTasksExecutionUsingGETUnauthorized creates a GetAllPhaseTasksExecutionUsingGETUnauthorized with default headers values
func NewGetAllPhaseTasksExecutionUsingGETUnauthorized() *GetAllPhaseTasksExecutionUsingGETUnauthorized {
	return &GetAllPhaseTasksExecutionUsingGETUnauthorized{}
}

/*GetAllPhaseTasksExecutionUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllPhaseTasksExecutionUsingGETUnauthorized struct {
}

func (o *GetAllPhaseTasksExecutionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution][%d] getAllPhaseTasksExecutionUsingGETUnauthorized ", 401)
}

func (o *GetAllPhaseTasksExecutionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPhaseTasksExecutionUsingGETForbidden creates a GetAllPhaseTasksExecutionUsingGETForbidden with default headers values
func NewGetAllPhaseTasksExecutionUsingGETForbidden() *GetAllPhaseTasksExecutionUsingGETForbidden {
	return &GetAllPhaseTasksExecutionUsingGETForbidden{}
}

/*GetAllPhaseTasksExecutionUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllPhaseTasksExecutionUsingGETForbidden struct {
}

func (o *GetAllPhaseTasksExecutionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution][%d] getAllPhaseTasksExecutionUsingGETForbidden ", 403)
}

func (o *GetAllPhaseTasksExecutionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPhaseTasksExecutionUsingGETNotFound creates a GetAllPhaseTasksExecutionUsingGETNotFound with default headers values
func NewGetAllPhaseTasksExecutionUsingGETNotFound() *GetAllPhaseTasksExecutionUsingGETNotFound {
	return &GetAllPhaseTasksExecutionUsingGETNotFound{}
}

/*GetAllPhaseTasksExecutionUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllPhaseTasksExecutionUsingGETNotFound struct {
}

func (o *GetAllPhaseTasksExecutionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /releases-execution/{releaseId}/phases-execution/{phaseId}/tasks-execution][%d] getAllPhaseTasksExecutionUsingGETNotFound ", 404)
}

func (o *GetAllPhaseTasksExecutionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
