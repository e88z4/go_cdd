// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PluginDto plugin dto
// swagger:model PluginDto
type PluginDto struct {

	// application model
	ApplicationModel bool `json:"applicationModel,omitempty"`

	// commit source
	CommitSource bool `json:"commitSource,omitempty"`

	// connectivity test
	ConnectivityTest bool `json:"connectivityTest,omitempty"`

	// content
	Content bool `json:"content,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// discovery Url
	DiscoveryURL string `json:"discoveryUrl,omitempty"`

	// endpoint template
	EndpointTemplate *PluginServiceTemplateDto `json:"endpointTemplate,omitempty"`

	// file source
	FileSource bool `json:"fileSource,omitempty"`

	// icon Url
	IconURL string `json:"iconUrl,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is use proxy
	IsUseProxy bool `json:"isUseProxy,omitempty"`

	// last sync
	LastSync int64 `json:"lastSync,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// num of tasks
	NumOfTasks int32 `json:"numOfTasks,omitempty"`

	// plugin Id
	PluginID int64 `json:"pluginId,omitempty"`

	// plugin service templates
	PluginServiceTemplates []*PluginServiceTemplateDto `json:"pluginServiceTemplates"`

	// test source
	TestSource bool `json:"testSource,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this plugin dto
func (m *PluginDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginServiceTemplates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginDto) validateEndpointTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointTemplate) { // not required
		return nil
	}

	if m.EndpointTemplate != nil {
		if err := m.EndpointTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpointTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *PluginDto) validatePluginServiceTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.PluginServiceTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.PluginServiceTemplates); i++ {
		if swag.IsZero(m.PluginServiceTemplates[i]) { // not required
			continue
		}

		if m.PluginServiceTemplates[i] != nil {
			if err := m.PluginServiceTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pluginServiceTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginDto) UnmarshalBinary(b []byte) error {
	var res PluginDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
