// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PluginServiceDto plugin service dto
// swagger:model PluginServiceDto
type PluginServiceDto struct {

	// description
	Description string `json:"description,omitempty"`

	// endpoint
	Endpoint *NamedIdentifiableDto `json:"endpoint,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is missing parameters
	IsMissingParameters bool `json:"isMissingParameters,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameters
	Parameters []*BasicPluginServiceParameterDtoObject `json:"parameters"`

	// plugin
	Plugin *PluginDto `json:"plugin,omitempty"`

	// template Id
	TemplateID int64 `json:"templateId,omitempty"`

	// template name
	TemplateName string `json:"templateName,omitempty"`
}

// Validate validates this plugin service dto
func (m *PluginServiceDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginServiceDto) validateEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	if m.Endpoint != nil {
		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *PluginServiceDto) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PluginServiceDto) validatePlugin(formats strfmt.Registry) error {

	if swag.IsZero(m.Plugin) { // not required
		return nil
	}

	if m.Plugin != nil {
		if err := m.Plugin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginServiceDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginServiceDto) UnmarshalBinary(b []byte) error {
	var res PluginServiceDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
