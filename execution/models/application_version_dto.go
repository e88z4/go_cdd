// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationVersionDto application version dto
// swagger:model ApplicationVersionDto
type ApplicationVersionDto struct {

	// application
	Application *NamedIdentifiableDto `json:"application,omitempty"`

	// based on
	BasedOn *NamedIdentifiableDto `json:"basedOn,omitempty"`

	// build number
	BuildNumber string `json:"buildNumber,omitempty"`

	// commit Id
	CommitID string `json:"commitId,omitempty"`

	// commit source
	CommitSource *CommitSourceDto `json:"commitSource,omitempty"`

	// content source
	ContentSource *ContentSourceDto `json:"contentSource,omitempty"`

	// creation date
	CreationDate int64 `json:"creationDate,omitempty"`

	// dependent by
	DependentBy []*ApplicationVersionDto `json:"dependentBy"`

	// depends on
	DependsOn []*ApplicationVersionDto `json:"dependsOn"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this application version dto
func (m *ApplicationVersionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependentBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependsOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVersionDto) validateApplication(formats strfmt.Registry) error {

	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVersionDto) validateBasedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.BasedOn) { // not required
		return nil
	}

	if m.BasedOn != nil {
		if err := m.BasedOn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basedOn")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVersionDto) validateCommitSource(formats strfmt.Registry) error {

	if swag.IsZero(m.CommitSource) { // not required
		return nil
	}

	if m.CommitSource != nil {
		if err := m.CommitSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commitSource")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVersionDto) validateContentSource(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentSource) { // not required
		return nil
	}

	if m.ContentSource != nil {
		if err := m.ContentSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentSource")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVersionDto) validateDependentBy(formats strfmt.Registry) error {

	if swag.IsZero(m.DependentBy) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentBy); i++ {
		if swag.IsZero(m.DependentBy[i]) { // not required
			continue
		}

		if m.DependentBy[i] != nil {
			if err := m.DependentBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationVersionDto) validateDependsOn(formats strfmt.Registry) error {

	if swag.IsZero(m.DependsOn) { // not required
		return nil
	}

	for i := 0; i < len(m.DependsOn); i++ {
		if swag.IsZero(m.DependsOn[i]) { // not required
			continue
		}

		if m.DependsOn[i] != nil {
			if err := m.DependsOn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependsOn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationVersionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationVersionDto) UnmarshalBinary(b []byte) error {
	var res ApplicationVersionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
