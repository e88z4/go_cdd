// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommitSourceDto commit source dto
// swagger:model CommitSourceDto
type CommitSourceDto struct {

	// commit regular expression
	CommitRegularExpression string `json:"commitRegularExpression,omitempty"`

	// creation date
	CreationDate int64 `json:"creationDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// exclude files and folders
	ExcludeFilesAndFolders string `json:"excludeFilesAndFolders,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// include files and folders
	IncludeFilesAndFolders string `json:"includeFilesAndFolders,omitempty"`

	// last import date
	LastImportDate int64 `json:"lastImportDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// plugin service
	PluginService *PluginServiceDto `json:"pluginService,omitempty"`
}

// Validate validates this commit source dto
func (m *CommitSourceDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePluginService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitSourceDto) validatePluginService(formats strfmt.Registry) error {

	if swag.IsZero(m.PluginService) { // not required
		return nil
	}

	if m.PluginService != nil {
		if err := m.PluginService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pluginService")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitSourceDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitSourceDto) UnmarshalBinary(b []byte) error {
	var res CommitSourceDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
