// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhaseExecutionDto phase execution dto
// swagger:model PhaseExecutionDto
type PhaseExecutionDto struct {

	// allowed statuses
	AllowedStatuses []string `json:"allowedStatuses"`

	// approved by
	ApprovedBy *UserDto `json:"approvedBy,omitempty"`

	// approved date
	ApprovedDate int64 `json:"approvedDate,omitempty"`

	// deny approve reason
	// Enum: [PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS RELEASE_NOT_IN_EXECUTION_STATE TRANSITION_DOES_NOT_EXIST ALREADY_IN_STATE PHASE_NOT_APPROVED_TO_RUN MAX_ALLOWED_RUNNING_RELEASES_REACHED PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK PHASE_NOT_IN_EXECUTION_STATE TASK_MISSING_PARAMS ON_FAILURE_PHASE_IS_RUNNING CALLER_OF_ON_ERROR_PHASE_IS_RUNNING]
	DenyApproveReason string `json:"denyApproveReason,omitempty"`

	// deny start reason
	// Enum: [PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS RELEASE_NOT_IN_EXECUTION_STATE TRANSITION_DOES_NOT_EXIST ALREADY_IN_STATE PHASE_NOT_APPROVED_TO_RUN MAX_ALLOWED_RUNNING_RELEASES_REACHED PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK PHASE_NOT_IN_EXECUTION_STATE TASK_MISSING_PARAMS ON_FAILURE_PHASE_IS_RUNNING CALLER_OF_ON_ERROR_PHASE_IS_RUNNING]
	DenyStartReason string `json:"denyStartReason,omitempty"`

	// end date
	EndDate int64 `json:"endDate,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is approved
	IsApproved bool `json:"isApproved,omitempty"`

	// percent completed
	PercentCompleted float32 `json:"percentCompleted,omitempty"`

	// phase Id
	PhaseID int64 `json:"phaseId,omitempty"`

	// start date
	StartDate int64 `json:"startDate,omitempty"`

	// status
	// Enum: [DESIGN RUNNING RUNNING_WITH_FAILURES STOPPED DONE DONE_WITH_FAILURES APPROVED NOT_APPROVED FAILED_TO_RUN]
	Status string `json:"status,omitempty"`
}

// Validate validates this phase execution dto
func (m *PhaseExecutionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDenyApproveReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDenyStartReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var phaseExecutionDtoAllowedStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DESIGN","RUNNING","RUNNING_WITH_FAILURES","STOPPED","DONE","DONE_WITH_FAILURES","APPROVED","NOT_APPROVED","FAILED_TO_RUN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phaseExecutionDtoAllowedStatusesItemsEnum = append(phaseExecutionDtoAllowedStatusesItemsEnum, v)
	}
}

func (m *PhaseExecutionDto) validateAllowedStatusesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phaseExecutionDtoAllowedStatusesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhaseExecutionDto) validateAllowedStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedStatuses); i++ {

		// value enum
		if err := m.validateAllowedStatusesItemsEnum("allowedStatuses"+"."+strconv.Itoa(i), "body", m.AllowedStatuses[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PhaseExecutionDto) validateApprovedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovedBy) { // not required
		return nil
	}

	if m.ApprovedBy != nil {
		if err := m.ApprovedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approvedBy")
			}
			return err
		}
	}

	return nil
}

var phaseExecutionDtoTypeDenyApproveReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS","RELEASE_NOT_IN_EXECUTION_STATE","TRANSITION_DOES_NOT_EXIST","ALREADY_IN_STATE","PHASE_NOT_APPROVED_TO_RUN","MAX_ALLOWED_RUNNING_RELEASES_REACHED","PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK","PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE","RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK","PHASE_NOT_IN_EXECUTION_STATE","TASK_MISSING_PARAMS","ON_FAILURE_PHASE_IS_RUNNING","CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phaseExecutionDtoTypeDenyApproveReasonPropEnum = append(phaseExecutionDtoTypeDenyApproveReasonPropEnum, v)
	}
}

const (

	// PhaseExecutionDtoDenyApproveReasonPHASECONTAINSTASKWITHMISSINGPARAMS captures enum value "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"
	PhaseExecutionDtoDenyApproveReasonPHASECONTAINSTASKWITHMISSINGPARAMS string = "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"

	// PhaseExecutionDtoDenyApproveReasonRELEASENOTINEXECUTIONSTATE captures enum value "RELEASE_NOT_IN_EXECUTION_STATE"
	PhaseExecutionDtoDenyApproveReasonRELEASENOTINEXECUTIONSTATE string = "RELEASE_NOT_IN_EXECUTION_STATE"

	// PhaseExecutionDtoDenyApproveReasonTRANSITIONDOESNOTEXIST captures enum value "TRANSITION_DOES_NOT_EXIST"
	PhaseExecutionDtoDenyApproveReasonTRANSITIONDOESNOTEXIST string = "TRANSITION_DOES_NOT_EXIST"

	// PhaseExecutionDtoDenyApproveReasonALREADYINSTATE captures enum value "ALREADY_IN_STATE"
	PhaseExecutionDtoDenyApproveReasonALREADYINSTATE string = "ALREADY_IN_STATE"

	// PhaseExecutionDtoDenyApproveReasonPHASENOTAPPROVEDTORUN captures enum value "PHASE_NOT_APPROVED_TO_RUN"
	PhaseExecutionDtoDenyApproveReasonPHASENOTAPPROVEDTORUN string = "PHASE_NOT_APPROVED_TO_RUN"

	// PhaseExecutionDtoDenyApproveReasonMAXALLOWEDRUNNINGRELEASESREACHED captures enum value "MAX_ALLOWED_RUNNING_RELEASES_REACHED"
	PhaseExecutionDtoDenyApproveReasonMAXALLOWEDRUNNINGRELEASESREACHED string = "MAX_ALLOWED_RUNNING_RELEASES_REACHED"

	// PhaseExecutionDtoDenyApproveReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK captures enum value "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"
	PhaseExecutionDtoDenyApproveReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK string = "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"

	// PhaseExecutionDtoDenyApproveReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE captures enum value "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"
	PhaseExecutionDtoDenyApproveReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE string = "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"

	// PhaseExecutionDtoDenyApproveReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK captures enum value "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"
	PhaseExecutionDtoDenyApproveReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK string = "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"

	// PhaseExecutionDtoDenyApproveReasonPHASENOTINEXECUTIONSTATE captures enum value "PHASE_NOT_IN_EXECUTION_STATE"
	PhaseExecutionDtoDenyApproveReasonPHASENOTINEXECUTIONSTATE string = "PHASE_NOT_IN_EXECUTION_STATE"

	// PhaseExecutionDtoDenyApproveReasonTASKMISSINGPARAMS captures enum value "TASK_MISSING_PARAMS"
	PhaseExecutionDtoDenyApproveReasonTASKMISSINGPARAMS string = "TASK_MISSING_PARAMS"

	// PhaseExecutionDtoDenyApproveReasonONFAILUREPHASEISRUNNING captures enum value "ON_FAILURE_PHASE_IS_RUNNING"
	PhaseExecutionDtoDenyApproveReasonONFAILUREPHASEISRUNNING string = "ON_FAILURE_PHASE_IS_RUNNING"

	// PhaseExecutionDtoDenyApproveReasonCALLEROFONERRORPHASEISRUNNING captures enum value "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
	PhaseExecutionDtoDenyApproveReasonCALLEROFONERRORPHASEISRUNNING string = "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
)

// prop value enum
func (m *PhaseExecutionDto) validateDenyApproveReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phaseExecutionDtoTypeDenyApproveReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhaseExecutionDto) validateDenyApproveReason(formats strfmt.Registry) error {

	if swag.IsZero(m.DenyApproveReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateDenyApproveReasonEnum("denyApproveReason", "body", m.DenyApproveReason); err != nil {
		return err
	}

	return nil
}

var phaseExecutionDtoTypeDenyStartReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS","RELEASE_NOT_IN_EXECUTION_STATE","TRANSITION_DOES_NOT_EXIST","ALREADY_IN_STATE","PHASE_NOT_APPROVED_TO_RUN","MAX_ALLOWED_RUNNING_RELEASES_REACHED","PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK","PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE","RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK","PHASE_NOT_IN_EXECUTION_STATE","TASK_MISSING_PARAMS","ON_FAILURE_PHASE_IS_RUNNING","CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phaseExecutionDtoTypeDenyStartReasonPropEnum = append(phaseExecutionDtoTypeDenyStartReasonPropEnum, v)
	}
}

const (

	// PhaseExecutionDtoDenyStartReasonPHASECONTAINSTASKWITHMISSINGPARAMS captures enum value "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"
	PhaseExecutionDtoDenyStartReasonPHASECONTAINSTASKWITHMISSINGPARAMS string = "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"

	// PhaseExecutionDtoDenyStartReasonRELEASENOTINEXECUTIONSTATE captures enum value "RELEASE_NOT_IN_EXECUTION_STATE"
	PhaseExecutionDtoDenyStartReasonRELEASENOTINEXECUTIONSTATE string = "RELEASE_NOT_IN_EXECUTION_STATE"

	// PhaseExecutionDtoDenyStartReasonTRANSITIONDOESNOTEXIST captures enum value "TRANSITION_DOES_NOT_EXIST"
	PhaseExecutionDtoDenyStartReasonTRANSITIONDOESNOTEXIST string = "TRANSITION_DOES_NOT_EXIST"

	// PhaseExecutionDtoDenyStartReasonALREADYINSTATE captures enum value "ALREADY_IN_STATE"
	PhaseExecutionDtoDenyStartReasonALREADYINSTATE string = "ALREADY_IN_STATE"

	// PhaseExecutionDtoDenyStartReasonPHASENOTAPPROVEDTORUN captures enum value "PHASE_NOT_APPROVED_TO_RUN"
	PhaseExecutionDtoDenyStartReasonPHASENOTAPPROVEDTORUN string = "PHASE_NOT_APPROVED_TO_RUN"

	// PhaseExecutionDtoDenyStartReasonMAXALLOWEDRUNNINGRELEASESREACHED captures enum value "MAX_ALLOWED_RUNNING_RELEASES_REACHED"
	PhaseExecutionDtoDenyStartReasonMAXALLOWEDRUNNINGRELEASESREACHED string = "MAX_ALLOWED_RUNNING_RELEASES_REACHED"

	// PhaseExecutionDtoDenyStartReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK captures enum value "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"
	PhaseExecutionDtoDenyStartReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK string = "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"

	// PhaseExecutionDtoDenyStartReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE captures enum value "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"
	PhaseExecutionDtoDenyStartReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE string = "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"

	// PhaseExecutionDtoDenyStartReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK captures enum value "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"
	PhaseExecutionDtoDenyStartReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK string = "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"

	// PhaseExecutionDtoDenyStartReasonPHASENOTINEXECUTIONSTATE captures enum value "PHASE_NOT_IN_EXECUTION_STATE"
	PhaseExecutionDtoDenyStartReasonPHASENOTINEXECUTIONSTATE string = "PHASE_NOT_IN_EXECUTION_STATE"

	// PhaseExecutionDtoDenyStartReasonTASKMISSINGPARAMS captures enum value "TASK_MISSING_PARAMS"
	PhaseExecutionDtoDenyStartReasonTASKMISSINGPARAMS string = "TASK_MISSING_PARAMS"

	// PhaseExecutionDtoDenyStartReasonONFAILUREPHASEISRUNNING captures enum value "ON_FAILURE_PHASE_IS_RUNNING"
	PhaseExecutionDtoDenyStartReasonONFAILUREPHASEISRUNNING string = "ON_FAILURE_PHASE_IS_RUNNING"

	// PhaseExecutionDtoDenyStartReasonCALLEROFONERRORPHASEISRUNNING captures enum value "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
	PhaseExecutionDtoDenyStartReasonCALLEROFONERRORPHASEISRUNNING string = "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
)

// prop value enum
func (m *PhaseExecutionDto) validateDenyStartReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phaseExecutionDtoTypeDenyStartReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhaseExecutionDto) validateDenyStartReason(formats strfmt.Registry) error {

	if swag.IsZero(m.DenyStartReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateDenyStartReasonEnum("denyStartReason", "body", m.DenyStartReason); err != nil {
		return err
	}

	return nil
}

var phaseExecutionDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DESIGN","RUNNING","RUNNING_WITH_FAILURES","STOPPED","DONE","DONE_WITH_FAILURES","APPROVED","NOT_APPROVED","FAILED_TO_RUN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phaseExecutionDtoTypeStatusPropEnum = append(phaseExecutionDtoTypeStatusPropEnum, v)
	}
}

const (

	// PhaseExecutionDtoStatusDESIGN captures enum value "DESIGN"
	PhaseExecutionDtoStatusDESIGN string = "DESIGN"

	// PhaseExecutionDtoStatusRUNNING captures enum value "RUNNING"
	PhaseExecutionDtoStatusRUNNING string = "RUNNING"

	// PhaseExecutionDtoStatusRUNNINGWITHFAILURES captures enum value "RUNNING_WITH_FAILURES"
	PhaseExecutionDtoStatusRUNNINGWITHFAILURES string = "RUNNING_WITH_FAILURES"

	// PhaseExecutionDtoStatusSTOPPED captures enum value "STOPPED"
	PhaseExecutionDtoStatusSTOPPED string = "STOPPED"

	// PhaseExecutionDtoStatusDONE captures enum value "DONE"
	PhaseExecutionDtoStatusDONE string = "DONE"

	// PhaseExecutionDtoStatusDONEWITHFAILURES captures enum value "DONE_WITH_FAILURES"
	PhaseExecutionDtoStatusDONEWITHFAILURES string = "DONE_WITH_FAILURES"

	// PhaseExecutionDtoStatusAPPROVED captures enum value "APPROVED"
	PhaseExecutionDtoStatusAPPROVED string = "APPROVED"

	// PhaseExecutionDtoStatusNOTAPPROVED captures enum value "NOT_APPROVED"
	PhaseExecutionDtoStatusNOTAPPROVED string = "NOT_APPROVED"

	// PhaseExecutionDtoStatusFAILEDTORUN captures enum value "FAILED_TO_RUN"
	PhaseExecutionDtoStatusFAILEDTORUN string = "FAILED_TO_RUN"
)

// prop value enum
func (m *PhaseExecutionDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phaseExecutionDtoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhaseExecutionDto) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhaseExecutionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhaseExecutionDto) UnmarshalBinary(b []byte) error {
	var res PhaseExecutionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
