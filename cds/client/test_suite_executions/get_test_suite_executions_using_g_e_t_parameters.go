// Code generated by go-swagger; DO NOT EDIT.

package test_suite_executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTestSuiteExecutionsUsingGETParams creates a new GetTestSuiteExecutionsUsingGETParams object
// with the default values initialized.
func NewGetTestSuiteExecutionsUsingGETParams() *GetTestSuiteExecutionsUsingGETParams {
	var ()
	return &GetTestSuiteExecutionsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTestSuiteExecutionsUsingGETParamsWithTimeout creates a new GetTestSuiteExecutionsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTestSuiteExecutionsUsingGETParamsWithTimeout(timeout time.Duration) *GetTestSuiteExecutionsUsingGETParams {
	var ()
	return &GetTestSuiteExecutionsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetTestSuiteExecutionsUsingGETParamsWithContext creates a new GetTestSuiteExecutionsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTestSuiteExecutionsUsingGETParamsWithContext(ctx context.Context) *GetTestSuiteExecutionsUsingGETParams {
	var ()
	return &GetTestSuiteExecutionsUsingGETParams{

		Context: ctx,
	}
}

// NewGetTestSuiteExecutionsUsingGETParamsWithHTTPClient creates a new GetTestSuiteExecutionsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTestSuiteExecutionsUsingGETParamsWithHTTPClient(client *http.Client) *GetTestSuiteExecutionsUsingGETParams {
	var ()
	return &GetTestSuiteExecutionsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetTestSuiteExecutionsUsingGETParams contains all the parameters to send to the API endpoint
for the get test suite executions using g e t operation typically these are written to a http.Request
*/
type GetTestSuiteExecutionsUsingGETParams struct {

	/*ApplicationID
	  applicationId

	*/
	ApplicationID int64
	/*ApplicationVersionID
	  applicationVersionId

	*/
	ApplicationVersionID int64
	/*Embed
	  embed

	*/
	Embed []string
	/*EndpointID
	  endpointId

	*/
	EndpointID *int64
	/*Environment
	  environmentId

	*/
	Environment *int64
	/*Filter
	  filter

	*/
	Filter *string
	/*PageNumber
	  pageNumber

	*/
	PageNumber *int32
	/*PageSize
	  pageSize

	*/
	PageSize *int32
	/*Phase
	  phaseIds

	*/
	Phase []int64
	/*Release
	  releaseId

	*/
	Release *int64
	/*SortDirection
	  sortDirection

	*/
	SortDirection *string
	/*SortField
	  sortField

	*/
	SortField *string
	/*Tag
	  tags

	*/
	Tag *string
	/*TestSource
	  testSourceId

	*/
	TestSource *int64
	/*TestSuiteExecutionStatus
	  testSuiteExecutionStatuses

	*/
	TestSuiteExecutionStatus []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithTimeout(timeout time.Duration) *GetTestSuiteExecutionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithContext(ctx context.Context) *GetTestSuiteExecutionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithHTTPClient(client *http.Client) *GetTestSuiteExecutionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithApplicationID(applicationID int64) *GetTestSuiteExecutionsUsingGETParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetApplicationID(applicationID int64) {
	o.ApplicationID = applicationID
}

// WithApplicationVersionID adds the applicationVersionID to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithApplicationVersionID(applicationVersionID int64) *GetTestSuiteExecutionsUsingGETParams {
	o.SetApplicationVersionID(applicationVersionID)
	return o
}

// SetApplicationVersionID adds the applicationVersionId to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetApplicationVersionID(applicationVersionID int64) {
	o.ApplicationVersionID = applicationVersionID
}

// WithEmbed adds the embed to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithEmbed(embed []string) *GetTestSuiteExecutionsUsingGETParams {
	o.SetEmbed(embed)
	return o
}

// SetEmbed adds the embed to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetEmbed(embed []string) {
	o.Embed = embed
}

// WithEndpointID adds the endpointID to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithEndpointID(endpointID *int64) *GetTestSuiteExecutionsUsingGETParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetEndpointID(endpointID *int64) {
	o.EndpointID = endpointID
}

// WithEnvironment adds the environment to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithEnvironment(environment *int64) *GetTestSuiteExecutionsUsingGETParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetEnvironment(environment *int64) {
	o.Environment = environment
}

// WithFilter adds the filter to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithFilter(filter *string) *GetTestSuiteExecutionsUsingGETParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPageNumber adds the pageNumber to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithPageNumber(pageNumber *int32) *GetTestSuiteExecutionsUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithPageSize(pageSize *int32) *GetTestSuiteExecutionsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPhase adds the phase to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithPhase(phase []int64) *GetTestSuiteExecutionsUsingGETParams {
	o.SetPhase(phase)
	return o
}

// SetPhase adds the phase to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetPhase(phase []int64) {
	o.Phase = phase
}

// WithRelease adds the release to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithRelease(release *int64) *GetTestSuiteExecutionsUsingGETParams {
	o.SetRelease(release)
	return o
}

// SetRelease adds the release to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetRelease(release *int64) {
	o.Release = release
}

// WithSortDirection adds the sortDirection to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithSortDirection(sortDirection *string) *GetTestSuiteExecutionsUsingGETParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetSortDirection(sortDirection *string) {
	o.SortDirection = sortDirection
}

// WithSortField adds the sortField to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithSortField(sortField *string) *GetTestSuiteExecutionsUsingGETParams {
	o.SetSortField(sortField)
	return o
}

// SetSortField adds the sortField to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetSortField(sortField *string) {
	o.SortField = sortField
}

// WithTag adds the tag to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithTag(tag *string) *GetTestSuiteExecutionsUsingGETParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTestSource adds the testSource to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithTestSource(testSource *int64) *GetTestSuiteExecutionsUsingGETParams {
	o.SetTestSource(testSource)
	return o
}

// SetTestSource adds the testSource to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetTestSource(testSource *int64) {
	o.TestSource = testSource
}

// WithTestSuiteExecutionStatus adds the testSuiteExecutionStatus to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) WithTestSuiteExecutionStatus(testSuiteExecutionStatus []string) *GetTestSuiteExecutionsUsingGETParams {
	o.SetTestSuiteExecutionStatus(testSuiteExecutionStatus)
	return o
}

// SetTestSuiteExecutionStatus adds the testSuiteExecutionStatus to the get test suite executions using g e t params
func (o *GetTestSuiteExecutionsUsingGETParams) SetTestSuiteExecutionStatus(testSuiteExecutionStatus []string) {
	o.TestSuiteExecutionStatus = testSuiteExecutionStatus
}

// WriteToRequest writes these params to a swagger request
func (o *GetTestSuiteExecutionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param applicationId
	if err := r.SetPathParam("applicationId", swag.FormatInt64(o.ApplicationID)); err != nil {
		return err
	}

	// path param applicationVersionId
	if err := r.SetPathParam("applicationVersionId", swag.FormatInt64(o.ApplicationVersionID)); err != nil {
		return err
	}

	valuesEmbed := o.Embed

	joinedEmbed := swag.JoinByFormat(valuesEmbed, "multi")
	// query array param embed
	if err := r.SetQueryParam("embed", joinedEmbed...); err != nil {
		return err
	}

	if o.EndpointID != nil {

		// query param endpointId
		var qrEndpointID int64
		if o.EndpointID != nil {
			qrEndpointID = *o.EndpointID
		}
		qEndpointID := swag.FormatInt64(qrEndpointID)
		if qEndpointID != "" {
			if err := r.SetQueryParam("endpointId", qEndpointID); err != nil {
				return err
			}
		}

	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment int64
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := swag.FormatInt64(qrEnvironment)
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page_number
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page_number", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	var valuesPhase []string
	for _, v := range o.Phase {
		valuesPhase = append(valuesPhase, swag.FormatInt64(v))
	}

	joinedPhase := swag.JoinByFormat(valuesPhase, "multi")
	// query array param phase
	if err := r.SetQueryParam("phase", joinedPhase...); err != nil {
		return err
	}

	if o.Release != nil {

		// query param release
		var qrRelease int64
		if o.Release != nil {
			qrRelease = *o.Release
		}
		qRelease := swag.FormatInt64(qrRelease)
		if qRelease != "" {
			if err := r.SetQueryParam("release", qRelease); err != nil {
				return err
			}
		}

	}

	if o.SortDirection != nil {

		// query param sort_direction
		var qrSortDirection string
		if o.SortDirection != nil {
			qrSortDirection = *o.SortDirection
		}
		qSortDirection := qrSortDirection
		if qSortDirection != "" {
			if err := r.SetQueryParam("sort_direction", qSortDirection); err != nil {
				return err
			}
		}

	}

	if o.SortField != nil {

		// query param sort_field
		var qrSortField string
		if o.SortField != nil {
			qrSortField = *o.SortField
		}
		qSortField := qrSortField
		if qSortField != "" {
			if err := r.SetQueryParam("sort_field", qSortField); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if o.TestSource != nil {

		// query param test_source
		var qrTestSource int64
		if o.TestSource != nil {
			qrTestSource = *o.TestSource
		}
		qTestSource := swag.FormatInt64(qrTestSource)
		if qTestSource != "" {
			if err := r.SetQueryParam("test_source", qTestSource); err != nil {
				return err
			}
		}

	}

	valuesTestSuiteExecutionStatus := o.TestSuiteExecutionStatus

	joinedTestSuiteExecutionStatus := swag.JoinByFormat(valuesTestSuiteExecutionStatus, "multi")
	// query array param test_suite_execution_status
	if err := r.SetQueryParam("test_suite_execution_status", joinedTestSuiteExecutionStatus...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
