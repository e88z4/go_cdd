/*
 * CDS
 *
 * Retrieves, updates, and deletes cds data
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type TestSuiteExecutionsApiService service

/* 
TestSuiteExecutionsApiService Retrieve test suite executions by id
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param applicationId applicationId
 * @param applicationVersionId applicationVersionId
 * @param testSuiteExecutionsHexId testSuiteExecutionId

@return TestSuitesExecutionDto
*/
func (a *TestSuiteExecutionsApiService) GetTestSuiteByIdUsingGET(ctx context.Context, applicationId int64, applicationVersionId int64, testSuiteExecutionsHexId string) (TestSuitesExecutionDto, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue TestSuitesExecutionDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/applications/{applicationId}/application-versions/{applicationVersionId}/test-suite-executions/{testSuiteExecutionsHexId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", fmt.Sprintf("%v", applicationId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationVersionId"+"}", fmt.Sprintf("%v", applicationVersionId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testSuiteExecutionsHexId"+"}", fmt.Sprintf("%v", testSuiteExecutionsHexId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v TestSuitesExecutionDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
TestSuiteExecutionsApiService Retrieve all test suite executions
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param applicationId applicationId
 * @param applicationVersionId applicationVersionId
 * @param optional nil or *GetTestSuiteExecutionsUsingGETOpts - Optional Parameters:
     * @param "TestSource" (optional.Int64) -  testSourceId
     * @param "SortField" (optional.String) -  sortField
     * @param "SortDirection" (optional.String) -  sortDirection
     * @param "Filter" (optional.String) -  filter
     * @param "EndpointId" (optional.Int64) -  endpointId
     * @param "Tag" (optional.String) -  tags
     * @param "Environment" (optional.Int64) -  environmentId
     * @param "Release" (optional.Int64) -  releaseId
     * @param "Phase" (optional.Interface of []int64) -  phaseIds
     * @param "Embed" (optional.Interface of []string) -  embed
     * @param "TestSuiteExecutionStatus" (optional.Interface of []string) -  testSuiteExecutionStatuses
     * @param "PageNumber" (optional.Int32) -  pageNumber
     * @param "PageSize" (optional.Int32) -  pageSize

@return TestSuitesExecutionPagedDto
*/

type GetTestSuiteExecutionsUsingGETOpts struct { 
	TestSource optional.Int64
	SortField optional.String
	SortDirection optional.String
	Filter optional.String
	EndpointId optional.Int64
	Tag optional.String
	Environment optional.Int64
	Release optional.Int64
	Phase optional.Interface
	Embed optional.Interface
	TestSuiteExecutionStatus optional.Interface
	PageNumber optional.Int32
	PageSize optional.Int32
}

func (a *TestSuiteExecutionsApiService) GetTestSuiteExecutionsUsingGET(ctx context.Context, applicationId int64, applicationVersionId int64, localVarOptionals *GetTestSuiteExecutionsUsingGETOpts) (TestSuitesExecutionPagedDto, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue TestSuitesExecutionPagedDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/applications/{applicationId}/application-versions/{applicationVersionId}/test-suite-executions"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", fmt.Sprintf("%v", applicationId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationVersionId"+"}", fmt.Sprintf("%v", applicationVersionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.TestSource.IsSet() {
		localVarQueryParams.Add("test_source", parameterToString(localVarOptionals.TestSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortField.IsSet() {
		localVarQueryParams.Add("sort_field", parameterToString(localVarOptionals.SortField.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortDirection.IsSet() {
		localVarQueryParams.Add("sort_direction", parameterToString(localVarOptionals.SortDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Filter.IsSet() {
		localVarQueryParams.Add("filter", parameterToString(localVarOptionals.Filter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndpointId.IsSet() {
		localVarQueryParams.Add("endpointId", parameterToString(localVarOptionals.EndpointId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tag.IsSet() {
		localVarQueryParams.Add("tag", parameterToString(localVarOptionals.Tag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Environment.IsSet() {
		localVarQueryParams.Add("environment", parameterToString(localVarOptionals.Environment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Release.IsSet() {
		localVarQueryParams.Add("release", parameterToString(localVarOptionals.Release.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Phase.IsSet() {
		localVarQueryParams.Add("phase", parameterToString(localVarOptionals.Phase.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Embed.IsSet() {
		localVarQueryParams.Add("embed", parameterToString(localVarOptionals.Embed.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.TestSuiteExecutionStatus.IsSet() {
		localVarQueryParams.Add("test_suite_execution_status", parameterToString(localVarOptionals.TestSuiteExecutionStatus.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("page_number", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v TestSuitesExecutionPagedDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
