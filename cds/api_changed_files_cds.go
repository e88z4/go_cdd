/*
 * CDS
 *
 * Retrieves, updates, and deletes cds data
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ChangedFilesCdsApiService service

/* 
ChangedFilesCdsApiService Retrieve changed files per Application version from CDS
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param applicationId applicationId
 * @param applicationVersionId applicationVersionId
 * @param optional nil or *GetChangedFilesUsingGETOpts - Optional Parameters:
     * @param "IsAccessed" (optional.Bool) -  isAccessed
     * @param "IsExcluded" (optional.Bool) -  isExcluded
     * @param "Status" (optional.Interface of []string) -  fileStatuses
     * @param "PageNumber" (optional.Int32) -  pageNumber
     * @param "PageSize" (optional.Int32) -  pageSize

@return PagedResultDtoChangedFileDto
*/

type GetChangedFilesUsingGETOpts struct { 
	IsAccessed optional.Bool
	IsExcluded optional.Bool
	Status optional.Interface
	PageNumber optional.Int32
	PageSize optional.Int32
}

func (a *ChangedFilesCdsApiService) GetChangedFilesUsingGET(ctx context.Context, applicationId int64, applicationVersionId int64, localVarOptionals *GetChangedFilesUsingGETOpts) (PagedResultDtoChangedFileDto, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PagedResultDtoChangedFileDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/applications/{applicationId}/application-versions/{applicationVersionId}/changed-files"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", fmt.Sprintf("%v", applicationId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationVersionId"+"}", fmt.Sprintf("%v", applicationVersionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsAccessed.IsSet() {
		localVarQueryParams.Add("is_accessed", parameterToString(localVarOptionals.IsAccessed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsExcluded.IsSet() {
		localVarQueryParams.Add("is_excluded", parameterToString(localVarOptionals.IsExcluded.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("page_number", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v PagedResultDtoChangedFileDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
