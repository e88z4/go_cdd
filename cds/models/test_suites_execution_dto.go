// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestSuitesExecutionDto test suites execution dto
// swagger:model TestSuitesExecutionDto
type TestSuitesExecutionDto struct {

	// application
	Application *NamedIdentifiableDto `json:"application,omitempty"`

	// application version
	ApplicationVersion *NamedIdentifiableDto `json:"applicationVersion,omitempty"`

	// build number
	BuildNumber string `json:"buildNumber,omitempty"`

	// change Id
	ChangeID string `json:"changeId,omitempty"`

	// commit Id
	CommitID string `json:"commitId,omitempty"`

	// environments
	Environments []*NamedIdentifiableDto `json:"environments"`

	// execution duration
	ExecutionDuration int64 `json:"executionDuration,omitempty"`

	// execution end date
	ExecutionEndDate int64 `json:"executionEndDate,omitempty"`

	// execution start date
	ExecutionStartDate int64 `json:"executionStartDate,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is only intelligent test suites
	IsOnlyIntelligentTestSuites bool `json:"isOnlyIntelligentTestSuites,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of disabled test suites
	NumberOfDisabledTestSuites int64 `json:"numberOfDisabledTestSuites,omitempty"`

	// number of error test suites
	NumberOfErrorTestSuites int64 `json:"numberOfErrorTestSuites,omitempty"`

	// number of failed test suites
	NumberOfFailedTestSuites int64 `json:"numberOfFailedTestSuites,omitempty"`

	// number of intelligent test suites
	NumberOfIntelligentTestSuites int64 `json:"numberOfIntelligentTestSuites,omitempty"`

	// number of skipped test suites
	NumberOfSkippedTestSuites int64 `json:"numberOfSkippedTestSuites,omitempty"`

	// number of successful test suites
	NumberOfSuccessfulTestSuites int64 `json:"numberOfSuccessfulTestSuites,omitempty"`

	// number of test suites
	NumberOfTestSuites int64 `json:"numberOfTestSuites,omitempty"`

	// phase
	Phase *NamedIdentifiableDto `json:"phase,omitempty"`

	// plugins counter
	PluginsCounter []*PluginCounterDto `json:"pluginsCounter"`

	// release
	Release *NamedVersionedIdentifiableDto `json:"release,omitempty"`

	// strategy counters
	StrategyCounters []*StrategyCounterDto `json:"strategyCounters"`

	// tags
	Tags []string `json:"tags"`

	// task
	Task *NamedIdentifiableDto `json:"task,omitempty"`

	// test suite results
	TestSuiteResults []*TestSuiteResultDto `json:"testSuiteResults"`
}

// Validate validates this test suites execution dto
func (m *TestSuitesExecutionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginsCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategyCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestSuiteResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestSuitesExecutionDto) validateApplication(formats strfmt.Registry) error {

	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuitesExecutionDto) validateApplicationVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationVersion) { // not required
		return nil
	}

	if m.ApplicationVersion != nil {
		if err := m.ApplicationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationVersion")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuitesExecutionDto) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSuitesExecutionDto) validatePhase(formats strfmt.Registry) error {

	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuitesExecutionDto) validatePluginsCounter(formats strfmt.Registry) error {

	if swag.IsZero(m.PluginsCounter) { // not required
		return nil
	}

	for i := 0; i < len(m.PluginsCounter); i++ {
		if swag.IsZero(m.PluginsCounter[i]) { // not required
			continue
		}

		if m.PluginsCounter[i] != nil {
			if err := m.PluginsCounter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pluginsCounter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSuitesExecutionDto) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuitesExecutionDto) validateStrategyCounters(formats strfmt.Registry) error {

	if swag.IsZero(m.StrategyCounters) { // not required
		return nil
	}

	for i := 0; i < len(m.StrategyCounters); i++ {
		if swag.IsZero(m.StrategyCounters[i]) { // not required
			continue
		}

		if m.StrategyCounters[i] != nil {
			if err := m.StrategyCounters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategyCounters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSuitesExecutionDto) validateTask(formats strfmt.Registry) error {

	if swag.IsZero(m.Task) { // not required
		return nil
	}

	if m.Task != nil {
		if err := m.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuitesExecutionDto) validateTestSuiteResults(formats strfmt.Registry) error {

	if swag.IsZero(m.TestSuiteResults) { // not required
		return nil
	}

	for i := 0; i < len(m.TestSuiteResults); i++ {
		if swag.IsZero(m.TestSuiteResults[i]) { // not required
			continue
		}

		if m.TestSuiteResults[i] != nil {
			if err := m.TestSuiteResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("testSuiteResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestSuitesExecutionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestSuitesExecutionDto) UnmarshalBinary(b []byte) error {
	var res TestSuitesExecutionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
