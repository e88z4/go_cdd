// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPermissionsUsingGETParams creates a new GetPermissionsUsingGETParams object
// with the default values initialized.
func NewGetPermissionsUsingGETParams() *GetPermissionsUsingGETParams {
	var ()
	return &GetPermissionsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPermissionsUsingGETParamsWithTimeout creates a new GetPermissionsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPermissionsUsingGETParamsWithTimeout(timeout time.Duration) *GetPermissionsUsingGETParams {
	var ()
	return &GetPermissionsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetPermissionsUsingGETParamsWithContext creates a new GetPermissionsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPermissionsUsingGETParamsWithContext(ctx context.Context) *GetPermissionsUsingGETParams {
	var ()
	return &GetPermissionsUsingGETParams{

		Context: ctx,
	}
}

// NewGetPermissionsUsingGETParamsWithHTTPClient creates a new GetPermissionsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPermissionsUsingGETParamsWithHTTPClient(client *http.Client) *GetPermissionsUsingGETParams {
	var ()
	return &GetPermissionsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetPermissionsUsingGETParams contains all the parameters to send to the API endpoint
for the get permissions using g e t operation typically these are written to a http.Request
*/
type GetPermissionsUsingGETParams struct {

	/*IsProjectSpecific
	  isProjectSpecific

	*/
	IsProjectSpecific *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) WithTimeout(timeout time.Duration) *GetPermissionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) WithContext(ctx context.Context) *GetPermissionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) WithHTTPClient(client *http.Client) *GetPermissionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIsProjectSpecific adds the isProjectSpecific to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) WithIsProjectSpecific(isProjectSpecific *bool) *GetPermissionsUsingGETParams {
	o.SetIsProjectSpecific(isProjectSpecific)
	return o
}

// SetIsProjectSpecific adds the isProjectSpecific to the get permissions using g e t params
func (o *GetPermissionsUsingGETParams) SetIsProjectSpecific(isProjectSpecific *bool) {
	o.IsProjectSpecific = isProjectSpecific
}

// WriteToRequest writes these params to a swagger request
func (o *GetPermissionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IsProjectSpecific != nil {

		// query param is_project_specific
		var qrIsProjectSpecific bool
		if o.IsProjectSpecific != nil {
			qrIsProjectSpecific = *o.IsProjectSpecific
		}
		qIsProjectSpecific := swag.FormatBool(qrIsProjectSpecific)
		if qIsProjectSpecific != "" {
			if err := r.SetQueryParam("is_project_specific", qIsProjectSpecific); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
