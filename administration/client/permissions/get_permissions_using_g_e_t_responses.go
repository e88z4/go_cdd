// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetPermissionsUsingGETReader is a Reader for the GetPermissionsUsingGET structure.
type GetPermissionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPermissionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPermissionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPermissionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPermissionsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPermissionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPermissionsUsingGETOK creates a GetPermissionsUsingGETOK with default headers values
func NewGetPermissionsUsingGETOK() *GetPermissionsUsingGETOK {
	return &GetPermissionsUsingGETOK{}
}

/*GetPermissionsUsingGETOK handles this case with default header values.

OK
*/
type GetPermissionsUsingGETOK struct {
	Payload *models.ListHolderDtoPermissionDto
}

func (o *GetPermissionsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /permissions][%d] getPermissionsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetPermissionsUsingGETOK) GetPayload() *models.ListHolderDtoPermissionDto {
	return o.Payload
}

func (o *GetPermissionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoPermissionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPermissionsUsingGETUnauthorized creates a GetPermissionsUsingGETUnauthorized with default headers values
func NewGetPermissionsUsingGETUnauthorized() *GetPermissionsUsingGETUnauthorized {
	return &GetPermissionsUsingGETUnauthorized{}
}

/*GetPermissionsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPermissionsUsingGETUnauthorized struct {
}

func (o *GetPermissionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /permissions][%d] getPermissionsUsingGETUnauthorized ", 401)
}

func (o *GetPermissionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPermissionsUsingGETForbidden creates a GetPermissionsUsingGETForbidden with default headers values
func NewGetPermissionsUsingGETForbidden() *GetPermissionsUsingGETForbidden {
	return &GetPermissionsUsingGETForbidden{}
}

/*GetPermissionsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetPermissionsUsingGETForbidden struct {
}

func (o *GetPermissionsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /permissions][%d] getPermissionsUsingGETForbidden ", 403)
}

func (o *GetPermissionsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPermissionsUsingGETNotFound creates a GetPermissionsUsingGETNotFound with default headers values
func NewGetPermissionsUsingGETNotFound() *GetPermissionsUsingGETNotFound {
	return &GetPermissionsUsingGETNotFound{}
}

/*GetPermissionsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetPermissionsUsingGETNotFound struct {
}

func (o *GetPermissionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /permissions][%d] getPermissionsUsingGETNotFound ", 404)
}

func (o *GetPermissionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
