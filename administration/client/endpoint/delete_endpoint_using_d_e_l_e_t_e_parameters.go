// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteEndpointUsingDELETEParams creates a new DeleteEndpointUsingDELETEParams object
// with the default values initialized.
func NewDeleteEndpointUsingDELETEParams() *DeleteEndpointUsingDELETEParams {
	var ()
	return &DeleteEndpointUsingDELETEParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteEndpointUsingDELETEParamsWithTimeout creates a new DeleteEndpointUsingDELETEParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteEndpointUsingDELETEParamsWithTimeout(timeout time.Duration) *DeleteEndpointUsingDELETEParams {
	var ()
	return &DeleteEndpointUsingDELETEParams{

		timeout: timeout,
	}
}

// NewDeleteEndpointUsingDELETEParamsWithContext creates a new DeleteEndpointUsingDELETEParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteEndpointUsingDELETEParamsWithContext(ctx context.Context) *DeleteEndpointUsingDELETEParams {
	var ()
	return &DeleteEndpointUsingDELETEParams{

		Context: ctx,
	}
}

// NewDeleteEndpointUsingDELETEParamsWithHTTPClient creates a new DeleteEndpointUsingDELETEParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteEndpointUsingDELETEParamsWithHTTPClient(client *http.Client) *DeleteEndpointUsingDELETEParams {
	var ()
	return &DeleteEndpointUsingDELETEParams{
		HTTPClient: client,
	}
}

/*DeleteEndpointUsingDELETEParams contains all the parameters to send to the API endpoint
for the delete endpoint using d e l e t e operation typically these are written to a http.Request
*/
type DeleteEndpointUsingDELETEParams struct {

	/*EndpointID
	  endpointId

	*/
	EndpointID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) WithTimeout(timeout time.Duration) *DeleteEndpointUsingDELETEParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) WithContext(ctx context.Context) *DeleteEndpointUsingDELETEParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) WithHTTPClient(client *http.Client) *DeleteEndpointUsingDELETEParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndpointID adds the endpointID to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) WithEndpointID(endpointID int64) *DeleteEndpointUsingDELETEParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the delete endpoint using d e l e t e params
func (o *DeleteEndpointUsingDELETEParams) SetEndpointID(endpointID int64) {
	o.EndpointID = endpointID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteEndpointUsingDELETEParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param endpointId
	if err := r.SetPathParam("endpointId", swag.FormatInt64(o.EndpointID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
