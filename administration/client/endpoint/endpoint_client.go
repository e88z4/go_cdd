// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new endpoint API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for endpoint API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEndpointUsingPOST(params *CreateEndpointUsingPOSTParams) (*CreateEndpointUsingPOSTOK, *CreateEndpointUsingPOSTCreated, error)

	DeleteEndpointUsingDELETE(params *DeleteEndpointUsingDELETEParams) (*DeleteEndpointUsingDELETEOK, *DeleteEndpointUsingDELETENoContent, error)

	GetAllEndpointTemplatesUsingGET(params *GetAllEndpointTemplatesUsingGETParams) (*GetAllEndpointTemplatesUsingGETOK, error)

	GetAllEndpointsUsingGET(params *GetAllEndpointsUsingGETParams) (*GetAllEndpointsUsingGETOK, error)

	GetEndpointTemplateUsingGET(params *GetEndpointTemplateUsingGETParams) (*GetEndpointTemplateUsingGETOK, error)

	GetEndpointUsingGET(params *GetEndpointUsingGETParams) (*GetEndpointUsingGETOK, error)

	TestEndpointConnectivityUsingPOST(params *TestEndpointConnectivityUsingPOSTParams) (*TestEndpointConnectivityUsingPOSTOK, *TestEndpointConnectivityUsingPOSTCreated, error)

	UpdateEndpointUsingPUT(params *UpdateEndpointUsingPUTParams) (*UpdateEndpointUsingPUTOK, *UpdateEndpointUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEndpointUsingPOST creates an end point
*/
func (a *Client) CreateEndpointUsingPOST(params *CreateEndpointUsingPOSTParams) (*CreateEndpointUsingPOSTOK, *CreateEndpointUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEndpointUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEndpointUsingPOST",
		Method:             "POST",
		PathPattern:        "/endpoint-templates/{endpointTemplateId}/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEndpointUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEndpointUsingPOSTOK:
		return value, nil, nil
	case *CreateEndpointUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for endpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEndpointUsingDELETE deletes an end point
*/
func (a *Client) DeleteEndpointUsingDELETE(params *DeleteEndpointUsingDELETEParams) (*DeleteEndpointUsingDELETEOK, *DeleteEndpointUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEndpointUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEndpointUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/endpoints/{endpointId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEndpointUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEndpointUsingDELETEOK:
		return value, nil, nil
	case *DeleteEndpointUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for endpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllEndpointTemplatesUsingGET retrieves all end point templates
*/
func (a *Client) GetAllEndpointTemplatesUsingGET(params *GetAllEndpointTemplatesUsingGETParams) (*GetAllEndpointTemplatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEndpointTemplatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllEndpointTemplatesUsingGET",
		Method:             "GET",
		PathPattern:        "/endpoint-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEndpointTemplatesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEndpointTemplatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEndpointTemplatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllEndpointsUsingGET retrieves all endpoints
*/
func (a *Client) GetAllEndpointsUsingGET(params *GetAllEndpointsUsingGETParams) (*GetAllEndpointsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEndpointsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllEndpointsUsingGET",
		Method:             "GET",
		PathPattern:        "/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEndpointsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEndpointsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEndpointsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEndpointTemplateUsingGET retrieves an end point template
*/
func (a *Client) GetEndpointTemplateUsingGET(params *GetEndpointTemplateUsingGETParams) (*GetEndpointTemplateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointTemplateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEndpointTemplateUsingGET",
		Method:             "GET",
		PathPattern:        "/endpoint-templates/{endpointTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEndpointTemplateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointTemplateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEndpointTemplateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEndpointUsingGET retrieves an end point
*/
func (a *Client) GetEndpointUsingGET(params *GetEndpointUsingGETParams) (*GetEndpointUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEndpointUsingGET",
		Method:             "GET",
		PathPattern:        "/endpoints/{endpointId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEndpointUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEndpointUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestEndpointConnectivityUsingPOST connectivities test for a plugin endpoint
*/
func (a *Client) TestEndpointConnectivityUsingPOST(params *TestEndpointConnectivityUsingPOSTParams) (*TestEndpointConnectivityUsingPOSTOK, *TestEndpointConnectivityUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestEndpointConnectivityUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testEndpointConnectivityUsingPOST",
		Method:             "POST",
		PathPattern:        "/endpoints/connectivity-tests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestEndpointConnectivityUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TestEndpointConnectivityUsingPOSTOK:
		return value, nil, nil
	case *TestEndpointConnectivityUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for endpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEndpointUsingPUT updates an end point
*/
func (a *Client) UpdateEndpointUsingPUT(params *UpdateEndpointUsingPUTParams) (*UpdateEndpointUsingPUTOK, *UpdateEndpointUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEndpointUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEndpointUsingPUT",
		Method:             "PUT",
		PathPattern:        "/endpoints/{endpointId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEndpointUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEndpointUsingPUTOK:
		return value, nil, nil
	case *UpdateEndpointUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for endpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
