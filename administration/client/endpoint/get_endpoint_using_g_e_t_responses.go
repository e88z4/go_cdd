// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetEndpointUsingGETReader is a Reader for the GetEndpointUsingGET structure.
type GetEndpointUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEndpointUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEndpointUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEndpointUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEndpointUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEndpointUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEndpointUsingGETOK creates a GetEndpointUsingGETOK with default headers values
func NewGetEndpointUsingGETOK() *GetEndpointUsingGETOK {
	return &GetEndpointUsingGETOK{}
}

/*GetEndpointUsingGETOK handles this case with default header values.

OK
*/
type GetEndpointUsingGETOK struct {
	Payload *models.EndpointDto
}

func (o *GetEndpointUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /endpoints/{endpointId}][%d] getEndpointUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetEndpointUsingGETOK) GetPayload() *models.EndpointDto {
	return o.Payload
}

func (o *GetEndpointUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EndpointDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEndpointUsingGETUnauthorized creates a GetEndpointUsingGETUnauthorized with default headers values
func NewGetEndpointUsingGETUnauthorized() *GetEndpointUsingGETUnauthorized {
	return &GetEndpointUsingGETUnauthorized{}
}

/*GetEndpointUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetEndpointUsingGETUnauthorized struct {
}

func (o *GetEndpointUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /endpoints/{endpointId}][%d] getEndpointUsingGETUnauthorized ", 401)
}

func (o *GetEndpointUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEndpointUsingGETForbidden creates a GetEndpointUsingGETForbidden with default headers values
func NewGetEndpointUsingGETForbidden() *GetEndpointUsingGETForbidden {
	return &GetEndpointUsingGETForbidden{}
}

/*GetEndpointUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetEndpointUsingGETForbidden struct {
}

func (o *GetEndpointUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /endpoints/{endpointId}][%d] getEndpointUsingGETForbidden ", 403)
}

func (o *GetEndpointUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEndpointUsingGETNotFound creates a GetEndpointUsingGETNotFound with default headers values
func NewGetEndpointUsingGETNotFound() *GetEndpointUsingGETNotFound {
	return &GetEndpointUsingGETNotFound{}
}

/*GetEndpointUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetEndpointUsingGETNotFound struct {
}

func (o *GetEndpointUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /endpoints/{endpointId}][%d] getEndpointUsingGETNotFound ", 404)
}

func (o *GetEndpointUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
