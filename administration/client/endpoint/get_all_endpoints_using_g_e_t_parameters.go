// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAllEndpointsUsingGETParams creates a new GetAllEndpointsUsingGETParams object
// with the default values initialized.
func NewGetAllEndpointsUsingGETParams() *GetAllEndpointsUsingGETParams {
	var ()
	return &GetAllEndpointsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllEndpointsUsingGETParamsWithTimeout creates a new GetAllEndpointsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllEndpointsUsingGETParamsWithTimeout(timeout time.Duration) *GetAllEndpointsUsingGETParams {
	var ()
	return &GetAllEndpointsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetAllEndpointsUsingGETParamsWithContext creates a new GetAllEndpointsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllEndpointsUsingGETParamsWithContext(ctx context.Context) *GetAllEndpointsUsingGETParams {
	var ()
	return &GetAllEndpointsUsingGETParams{

		Context: ctx,
	}
}

// NewGetAllEndpointsUsingGETParamsWithHTTPClient creates a new GetAllEndpointsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllEndpointsUsingGETParamsWithHTTPClient(client *http.Client) *GetAllEndpointsUsingGETParams {
	var ()
	return &GetAllEndpointsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetAllEndpointsUsingGETParams contains all the parameters to send to the API endpoint
for the get all endpoints using g e t operation typically these are written to a http.Request
*/
type GetAllEndpointsUsingGETParams struct {

	/*Application
	  applicationIds

	*/
	Application []int64
	/*CurrentUser
	  userMustAllowedAllApplications

	*/
	CurrentUser *bool
	/*Environment
	  environmentIds

	*/
	Environment []int64
	/*Filter
	  freeTextFilter

	*/
	Filter *string
	/*PluginTemplateID
	  pluginServiceTemplateId

	*/
	PluginTemplateID *int64
	/*Type
	  pluginServiceTypeStr

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithTimeout(timeout time.Duration) *GetAllEndpointsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithContext(ctx context.Context) *GetAllEndpointsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithHTTPClient(client *http.Client) *GetAllEndpointsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithApplication(application []int64) *GetAllEndpointsUsingGETParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetApplication(application []int64) {
	o.Application = application
}

// WithCurrentUser adds the currentUser to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithCurrentUser(currentUser *bool) *GetAllEndpointsUsingGETParams {
	o.SetCurrentUser(currentUser)
	return o
}

// SetCurrentUser adds the currentUser to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetCurrentUser(currentUser *bool) {
	o.CurrentUser = currentUser
}

// WithEnvironment adds the environment to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithEnvironment(environment []int64) *GetAllEndpointsUsingGETParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetEnvironment(environment []int64) {
	o.Environment = environment
}

// WithFilter adds the filter to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithFilter(filter *string) *GetAllEndpointsUsingGETParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPluginTemplateID adds the pluginTemplateID to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithPluginTemplateID(pluginTemplateID *int64) *GetAllEndpointsUsingGETParams {
	o.SetPluginTemplateID(pluginTemplateID)
	return o
}

// SetPluginTemplateID adds the pluginTemplateId to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetPluginTemplateID(pluginTemplateID *int64) {
	o.PluginTemplateID = pluginTemplateID
}

// WithType adds the typeVar to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) WithType(typeVar *string) *GetAllEndpointsUsingGETParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get all endpoints using g e t params
func (o *GetAllEndpointsUsingGETParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllEndpointsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	var valuesApplication []string
	for _, v := range o.Application {
		valuesApplication = append(valuesApplication, swag.FormatInt64(v))
	}

	joinedApplication := swag.JoinByFormat(valuesApplication, "multi")
	// query array param application
	if err := r.SetQueryParam("application", joinedApplication...); err != nil {
		return err
	}

	if o.CurrentUser != nil {

		// query param current_user
		var qrCurrentUser bool
		if o.CurrentUser != nil {
			qrCurrentUser = *o.CurrentUser
		}
		qCurrentUser := swag.FormatBool(qrCurrentUser)
		if qCurrentUser != "" {
			if err := r.SetQueryParam("current_user", qCurrentUser); err != nil {
				return err
			}
		}

	}

	var valuesEnvironment []string
	for _, v := range o.Environment {
		valuesEnvironment = append(valuesEnvironment, swag.FormatInt64(v))
	}

	joinedEnvironment := swag.JoinByFormat(valuesEnvironment, "multi")
	// query array param environment
	if err := r.SetQueryParam("environment", joinedEnvironment...); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.PluginTemplateID != nil {

		// query param plugin_template_id
		var qrPluginTemplateID int64
		if o.PluginTemplateID != nil {
			qrPluginTemplateID = *o.PluginTemplateID
		}
		qPluginTemplateID := swag.FormatInt64(qrPluginTemplateID)
		if qPluginTemplateID != "" {
			if err := r.SetQueryParam("plugin_template_id", qPluginTemplateID); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
