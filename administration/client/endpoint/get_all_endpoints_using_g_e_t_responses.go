// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetAllEndpointsUsingGETReader is a Reader for the GetAllEndpointsUsingGET structure.
type GetAllEndpointsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllEndpointsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllEndpointsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllEndpointsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllEndpointsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllEndpointsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllEndpointsUsingGETOK creates a GetAllEndpointsUsingGETOK with default headers values
func NewGetAllEndpointsUsingGETOK() *GetAllEndpointsUsingGETOK {
	return &GetAllEndpointsUsingGETOK{}
}

/*GetAllEndpointsUsingGETOK handles this case with default header values.

OK
*/
type GetAllEndpointsUsingGETOK struct {
	Payload *models.ListHolderDtoEndpointDto
}

func (o *GetAllEndpointsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /endpoints][%d] getAllEndpointsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllEndpointsUsingGETOK) GetPayload() *models.ListHolderDtoEndpointDto {
	return o.Payload
}

func (o *GetAllEndpointsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoEndpointDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllEndpointsUsingGETUnauthorized creates a GetAllEndpointsUsingGETUnauthorized with default headers values
func NewGetAllEndpointsUsingGETUnauthorized() *GetAllEndpointsUsingGETUnauthorized {
	return &GetAllEndpointsUsingGETUnauthorized{}
}

/*GetAllEndpointsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllEndpointsUsingGETUnauthorized struct {
}

func (o *GetAllEndpointsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /endpoints][%d] getAllEndpointsUsingGETUnauthorized ", 401)
}

func (o *GetAllEndpointsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEndpointsUsingGETForbidden creates a GetAllEndpointsUsingGETForbidden with default headers values
func NewGetAllEndpointsUsingGETForbidden() *GetAllEndpointsUsingGETForbidden {
	return &GetAllEndpointsUsingGETForbidden{}
}

/*GetAllEndpointsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllEndpointsUsingGETForbidden struct {
}

func (o *GetAllEndpointsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /endpoints][%d] getAllEndpointsUsingGETForbidden ", 403)
}

func (o *GetAllEndpointsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEndpointsUsingGETNotFound creates a GetAllEndpointsUsingGETNotFound with default headers values
func NewGetAllEndpointsUsingGETNotFound() *GetAllEndpointsUsingGETNotFound {
	return &GetAllEndpointsUsingGETNotFound{}
}

/*GetAllEndpointsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllEndpointsUsingGETNotFound struct {
}

func (o *GetAllEndpointsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /endpoints][%d] getAllEndpointsUsingGETNotFound ", 404)
}

func (o *GetAllEndpointsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
