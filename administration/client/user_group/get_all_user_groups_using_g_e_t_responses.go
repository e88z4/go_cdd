// Code generated by go-swagger; DO NOT EDIT.

package user_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetAllUserGroupsUsingGETReader is a Reader for the GetAllUserGroupsUsingGET structure.
type GetAllUserGroupsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllUserGroupsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllUserGroupsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllUserGroupsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllUserGroupsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllUserGroupsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllUserGroupsUsingGETOK creates a GetAllUserGroupsUsingGETOK with default headers values
func NewGetAllUserGroupsUsingGETOK() *GetAllUserGroupsUsingGETOK {
	return &GetAllUserGroupsUsingGETOK{}
}

/*GetAllUserGroupsUsingGETOK handles this case with default header values.

OK
*/
type GetAllUserGroupsUsingGETOK struct {
	Payload *models.PagedResultDtoUserGroupDto
}

func (o *GetAllUserGroupsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /user-groups][%d] getAllUserGroupsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllUserGroupsUsingGETOK) GetPayload() *models.PagedResultDtoUserGroupDto {
	return o.Payload
}

func (o *GetAllUserGroupsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedResultDtoUserGroupDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllUserGroupsUsingGETUnauthorized creates a GetAllUserGroupsUsingGETUnauthorized with default headers values
func NewGetAllUserGroupsUsingGETUnauthorized() *GetAllUserGroupsUsingGETUnauthorized {
	return &GetAllUserGroupsUsingGETUnauthorized{}
}

/*GetAllUserGroupsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllUserGroupsUsingGETUnauthorized struct {
}

func (o *GetAllUserGroupsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /user-groups][%d] getAllUserGroupsUsingGETUnauthorized ", 401)
}

func (o *GetAllUserGroupsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUserGroupsUsingGETForbidden creates a GetAllUserGroupsUsingGETForbidden with default headers values
func NewGetAllUserGroupsUsingGETForbidden() *GetAllUserGroupsUsingGETForbidden {
	return &GetAllUserGroupsUsingGETForbidden{}
}

/*GetAllUserGroupsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllUserGroupsUsingGETForbidden struct {
}

func (o *GetAllUserGroupsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /user-groups][%d] getAllUserGroupsUsingGETForbidden ", 403)
}

func (o *GetAllUserGroupsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllUserGroupsUsingGETNotFound creates a GetAllUserGroupsUsingGETNotFound with default headers values
func NewGetAllUserGroupsUsingGETNotFound() *GetAllUserGroupsUsingGETNotFound {
	return &GetAllUserGroupsUsingGETNotFound{}
}

/*GetAllUserGroupsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllUserGroupsUsingGETNotFound struct {
}

func (o *GetAllUserGroupsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /user-groups][%d] getAllUserGroupsUsingGETNotFound ", 404)
}

func (o *GetAllUserGroupsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
