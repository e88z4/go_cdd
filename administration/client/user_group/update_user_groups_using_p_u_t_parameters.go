// Code generated by go-swagger; DO NOT EDIT.

package user_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewUpdateUserGroupsUsingPUTParams creates a new UpdateUserGroupsUsingPUTParams object
// with the default values initialized.
func NewUpdateUserGroupsUsingPUTParams() *UpdateUserGroupsUsingPUTParams {
	var ()
	return &UpdateUserGroupsUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateUserGroupsUsingPUTParamsWithTimeout creates a new UpdateUserGroupsUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateUserGroupsUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateUserGroupsUsingPUTParams {
	var ()
	return &UpdateUserGroupsUsingPUTParams{

		timeout: timeout,
	}
}

// NewUpdateUserGroupsUsingPUTParamsWithContext creates a new UpdateUserGroupsUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateUserGroupsUsingPUTParamsWithContext(ctx context.Context) *UpdateUserGroupsUsingPUTParams {
	var ()
	return &UpdateUserGroupsUsingPUTParams{

		Context: ctx,
	}
}

// NewUpdateUserGroupsUsingPUTParamsWithHTTPClient creates a new UpdateUserGroupsUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateUserGroupsUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateUserGroupsUsingPUTParams {
	var ()
	return &UpdateUserGroupsUsingPUTParams{
		HTTPClient: client,
	}
}

/*UpdateUserGroupsUsingPUTParams contains all the parameters to send to the API endpoint
for the update user groups using p u t operation typically these are written to a http.Request
*/
type UpdateUserGroupsUsingPUTParams struct {

	/*Groups
	  userGroupsIds

	*/
	Groups []int64
	/*UsersIdsDto
	  usersIdsDto

	*/
	UsersIdsDto []*models.IdentifiableDto

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateUserGroupsUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) WithContext(ctx context.Context) *UpdateUserGroupsUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateUserGroupsUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroups adds the groups to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) WithGroups(groups []int64) *UpdateUserGroupsUsingPUTParams {
	o.SetGroups(groups)
	return o
}

// SetGroups adds the groups to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) SetGroups(groups []int64) {
	o.Groups = groups
}

// WithUsersIdsDto adds the usersIdsDto to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) WithUsersIdsDto(usersIdsDto []*models.IdentifiableDto) *UpdateUserGroupsUsingPUTParams {
	o.SetUsersIdsDto(usersIdsDto)
	return o
}

// SetUsersIdsDto adds the usersIdsDto to the update user groups using p u t params
func (o *UpdateUserGroupsUsingPUTParams) SetUsersIdsDto(usersIdsDto []*models.IdentifiableDto) {
	o.UsersIdsDto = usersIdsDto
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateUserGroupsUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	var valuesGroups []string
	for _, v := range o.Groups {
		valuesGroups = append(valuesGroups, swag.FormatInt64(v))
	}

	joinedGroups := swag.JoinByFormat(valuesGroups, "multi")
	// query array param groups
	if err := r.SetQueryParam("groups", joinedGroups...); err != nil {
		return err
	}

	if o.UsersIdsDto != nil {
		if err := r.SetBodyParam(o.UsersIdsDto); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
