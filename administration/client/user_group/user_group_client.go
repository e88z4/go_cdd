// Code generated by go-swagger; DO NOT EDIT.

package user_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserGroupsUsingPOST(params *CreateUserGroupsUsingPOSTParams) (*CreateUserGroupsUsingPOSTOK, *CreateUserGroupsUsingPOSTCreated, error)

	DeleteUserGroupUsingDELETE(params *DeleteUserGroupUsingDELETEParams) (*DeleteUserGroupUsingDELETEOK, *DeleteUserGroupUsingDELETENoContent, error)

	GetAllUserGroupsUsingGET(params *GetAllUserGroupsUsingGETParams) (*GetAllUserGroupsUsingGETOK, error)

	GetUserGroupUsingGET(params *GetUserGroupUsingGETParams) (*GetUserGroupUsingGETOK, error)

	UpdateUserGroupUsingPUT(params *UpdateUserGroupUsingPUTParams) (*UpdateUserGroupUsingPUTOK, *UpdateUserGroupUsingPUTCreated, error)

	UpdateUserGroupsUsingPUT(params *UpdateUserGroupsUsingPUTParams) (*UpdateUserGroupsUsingPUTOK, *UpdateUserGroupsUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUserGroupsUsingPOST creates a user group
*/
func (a *Client) CreateUserGroupsUsingPOST(params *CreateUserGroupsUsingPOSTParams) (*CreateUserGroupsUsingPOSTOK, *CreateUserGroupsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserGroupsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserGroupsUsingPOST",
		Method:             "POST",
		PathPattern:        "/user-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserGroupsUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUserGroupsUsingPOSTOK:
		return value, nil, nil
	case *CreateUserGroupsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserGroupUsingDELETE deletes a user group
*/
func (a *Client) DeleteUserGroupUsingDELETE(params *DeleteUserGroupUsingDELETEParams) (*DeleteUserGroupUsingDELETEOK, *DeleteUserGroupUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserGroupUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserGroupUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/user-groups/{userGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserGroupUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserGroupUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserGroupUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUserGroupsUsingGET retrieves all user groups
*/
func (a *Client) GetAllUserGroupsUsingGET(params *GetAllUserGroupsUsingGETParams) (*GetAllUserGroupsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserGroupsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUserGroupsUsingGET",
		Method:             "GET",
		PathPattern:        "/user-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUserGroupsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserGroupsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUserGroupsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserGroupUsingGET retrieves a user group
*/
func (a *Client) GetUserGroupUsingGET(params *GetUserGroupUsingGETParams) (*GetUserGroupUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGroupUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserGroupUsingGET",
		Method:             "GET",
		PathPattern:        "/user-groups/{userGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGroupUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGroupUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGroupUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserGroupUsingPUT updates a user group
*/
func (a *Client) UpdateUserGroupUsingPUT(params *UpdateUserGroupUsingPUTParams) (*UpdateUserGroupUsingPUTOK, *UpdateUserGroupUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserGroupUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserGroupUsingPUT",
		Method:             "PUT",
		PathPattern:        "/user-groups/{userGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserGroupUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUserGroupUsingPUTOK:
		return value, nil, nil
	case *UpdateUserGroupUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserGroupsUsingPUT updates user groups
*/
func (a *Client) UpdateUserGroupsUsingPUT(params *UpdateUserGroupsUsingPUTParams) (*UpdateUserGroupsUsingPUTOK, *UpdateUserGroupsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserGroupsUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserGroupsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/user-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserGroupsUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUserGroupsUsingPUTOK:
		return value, nil, nil
	case *UpdateUserGroupsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
