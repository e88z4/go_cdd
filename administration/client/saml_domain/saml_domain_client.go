// Code generated by go-swagger; DO NOT EDIT.

package saml_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new saml domain API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saml domain API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSamlDomainUsingPOST(params *CreateSamlDomainUsingPOSTParams) (*CreateSamlDomainUsingPOSTOK, *CreateSamlDomainUsingPOSTCreated, error)

	DeleteSamlDomainUsingDELETE(params *DeleteSamlDomainUsingDELETEParams) (*DeleteSamlDomainUsingDELETEOK, *DeleteSamlDomainUsingDELETENoContent, error)

	GetSamlDomainUsingGET(params *GetSamlDomainUsingGETParams) (*GetSamlDomainUsingGETOK, error)

	GetSamlDomainsUsingGET(params *GetSamlDomainsUsingGETParams) (*GetSamlDomainsUsingGETOK, error)

	PatchAllSamlDomainsUsingPATCH(params *PatchAllSamlDomainsUsingPATCHParams) (*PatchAllSamlDomainsUsingPATCHOK, *PatchAllSamlDomainsUsingPATCHNoContent, error)

	PatchSamlDomainUsingPATCH(params *PatchSamlDomainUsingPATCHParams) (*PatchSamlDomainUsingPATCHOK, *PatchSamlDomainUsingPATCHNoContent, error)

	UpdateSamlDomainUsingPUT(params *UpdateSamlDomainUsingPUTParams) (*UpdateSamlDomainUsingPUTOK, *UpdateSamlDomainUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSamlDomainUsingPOST creates a s a m l domain record
*/
func (a *Client) CreateSamlDomainUsingPOST(params *CreateSamlDomainUsingPOSTParams) (*CreateSamlDomainUsingPOSTOK, *CreateSamlDomainUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSamlDomainUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSamlDomainUsingPOST",
		Method:             "POST",
		PathPattern:        "/saml-domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSamlDomainUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSamlDomainUsingPOSTOK:
		return value, nil, nil
	case *CreateSamlDomainUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saml_domain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSamlDomainUsingDELETE deletes a specific s a m l domain record
*/
func (a *Client) DeleteSamlDomainUsingDELETE(params *DeleteSamlDomainUsingDELETEParams) (*DeleteSamlDomainUsingDELETEOK, *DeleteSamlDomainUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSamlDomainUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSamlDomainUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/saml-domains/{samlDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSamlDomainUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSamlDomainUsingDELETEOK:
		return value, nil, nil
	case *DeleteSamlDomainUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saml_domain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSamlDomainUsingGET gets all s a m l domain records
*/
func (a *Client) GetSamlDomainUsingGET(params *GetSamlDomainUsingGETParams) (*GetSamlDomainUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSamlDomainUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSamlDomainUsingGET",
		Method:             "GET",
		PathPattern:        "/saml-domains/{samlDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSamlDomainUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSamlDomainUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSamlDomainUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSamlDomainsUsingGET gets all s a m l domain records
*/
func (a *Client) GetSamlDomainsUsingGET(params *GetSamlDomainsUsingGETParams) (*GetSamlDomainsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSamlDomainsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSamlDomainsUsingGET",
		Method:             "GET",
		PathPattern:        "/saml-domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSamlDomainsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSamlDomainsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSamlDomainsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAllSamlDomainsUsingPATCH patches all the s a m l domain records within a specific tenant
*/
func (a *Client) PatchAllSamlDomainsUsingPATCH(params *PatchAllSamlDomainsUsingPATCHParams) (*PatchAllSamlDomainsUsingPATCHOK, *PatchAllSamlDomainsUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAllSamlDomainsUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAllSamlDomainsUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/saml-domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAllSamlDomainsUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchAllSamlDomainsUsingPATCHOK:
		return value, nil, nil
	case *PatchAllSamlDomainsUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saml_domain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSamlDomainUsingPATCH patches a specific s a m l domain record
*/
func (a *Client) PatchSamlDomainUsingPATCH(params *PatchSamlDomainUsingPATCHParams) (*PatchSamlDomainUsingPATCHOK, *PatchSamlDomainUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSamlDomainUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSamlDomainUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/saml-domains/{samlDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSamlDomainUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchSamlDomainUsingPATCHOK:
		return value, nil, nil
	case *PatchSamlDomainUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saml_domain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSamlDomainUsingPUT updates the domain of a specific s a m l domain record
*/
func (a *Client) UpdateSamlDomainUsingPUT(params *UpdateSamlDomainUsingPUTParams) (*UpdateSamlDomainUsingPUTOK, *UpdateSamlDomainUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSamlDomainUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSamlDomainUsingPUT",
		Method:             "PUT",
		PathPattern:        "/saml-domains/{samlDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSamlDomainUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSamlDomainUsingPUTOK:
		return value, nil, nil
	case *UpdateSamlDomainUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saml_domain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
