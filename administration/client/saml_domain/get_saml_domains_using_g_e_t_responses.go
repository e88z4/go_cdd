// Code generated by go-swagger; DO NOT EDIT.

package saml_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetSamlDomainsUsingGETReader is a Reader for the GetSamlDomainsUsingGET structure.
type GetSamlDomainsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSamlDomainsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSamlDomainsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSamlDomainsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSamlDomainsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSamlDomainsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSamlDomainsUsingGETOK creates a GetSamlDomainsUsingGETOK with default headers values
func NewGetSamlDomainsUsingGETOK() *GetSamlDomainsUsingGETOK {
	return &GetSamlDomainsUsingGETOK{}
}

/*GetSamlDomainsUsingGETOK handles this case with default header values.

OK
*/
type GetSamlDomainsUsingGETOK struct {
	Payload *models.ListHolderDtoSamlDomainDto
}

func (o *GetSamlDomainsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /saml-domains][%d] getSamlDomainsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSamlDomainsUsingGETOK) GetPayload() *models.ListHolderDtoSamlDomainDto {
	return o.Payload
}

func (o *GetSamlDomainsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoSamlDomainDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSamlDomainsUsingGETUnauthorized creates a GetSamlDomainsUsingGETUnauthorized with default headers values
func NewGetSamlDomainsUsingGETUnauthorized() *GetSamlDomainsUsingGETUnauthorized {
	return &GetSamlDomainsUsingGETUnauthorized{}
}

/*GetSamlDomainsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSamlDomainsUsingGETUnauthorized struct {
}

func (o *GetSamlDomainsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /saml-domains][%d] getSamlDomainsUsingGETUnauthorized ", 401)
}

func (o *GetSamlDomainsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSamlDomainsUsingGETForbidden creates a GetSamlDomainsUsingGETForbidden with default headers values
func NewGetSamlDomainsUsingGETForbidden() *GetSamlDomainsUsingGETForbidden {
	return &GetSamlDomainsUsingGETForbidden{}
}

/*GetSamlDomainsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetSamlDomainsUsingGETForbidden struct {
}

func (o *GetSamlDomainsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /saml-domains][%d] getSamlDomainsUsingGETForbidden ", 403)
}

func (o *GetSamlDomainsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSamlDomainsUsingGETNotFound creates a GetSamlDomainsUsingGETNotFound with default headers values
func NewGetSamlDomainsUsingGETNotFound() *GetSamlDomainsUsingGETNotFound {
	return &GetSamlDomainsUsingGETNotFound{}
}

/*GetSamlDomainsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetSamlDomainsUsingGETNotFound struct {
}

func (o *GetSamlDomainsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /saml-domains][%d] getSamlDomainsUsingGETNotFound ", 404)
}

func (o *GetSamlDomainsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
