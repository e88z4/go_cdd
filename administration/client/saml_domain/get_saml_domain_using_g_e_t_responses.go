// Code generated by go-swagger; DO NOT EDIT.

package saml_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetSamlDomainUsingGETReader is a Reader for the GetSamlDomainUsingGET structure.
type GetSamlDomainUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSamlDomainUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSamlDomainUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSamlDomainUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSamlDomainUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSamlDomainUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSamlDomainUsingGETOK creates a GetSamlDomainUsingGETOK with default headers values
func NewGetSamlDomainUsingGETOK() *GetSamlDomainUsingGETOK {
	return &GetSamlDomainUsingGETOK{}
}

/*GetSamlDomainUsingGETOK handles this case with default header values.

OK
*/
type GetSamlDomainUsingGETOK struct {
	Payload *models.SamlDomainDto
}

func (o *GetSamlDomainUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /saml-domains/{samlDomainId}][%d] getSamlDomainUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSamlDomainUsingGETOK) GetPayload() *models.SamlDomainDto {
	return o.Payload
}

func (o *GetSamlDomainUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SamlDomainDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSamlDomainUsingGETUnauthorized creates a GetSamlDomainUsingGETUnauthorized with default headers values
func NewGetSamlDomainUsingGETUnauthorized() *GetSamlDomainUsingGETUnauthorized {
	return &GetSamlDomainUsingGETUnauthorized{}
}

/*GetSamlDomainUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSamlDomainUsingGETUnauthorized struct {
}

func (o *GetSamlDomainUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /saml-domains/{samlDomainId}][%d] getSamlDomainUsingGETUnauthorized ", 401)
}

func (o *GetSamlDomainUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSamlDomainUsingGETForbidden creates a GetSamlDomainUsingGETForbidden with default headers values
func NewGetSamlDomainUsingGETForbidden() *GetSamlDomainUsingGETForbidden {
	return &GetSamlDomainUsingGETForbidden{}
}

/*GetSamlDomainUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetSamlDomainUsingGETForbidden struct {
}

func (o *GetSamlDomainUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /saml-domains/{samlDomainId}][%d] getSamlDomainUsingGETForbidden ", 403)
}

func (o *GetSamlDomainUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSamlDomainUsingGETNotFound creates a GetSamlDomainUsingGETNotFound with default headers values
func NewGetSamlDomainUsingGETNotFound() *GetSamlDomainUsingGETNotFound {
	return &GetSamlDomainUsingGETNotFound{}
}

/*GetSamlDomainUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetSamlDomainUsingGETNotFound struct {
}

func (o *GetSamlDomainUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /saml-domains/{samlDomainId}][%d] getSamlDomainUsingGETNotFound ", 404)
}

func (o *GetSamlDomainUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
