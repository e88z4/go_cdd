// Code generated by go-swagger; DO NOT EDIT.

package saml_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// PatchSamlDomainUsingPATCHReader is a Reader for the PatchSamlDomainUsingPATCH structure.
type PatchSamlDomainUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSamlDomainUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSamlDomainUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchSamlDomainUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchSamlDomainUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchSamlDomainUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSamlDomainUsingPATCHOK creates a PatchSamlDomainUsingPATCHOK with default headers values
func NewPatchSamlDomainUsingPATCHOK() *PatchSamlDomainUsingPATCHOK {
	return &PatchSamlDomainUsingPATCHOK{}
}

/*PatchSamlDomainUsingPATCHOK handles this case with default header values.

OK
*/
type PatchSamlDomainUsingPATCHOK struct {
	Payload *models.SamlDomainDto
}

func (o *PatchSamlDomainUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /saml-domains/{samlDomainId}][%d] patchSamlDomainUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchSamlDomainUsingPATCHOK) GetPayload() *models.SamlDomainDto {
	return o.Payload
}

func (o *PatchSamlDomainUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SamlDomainDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSamlDomainUsingPATCHNoContent creates a PatchSamlDomainUsingPATCHNoContent with default headers values
func NewPatchSamlDomainUsingPATCHNoContent() *PatchSamlDomainUsingPATCHNoContent {
	return &PatchSamlDomainUsingPATCHNoContent{}
}

/*PatchSamlDomainUsingPATCHNoContent handles this case with default header values.

No Content
*/
type PatchSamlDomainUsingPATCHNoContent struct {
}

func (o *PatchSamlDomainUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /saml-domains/{samlDomainId}][%d] patchSamlDomainUsingPATCHNoContent ", 204)
}

func (o *PatchSamlDomainUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSamlDomainUsingPATCHUnauthorized creates a PatchSamlDomainUsingPATCHUnauthorized with default headers values
func NewPatchSamlDomainUsingPATCHUnauthorized() *PatchSamlDomainUsingPATCHUnauthorized {
	return &PatchSamlDomainUsingPATCHUnauthorized{}
}

/*PatchSamlDomainUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchSamlDomainUsingPATCHUnauthorized struct {
}

func (o *PatchSamlDomainUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /saml-domains/{samlDomainId}][%d] patchSamlDomainUsingPATCHUnauthorized ", 401)
}

func (o *PatchSamlDomainUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSamlDomainUsingPATCHForbidden creates a PatchSamlDomainUsingPATCHForbidden with default headers values
func NewPatchSamlDomainUsingPATCHForbidden() *PatchSamlDomainUsingPATCHForbidden {
	return &PatchSamlDomainUsingPATCHForbidden{}
}

/*PatchSamlDomainUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type PatchSamlDomainUsingPATCHForbidden struct {
}

func (o *PatchSamlDomainUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /saml-domains/{samlDomainId}][%d] patchSamlDomainUsingPATCHForbidden ", 403)
}

func (o *PatchSamlDomainUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
