// Code generated by go-swagger; DO NOT EDIT.

package saml_domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSamlDomainUsingGETParams creates a new GetSamlDomainUsingGETParams object
// with the default values initialized.
func NewGetSamlDomainUsingGETParams() *GetSamlDomainUsingGETParams {
	var ()
	return &GetSamlDomainUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSamlDomainUsingGETParamsWithTimeout creates a new GetSamlDomainUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSamlDomainUsingGETParamsWithTimeout(timeout time.Duration) *GetSamlDomainUsingGETParams {
	var ()
	return &GetSamlDomainUsingGETParams{

		timeout: timeout,
	}
}

// NewGetSamlDomainUsingGETParamsWithContext creates a new GetSamlDomainUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSamlDomainUsingGETParamsWithContext(ctx context.Context) *GetSamlDomainUsingGETParams {
	var ()
	return &GetSamlDomainUsingGETParams{

		Context: ctx,
	}
}

// NewGetSamlDomainUsingGETParamsWithHTTPClient creates a new GetSamlDomainUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSamlDomainUsingGETParamsWithHTTPClient(client *http.Client) *GetSamlDomainUsingGETParams {
	var ()
	return &GetSamlDomainUsingGETParams{
		HTTPClient: client,
	}
}

/*GetSamlDomainUsingGETParams contains all the parameters to send to the API endpoint
for the get saml domain using g e t operation typically these are written to a http.Request
*/
type GetSamlDomainUsingGETParams struct {

	/*SamlDomainID
	  samlDomainId

	*/
	SamlDomainID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) WithTimeout(timeout time.Duration) *GetSamlDomainUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) WithContext(ctx context.Context) *GetSamlDomainUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) WithHTTPClient(client *http.Client) *GetSamlDomainUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSamlDomainID adds the samlDomainID to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) WithSamlDomainID(samlDomainID int64) *GetSamlDomainUsingGETParams {
	o.SetSamlDomainID(samlDomainID)
	return o
}

// SetSamlDomainID adds the samlDomainId to the get saml domain using g e t params
func (o *GetSamlDomainUsingGETParams) SetSamlDomainID(samlDomainID int64) {
	o.SamlDomainID = samlDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSamlDomainUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param samlDomainId
	if err := r.SetPathParam("samlDomainId", swag.FormatInt64(o.SamlDomainID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
