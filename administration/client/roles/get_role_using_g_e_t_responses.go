// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetRoleUsingGETReader is a Reader for the GetRoleUsingGET structure.
type GetRoleUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoleUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoleUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRoleUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoleUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoleUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRoleUsingGETOK creates a GetRoleUsingGETOK with default headers values
func NewGetRoleUsingGETOK() *GetRoleUsingGETOK {
	return &GetRoleUsingGETOK{}
}

/*GetRoleUsingGETOK handles this case with default header values.

OK
*/
type GetRoleUsingGETOK struct {
	Payload *models.RoleDto
}

func (o *GetRoleUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /roles/{roleId}][%d] getRoleUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetRoleUsingGETOK) GetPayload() *models.RoleDto {
	return o.Payload
}

func (o *GetRoleUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUsingGETUnauthorized creates a GetRoleUsingGETUnauthorized with default headers values
func NewGetRoleUsingGETUnauthorized() *GetRoleUsingGETUnauthorized {
	return &GetRoleUsingGETUnauthorized{}
}

/*GetRoleUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRoleUsingGETUnauthorized struct {
}

func (o *GetRoleUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /roles/{roleId}][%d] getRoleUsingGETUnauthorized ", 401)
}

func (o *GetRoleUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRoleUsingGETForbidden creates a GetRoleUsingGETForbidden with default headers values
func NewGetRoleUsingGETForbidden() *GetRoleUsingGETForbidden {
	return &GetRoleUsingGETForbidden{}
}

/*GetRoleUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetRoleUsingGETForbidden struct {
}

func (o *GetRoleUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /roles/{roleId}][%d] getRoleUsingGETForbidden ", 403)
}

func (o *GetRoleUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRoleUsingGETNotFound creates a GetRoleUsingGETNotFound with default headers values
func NewGetRoleUsingGETNotFound() *GetRoleUsingGETNotFound {
	return &GetRoleUsingGETNotFound{}
}

/*GetRoleUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetRoleUsingGETNotFound struct {
}

func (o *GetRoleUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /roles/{roleId}][%d] getRoleUsingGETNotFound ", 404)
}

func (o *GetRoleUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
