// Code generated by go-swagger; DO NOT EDIT.

package dsl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewExportApplicationsUsingGETParams creates a new ExportApplicationsUsingGETParams object
// with the default values initialized.
func NewExportApplicationsUsingGETParams() *ExportApplicationsUsingGETParams {
	var ()
	return &ExportApplicationsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewExportApplicationsUsingGETParamsWithTimeout creates a new ExportApplicationsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExportApplicationsUsingGETParamsWithTimeout(timeout time.Duration) *ExportApplicationsUsingGETParams {
	var ()
	return &ExportApplicationsUsingGETParams{

		timeout: timeout,
	}
}

// NewExportApplicationsUsingGETParamsWithContext creates a new ExportApplicationsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewExportApplicationsUsingGETParamsWithContext(ctx context.Context) *ExportApplicationsUsingGETParams {
	var ()
	return &ExportApplicationsUsingGETParams{

		Context: ctx,
	}
}

// NewExportApplicationsUsingGETParamsWithHTTPClient creates a new ExportApplicationsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExportApplicationsUsingGETParamsWithHTTPClient(client *http.Client) *ExportApplicationsUsingGETParams {
	var ()
	return &ExportApplicationsUsingGETParams{
		HTTPClient: client,
	}
}

/*ExportApplicationsUsingGETParams contains all the parameters to send to the API endpoint
for the export applications using g e t operation typically these are written to a http.Request
*/
type ExportApplicationsUsingGETParams struct {

	/*Application
	  applicationIds

	*/
	Application []int64
	/*DispositionType
	  dispositionTypeDto

	*/
	DispositionType *string
	/*Embed
	  embedFields

	*/
	Embed []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) WithTimeout(timeout time.Duration) *ExportApplicationsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) WithContext(ctx context.Context) *ExportApplicationsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) WithHTTPClient(client *http.Client) *ExportApplicationsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) WithApplication(application []int64) *ExportApplicationsUsingGETParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) SetApplication(application []int64) {
	o.Application = application
}

// WithDispositionType adds the dispositionType to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) WithDispositionType(dispositionType *string) *ExportApplicationsUsingGETParams {
	o.SetDispositionType(dispositionType)
	return o
}

// SetDispositionType adds the dispositionType to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) SetDispositionType(dispositionType *string) {
	o.DispositionType = dispositionType
}

// WithEmbed adds the embed to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) WithEmbed(embed []string) *ExportApplicationsUsingGETParams {
	o.SetEmbed(embed)
	return o
}

// SetEmbed adds the embed to the export applications using g e t params
func (o *ExportApplicationsUsingGETParams) SetEmbed(embed []string) {
	o.Embed = embed
}

// WriteToRequest writes these params to a swagger request
func (o *ExportApplicationsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	var valuesApplication []string
	for _, v := range o.Application {
		valuesApplication = append(valuesApplication, swag.FormatInt64(v))
	}

	joinedApplication := swag.JoinByFormat(valuesApplication, "multi")
	// query array param application
	if err := r.SetQueryParam("application", joinedApplication...); err != nil {
		return err
	}

	if o.DispositionType != nil {

		// query param disposition_type
		var qrDispositionType string
		if o.DispositionType != nil {
			qrDispositionType = *o.DispositionType
		}
		qDispositionType := qrDispositionType
		if qDispositionType != "" {
			if err := r.SetQueryParam("disposition_type", qDispositionType); err != nil {
				return err
			}
		}

	}

	valuesEmbed := o.Embed

	joinedEmbed := swag.JoinByFormat(valuesEmbed, "multi")
	// query array param embed
	if err := r.SetQueryParam("embed", joinedEmbed...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
