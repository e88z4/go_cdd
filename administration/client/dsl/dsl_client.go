// Code generated by go-swagger; DO NOT EDIT.

package dsl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dsl API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dsl API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ExportApplicationsUsingGET(params *ExportApplicationsUsingGETParams) (*ExportApplicationsUsingGETOK, error)

	ExportEndpointsUsingGET(params *ExportEndpointsUsingGETParams) (*ExportEndpointsUsingGETOK, error)

	ExportEnvironmentsUsingGET(params *ExportEnvironmentsUsingGETParams) (*ExportEnvironmentsUsingGETOK, error)

	ExportReleaseUsingGET(params *ExportReleaseUsingGETParams) (*ExportReleaseUsingGETOK, error)

	ExportTestSourceUsingGET(params *ExportTestSourceUsingGETParams) (*ExportTestSourceUsingGETOK, error)

	ExportTestSourcesUsingGET(params *ExportTestSourcesUsingGETParams) (*ExportTestSourcesUsingGETOK, error)

	ImportEntitiesUsingPOST(params *ImportEntitiesUsingPOSTParams) (*ImportEntitiesUsingPOSTOK, *ImportEntitiesUsingPOSTCreated, error)

	ImportEntitiesUsingPOST1(params *ImportEntitiesUsingPOST1Params) (*ImportEntitiesUsingPOST1OK, *ImportEntitiesUsingPOST1Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ExportApplicationsUsingGET exports applications and environments
*/
func (a *Client) ExportApplicationsUsingGET(params *ExportApplicationsUsingGETParams) (*ExportApplicationsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportApplicationsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportApplicationsUsingGET",
		Method:             "GET",
		PathPattern:        "/applications/dsl-manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportApplicationsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportApplicationsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportApplicationsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportEndpointsUsingGET exports endpoints
*/
func (a *Client) ExportEndpointsUsingGET(params *ExportEndpointsUsingGETParams) (*ExportEndpointsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportEndpointsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportEndpointsUsingGET",
		Method:             "GET",
		PathPattern:        "/endpoints/dsl-manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportEndpointsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportEndpointsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportEndpointsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportEnvironmentsUsingGET exports environments
*/
func (a *Client) ExportEnvironmentsUsingGET(params *ExportEnvironmentsUsingGETParams) (*ExportEnvironmentsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportEnvironmentsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportEnvironmentsUsingGET",
		Method:             "GET",
		PathPattern:        "/environments/dsl-manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportEnvironmentsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportEnvironmentsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportEnvironmentsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportReleaseUsingGET exports release
*/
func (a *Client) ExportReleaseUsingGET(params *ExportReleaseUsingGETParams) (*ExportReleaseUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportReleaseUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportReleaseUsingGET",
		Method:             "GET",
		PathPattern:        "/releases/{releaseId}/dsl-manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportReleaseUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportReleaseUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportReleaseUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportTestSourceUsingGET exports test source
*/
func (a *Client) ExportTestSourceUsingGET(params *ExportTestSourceUsingGETParams) (*ExportTestSourceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportTestSourceUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportTestSourceUsingGET",
		Method:             "GET",
		PathPattern:        "/applications/{applicationId}/application-versions/{applicationVersionId}/test-sources/{testSourceId}/dsl-manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportTestSourceUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportTestSourceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportTestSourceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportTestSourcesUsingGET exports test sources
*/
func (a *Client) ExportTestSourcesUsingGET(params *ExportTestSourcesUsingGETParams) (*ExportTestSourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportTestSourcesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportTestSourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/applications/{applicationId}/application-versions/{applicationVersionId}/test-sources/dsl-manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportTestSourcesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportTestSourcesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportTestSourcesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportEntitiesUsingPOST imports from file
*/
func (a *Client) ImportEntitiesUsingPOST(params *ImportEntitiesUsingPOSTParams) (*ImportEntitiesUsingPOSTOK, *ImportEntitiesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportEntitiesUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importEntitiesUsingPOST",
		Method:             "POST",
		PathPattern:        "/dsl-manifest/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportEntitiesUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ImportEntitiesUsingPOSTOK:
		return value, nil, nil
	case *ImportEntitiesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dsl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportEntitiesUsingPOST1 imports
*/
func (a *Client) ImportEntitiesUsingPOST1(params *ImportEntitiesUsingPOST1Params) (*ImportEntitiesUsingPOST1OK, *ImportEntitiesUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportEntitiesUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importEntitiesUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/dsl-manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportEntitiesUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ImportEntitiesUsingPOST1OK:
		return value, nil, nil
	case *ImportEntitiesUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dsl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
