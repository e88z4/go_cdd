// Code generated by go-swagger; DO NOT EDIT.

package dsl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// ExportEndpointsUsingGETReader is a Reader for the ExportEndpointsUsingGET structure.
type ExportEndpointsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportEndpointsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportEndpointsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportEndpointsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExportEndpointsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportEndpointsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExportEndpointsUsingGETOK creates a ExportEndpointsUsingGETOK with default headers values
func NewExportEndpointsUsingGETOK() *ExportEndpointsUsingGETOK {
	return &ExportEndpointsUsingGETOK{}
}

/*ExportEndpointsUsingGETOK handles this case with default header values.

OK
*/
type ExportEndpointsUsingGETOK struct {
	Payload *models.DslTemplateDto
}

func (o *ExportEndpointsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /endpoints/dsl-manifest][%d] exportEndpointsUsingGETOK  %+v", 200, o.Payload)
}

func (o *ExportEndpointsUsingGETOK) GetPayload() *models.DslTemplateDto {
	return o.Payload
}

func (o *ExportEndpointsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DslTemplateDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportEndpointsUsingGETUnauthorized creates a ExportEndpointsUsingGETUnauthorized with default headers values
func NewExportEndpointsUsingGETUnauthorized() *ExportEndpointsUsingGETUnauthorized {
	return &ExportEndpointsUsingGETUnauthorized{}
}

/*ExportEndpointsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type ExportEndpointsUsingGETUnauthorized struct {
}

func (o *ExportEndpointsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /endpoints/dsl-manifest][%d] exportEndpointsUsingGETUnauthorized ", 401)
}

func (o *ExportEndpointsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportEndpointsUsingGETForbidden creates a ExportEndpointsUsingGETForbidden with default headers values
func NewExportEndpointsUsingGETForbidden() *ExportEndpointsUsingGETForbidden {
	return &ExportEndpointsUsingGETForbidden{}
}

/*ExportEndpointsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type ExportEndpointsUsingGETForbidden struct {
}

func (o *ExportEndpointsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /endpoints/dsl-manifest][%d] exportEndpointsUsingGETForbidden ", 403)
}

func (o *ExportEndpointsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportEndpointsUsingGETNotFound creates a ExportEndpointsUsingGETNotFound with default headers values
func NewExportEndpointsUsingGETNotFound() *ExportEndpointsUsingGETNotFound {
	return &ExportEndpointsUsingGETNotFound{}
}

/*ExportEndpointsUsingGETNotFound handles this case with default header values.

Not Found
*/
type ExportEndpointsUsingGETNotFound struct {
}

func (o *ExportEndpointsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /endpoints/dsl-manifest][%d] exportEndpointsUsingGETNotFound ", 404)
}

func (o *ExportEndpointsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
