// Code generated by go-swagger; DO NOT EDIT.

package dsl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// ExportReleaseUsingGETReader is a Reader for the ExportReleaseUsingGET structure.
type ExportReleaseUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportReleaseUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportReleaseUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportReleaseUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExportReleaseUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportReleaseUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExportReleaseUsingGETOK creates a ExportReleaseUsingGETOK with default headers values
func NewExportReleaseUsingGETOK() *ExportReleaseUsingGETOK {
	return &ExportReleaseUsingGETOK{}
}

/*ExportReleaseUsingGETOK handles this case with default header values.

OK
*/
type ExportReleaseUsingGETOK struct {
	Payload *models.DslTemplateDto
}

func (o *ExportReleaseUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /releases/{releaseId}/dsl-manifest][%d] exportReleaseUsingGETOK  %+v", 200, o.Payload)
}

func (o *ExportReleaseUsingGETOK) GetPayload() *models.DslTemplateDto {
	return o.Payload
}

func (o *ExportReleaseUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DslTemplateDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportReleaseUsingGETUnauthorized creates a ExportReleaseUsingGETUnauthorized with default headers values
func NewExportReleaseUsingGETUnauthorized() *ExportReleaseUsingGETUnauthorized {
	return &ExportReleaseUsingGETUnauthorized{}
}

/*ExportReleaseUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type ExportReleaseUsingGETUnauthorized struct {
}

func (o *ExportReleaseUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /releases/{releaseId}/dsl-manifest][%d] exportReleaseUsingGETUnauthorized ", 401)
}

func (o *ExportReleaseUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportReleaseUsingGETForbidden creates a ExportReleaseUsingGETForbidden with default headers values
func NewExportReleaseUsingGETForbidden() *ExportReleaseUsingGETForbidden {
	return &ExportReleaseUsingGETForbidden{}
}

/*ExportReleaseUsingGETForbidden handles this case with default header values.

Forbidden
*/
type ExportReleaseUsingGETForbidden struct {
}

func (o *ExportReleaseUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /releases/{releaseId}/dsl-manifest][%d] exportReleaseUsingGETForbidden ", 403)
}

func (o *ExportReleaseUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportReleaseUsingGETNotFound creates a ExportReleaseUsingGETNotFound with default headers values
func NewExportReleaseUsingGETNotFound() *ExportReleaseUsingGETNotFound {
	return &ExportReleaseUsingGETNotFound{}
}

/*ExportReleaseUsingGETNotFound handles this case with default header values.

Not Found
*/
type ExportReleaseUsingGETNotFound struct {
}

func (o *ExportReleaseUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /releases/{releaseId}/dsl-manifest][%d] exportReleaseUsingGETNotFound ", 404)
}

func (o *ExportReleaseUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
