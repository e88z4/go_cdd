// Code generated by go-swagger; DO NOT EDIT.

package dsl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewExportReleaseUsingGETParams creates a new ExportReleaseUsingGETParams object
// with the default values initialized.
func NewExportReleaseUsingGETParams() *ExportReleaseUsingGETParams {
	var ()
	return &ExportReleaseUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewExportReleaseUsingGETParamsWithTimeout creates a new ExportReleaseUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExportReleaseUsingGETParamsWithTimeout(timeout time.Duration) *ExportReleaseUsingGETParams {
	var ()
	return &ExportReleaseUsingGETParams{

		timeout: timeout,
	}
}

// NewExportReleaseUsingGETParamsWithContext creates a new ExportReleaseUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewExportReleaseUsingGETParamsWithContext(ctx context.Context) *ExportReleaseUsingGETParams {
	var ()
	return &ExportReleaseUsingGETParams{

		Context: ctx,
	}
}

// NewExportReleaseUsingGETParamsWithHTTPClient creates a new ExportReleaseUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExportReleaseUsingGETParamsWithHTTPClient(client *http.Client) *ExportReleaseUsingGETParams {
	var ()
	return &ExportReleaseUsingGETParams{
		HTTPClient: client,
	}
}

/*ExportReleaseUsingGETParams contains all the parameters to send to the API endpoint
for the export release using g e t operation typically these are written to a http.Request
*/
type ExportReleaseUsingGETParams struct {

	/*DispositionType
	  dispositionTypeDto

	*/
	DispositionType *string
	/*ReleaseID
	  releaseId

	*/
	ReleaseID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the export release using g e t params
func (o *ExportReleaseUsingGETParams) WithTimeout(timeout time.Duration) *ExportReleaseUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export release using g e t params
func (o *ExportReleaseUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export release using g e t params
func (o *ExportReleaseUsingGETParams) WithContext(ctx context.Context) *ExportReleaseUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export release using g e t params
func (o *ExportReleaseUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export release using g e t params
func (o *ExportReleaseUsingGETParams) WithHTTPClient(client *http.Client) *ExportReleaseUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export release using g e t params
func (o *ExportReleaseUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDispositionType adds the dispositionType to the export release using g e t params
func (o *ExportReleaseUsingGETParams) WithDispositionType(dispositionType *string) *ExportReleaseUsingGETParams {
	o.SetDispositionType(dispositionType)
	return o
}

// SetDispositionType adds the dispositionType to the export release using g e t params
func (o *ExportReleaseUsingGETParams) SetDispositionType(dispositionType *string) {
	o.DispositionType = dispositionType
}

// WithReleaseID adds the releaseID to the export release using g e t params
func (o *ExportReleaseUsingGETParams) WithReleaseID(releaseID int64) *ExportReleaseUsingGETParams {
	o.SetReleaseID(releaseID)
	return o
}

// SetReleaseID adds the releaseId to the export release using g e t params
func (o *ExportReleaseUsingGETParams) SetReleaseID(releaseID int64) {
	o.ReleaseID = releaseID
}

// WriteToRequest writes these params to a swagger request
func (o *ExportReleaseUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DispositionType != nil {

		// query param disposition_type
		var qrDispositionType string
		if o.DispositionType != nil {
			qrDispositionType = *o.DispositionType
		}
		qDispositionType := qrDispositionType
		if qDispositionType != "" {
			if err := r.SetQueryParam("disposition_type", qDispositionType); err != nil {
				return err
			}
		}

	}

	// path param releaseId
	if err := r.SetPathParam("releaseId", swag.FormatInt64(o.ReleaseID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
