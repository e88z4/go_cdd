// Code generated by go-swagger; DO NOT EDIT.

package version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetVersionUsingGETReader is a Reader for the GetVersionUsingGET structure.
type GetVersionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVersionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVersionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVersionUsingGETOK creates a GetVersionUsingGETOK with default headers values
func NewGetVersionUsingGETOK() *GetVersionUsingGETOK {
	return &GetVersionUsingGETOK{}
}

/*GetVersionUsingGETOK handles this case with default header values.

OK
*/
type GetVersionUsingGETOK struct {
	Payload *models.VersionDto
}

func (o *GetVersionUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetVersionUsingGETOK) GetPayload() *models.VersionDto {
	return o.Payload
}

func (o *GetVersionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VersionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionUsingGETUnauthorized creates a GetVersionUsingGETUnauthorized with default headers values
func NewGetVersionUsingGETUnauthorized() *GetVersionUsingGETUnauthorized {
	return &GetVersionUsingGETUnauthorized{}
}

/*GetVersionUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetVersionUsingGETUnauthorized struct {
}

func (o *GetVersionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionUsingGETUnauthorized ", 401)
}

func (o *GetVersionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionUsingGETForbidden creates a GetVersionUsingGETForbidden with default headers values
func NewGetVersionUsingGETForbidden() *GetVersionUsingGETForbidden {
	return &GetVersionUsingGETForbidden{}
}

/*GetVersionUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetVersionUsingGETForbidden struct {
}

func (o *GetVersionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionUsingGETForbidden ", 403)
}

func (o *GetVersionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionUsingGETNotFound creates a GetVersionUsingGETNotFound with default headers values
func NewGetVersionUsingGETNotFound() *GetVersionUsingGETNotFound {
	return &GetVersionUsingGETNotFound{}
}

/*GetVersionUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetVersionUsingGETNotFound struct {
}

func (o *GetVersionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionUsingGETNotFound ", 404)
}

func (o *GetVersionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
