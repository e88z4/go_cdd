// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new application API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateApplicationUsingPOST(params *CreateApplicationUsingPOSTParams) (*CreateApplicationUsingPOSTOK, *CreateApplicationUsingPOSTCreated, error)

	DeleteApplicationUsingDELETE(params *DeleteApplicationUsingDELETEParams) (*DeleteApplicationUsingDELETEOK, *DeleteApplicationUsingDELETENoContent, error)

	GetAllApplicationsUsingGET(params *GetAllApplicationsUsingGETParams) (*GetAllApplicationsUsingGETOK, error)

	GetApplicationReportUsingGET(params *GetApplicationReportUsingGETParams) (*GetApplicationReportUsingGETOK, error)

	GetApplicationUsingGET(params *GetApplicationUsingGETParams) (*GetApplicationUsingGETOK, error)

	PatchApplicationUsingPATCH(params *PatchApplicationUsingPATCHParams) (*PatchApplicationUsingPATCHOK, *PatchApplicationUsingPATCHNoContent, error)

	UpdateApplicationUsingPUT(params *UpdateApplicationUsingPUTParams) (*UpdateApplicationUsingPUTOK, *UpdateApplicationUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateApplicationUsingPOST creates an application
*/
func (a *Client) CreateApplicationUsingPOST(params *CreateApplicationUsingPOSTParams) (*CreateApplicationUsingPOSTOK, *CreateApplicationUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApplicationUsingPOST",
		Method:             "POST",
		PathPattern:        "/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateApplicationUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateApplicationUsingPOSTOK:
		return value, nil, nil
	case *CreateApplicationUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteApplicationUsingDELETE deletes an application
*/
func (a *Client) DeleteApplicationUsingDELETE(params *DeleteApplicationUsingDELETEParams) (*DeleteApplicationUsingDELETEOK, *DeleteApplicationUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApplicationUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/applications/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteApplicationUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteApplicationUsingDELETEOK:
		return value, nil, nil
	case *DeleteApplicationUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllApplicationsUsingGET retrieves all applications
*/
func (a *Client) GetAllApplicationsUsingGET(params *GetAllApplicationsUsingGETParams) (*GetAllApplicationsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllApplicationsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllApplicationsUsingGET",
		Method:             "GET",
		PathPattern:        "/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllApplicationsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllApplicationsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllApplicationsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationReportUsingGET gets an application report
*/
func (a *Client) GetApplicationReportUsingGET(params *GetApplicationReportUsingGETParams) (*GetApplicationReportUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationReportUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationReportUsingGET",
		Method:             "GET",
		PathPattern:        "/applications/{applicationId}/environments-version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationReportUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationReportUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationReportUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationUsingGET retrieves an application
*/
func (a *Client) GetApplicationUsingGET(params *GetApplicationUsingGETParams) (*GetApplicationUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationUsingGET",
		Method:             "GET",
		PathPattern:        "/applications/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApplicationUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchApplicationUsingPATCH patches an application
*/
func (a *Client) PatchApplicationUsingPATCH(params *PatchApplicationUsingPATCHParams) (*PatchApplicationUsingPATCHOK, *PatchApplicationUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchApplicationUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchApplicationUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/applications/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchApplicationUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchApplicationUsingPATCHOK:
		return value, nil, nil
	case *PatchApplicationUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateApplicationUsingPUT updates an application
*/
func (a *Client) UpdateApplicationUsingPUT(params *UpdateApplicationUsingPUTParams) (*UpdateApplicationUsingPUTOK, *UpdateApplicationUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApplicationUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateApplicationUsingPUT",
		Method:             "PUT",
		PathPattern:        "/applications/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateApplicationUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateApplicationUsingPUTOK:
		return value, nil, nil
	case *UpdateApplicationUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
