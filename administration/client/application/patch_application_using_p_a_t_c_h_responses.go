// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// PatchApplicationUsingPATCHReader is a Reader for the PatchApplicationUsingPATCH structure.
type PatchApplicationUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchApplicationUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchApplicationUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchApplicationUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchApplicationUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchApplicationUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchApplicationUsingPATCHOK creates a PatchApplicationUsingPATCHOK with default headers values
func NewPatchApplicationUsingPATCHOK() *PatchApplicationUsingPATCHOK {
	return &PatchApplicationUsingPATCHOK{}
}

/*PatchApplicationUsingPATCHOK handles this case with default header values.

OK
*/
type PatchApplicationUsingPATCHOK struct {
	Payload *models.ApplicationDto
}

func (o *PatchApplicationUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /applications/{applicationId}][%d] patchApplicationUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchApplicationUsingPATCHOK) GetPayload() *models.ApplicationDto {
	return o.Payload
}

func (o *PatchApplicationUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplicationDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchApplicationUsingPATCHNoContent creates a PatchApplicationUsingPATCHNoContent with default headers values
func NewPatchApplicationUsingPATCHNoContent() *PatchApplicationUsingPATCHNoContent {
	return &PatchApplicationUsingPATCHNoContent{}
}

/*PatchApplicationUsingPATCHNoContent handles this case with default header values.

No Content
*/
type PatchApplicationUsingPATCHNoContent struct {
}

func (o *PatchApplicationUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /applications/{applicationId}][%d] patchApplicationUsingPATCHNoContent ", 204)
}

func (o *PatchApplicationUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchApplicationUsingPATCHUnauthorized creates a PatchApplicationUsingPATCHUnauthorized with default headers values
func NewPatchApplicationUsingPATCHUnauthorized() *PatchApplicationUsingPATCHUnauthorized {
	return &PatchApplicationUsingPATCHUnauthorized{}
}

/*PatchApplicationUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchApplicationUsingPATCHUnauthorized struct {
}

func (o *PatchApplicationUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /applications/{applicationId}][%d] patchApplicationUsingPATCHUnauthorized ", 401)
}

func (o *PatchApplicationUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchApplicationUsingPATCHForbidden creates a PatchApplicationUsingPATCHForbidden with default headers values
func NewPatchApplicationUsingPATCHForbidden() *PatchApplicationUsingPATCHForbidden {
	return &PatchApplicationUsingPATCHForbidden{}
}

/*PatchApplicationUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type PatchApplicationUsingPATCHForbidden struct {
}

func (o *PatchApplicationUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /applications/{applicationId}][%d] patchApplicationUsingPATCHForbidden ", 403)
}

func (o *PatchApplicationUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
