// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetApplicationUsingGETReader is a Reader for the GetApplicationUsingGET structure.
type GetApplicationUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApplicationUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApplicationUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetApplicationUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetApplicationUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetApplicationUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetApplicationUsingGETOK creates a GetApplicationUsingGETOK with default headers values
func NewGetApplicationUsingGETOK() *GetApplicationUsingGETOK {
	return &GetApplicationUsingGETOK{}
}

/*GetApplicationUsingGETOK handles this case with default header values.

OK
*/
type GetApplicationUsingGETOK struct {
	Payload *models.ApplicationDto
}

func (o *GetApplicationUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}][%d] getApplicationUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetApplicationUsingGETOK) GetPayload() *models.ApplicationDto {
	return o.Payload
}

func (o *GetApplicationUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplicationDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApplicationUsingGETUnauthorized creates a GetApplicationUsingGETUnauthorized with default headers values
func NewGetApplicationUsingGETUnauthorized() *GetApplicationUsingGETUnauthorized {
	return &GetApplicationUsingGETUnauthorized{}
}

/*GetApplicationUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetApplicationUsingGETUnauthorized struct {
}

func (o *GetApplicationUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}][%d] getApplicationUsingGETUnauthorized ", 401)
}

func (o *GetApplicationUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplicationUsingGETForbidden creates a GetApplicationUsingGETForbidden with default headers values
func NewGetApplicationUsingGETForbidden() *GetApplicationUsingGETForbidden {
	return &GetApplicationUsingGETForbidden{}
}

/*GetApplicationUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetApplicationUsingGETForbidden struct {
}

func (o *GetApplicationUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}][%d] getApplicationUsingGETForbidden ", 403)
}

func (o *GetApplicationUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplicationUsingGETNotFound creates a GetApplicationUsingGETNotFound with default headers values
func NewGetApplicationUsingGETNotFound() *GetApplicationUsingGETNotFound {
	return &GetApplicationUsingGETNotFound{}
}

/*GetApplicationUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetApplicationUsingGETNotFound struct {
}

func (o *GetApplicationUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}][%d] getApplicationUsingGETNotFound ", 404)
}

func (o *GetApplicationUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
