// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewPatchPortfolioLicensingAgreementUsingPATCHParams creates a new PatchPortfolioLicensingAgreementUsingPATCHParams object
// with the default values initialized.
func NewPatchPortfolioLicensingAgreementUsingPATCHParams() *PatchPortfolioLicensingAgreementUsingPATCHParams {
	var ()
	return &PatchPortfolioLicensingAgreementUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchPortfolioLicensingAgreementUsingPATCHParamsWithTimeout creates a new PatchPortfolioLicensingAgreementUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchPortfolioLicensingAgreementUsingPATCHParamsWithTimeout(timeout time.Duration) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	var ()
	return &PatchPortfolioLicensingAgreementUsingPATCHParams{

		timeout: timeout,
	}
}

// NewPatchPortfolioLicensingAgreementUsingPATCHParamsWithContext creates a new PatchPortfolioLicensingAgreementUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchPortfolioLicensingAgreementUsingPATCHParamsWithContext(ctx context.Context) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	var ()
	return &PatchPortfolioLicensingAgreementUsingPATCHParams{

		Context: ctx,
	}
}

// NewPatchPortfolioLicensingAgreementUsingPATCHParamsWithHTTPClient creates a new PatchPortfolioLicensingAgreementUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchPortfolioLicensingAgreementUsingPATCHParamsWithHTTPClient(client *http.Client) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	var ()
	return &PatchPortfolioLicensingAgreementUsingPATCHParams{
		HTTPClient: client,
	}
}

/*PatchPortfolioLicensingAgreementUsingPATCHParams contains all the parameters to send to the API endpoint
for the patch portfolio licensing agreement using p a t c h operation typically these are written to a http.Request
*/
type PatchPortfolioLicensingAgreementUsingPATCHParams struct {

	/*PlaDto
	  plaDto

	*/
	PlaDto *models.PortfolioLicensingAgreementDto
	/*TenantID
	  targetTenantId

	*/
	TenantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) WithTimeout(timeout time.Duration) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) WithContext(ctx context.Context) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) WithHTTPClient(client *http.Client) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPlaDto adds the plaDto to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) WithPlaDto(plaDto *models.PortfolioLicensingAgreementDto) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	o.SetPlaDto(plaDto)
	return o
}

// SetPlaDto adds the plaDto to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) SetPlaDto(plaDto *models.PortfolioLicensingAgreementDto) {
	o.PlaDto = plaDto
}

// WithTenantID adds the tenantID to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) WithTenantID(tenantID *string) *PatchPortfolioLicensingAgreementUsingPATCHParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the patch portfolio licensing agreement using p a t c h params
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchPortfolioLicensingAgreementUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PlaDto != nil {
		if err := r.SetBodyParam(o.PlaDto); err != nil {
			return err
		}
	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID string
		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {
			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
