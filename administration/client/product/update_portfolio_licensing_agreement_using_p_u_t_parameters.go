// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewUpdatePortfolioLicensingAgreementUsingPUTParams creates a new UpdatePortfolioLicensingAgreementUsingPUTParams object
// with the default values initialized.
func NewUpdatePortfolioLicensingAgreementUsingPUTParams() *UpdatePortfolioLicensingAgreementUsingPUTParams {
	var ()
	return &UpdatePortfolioLicensingAgreementUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePortfolioLicensingAgreementUsingPUTParamsWithTimeout creates a new UpdatePortfolioLicensingAgreementUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePortfolioLicensingAgreementUsingPUTParamsWithTimeout(timeout time.Duration) *UpdatePortfolioLicensingAgreementUsingPUTParams {
	var ()
	return &UpdatePortfolioLicensingAgreementUsingPUTParams{

		timeout: timeout,
	}
}

// NewUpdatePortfolioLicensingAgreementUsingPUTParamsWithContext creates a new UpdatePortfolioLicensingAgreementUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePortfolioLicensingAgreementUsingPUTParamsWithContext(ctx context.Context) *UpdatePortfolioLicensingAgreementUsingPUTParams {
	var ()
	return &UpdatePortfolioLicensingAgreementUsingPUTParams{

		Context: ctx,
	}
}

// NewUpdatePortfolioLicensingAgreementUsingPUTParamsWithHTTPClient creates a new UpdatePortfolioLicensingAgreementUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePortfolioLicensingAgreementUsingPUTParamsWithHTTPClient(client *http.Client) *UpdatePortfolioLicensingAgreementUsingPUTParams {
	var ()
	return &UpdatePortfolioLicensingAgreementUsingPUTParams{
		HTTPClient: client,
	}
}

/*UpdatePortfolioLicensingAgreementUsingPUTParams contains all the parameters to send to the API endpoint
for the update portfolio licensing agreement using p u t operation typically these are written to a http.Request
*/
type UpdatePortfolioLicensingAgreementUsingPUTParams struct {

	/*PlaDto
	  plaDto

	*/
	PlaDto *models.PortfolioLicensingAgreementDto

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) WithTimeout(timeout time.Duration) *UpdatePortfolioLicensingAgreementUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) WithContext(ctx context.Context) *UpdatePortfolioLicensingAgreementUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) WithHTTPClient(client *http.Client) *UpdatePortfolioLicensingAgreementUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPlaDto adds the plaDto to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) WithPlaDto(plaDto *models.PortfolioLicensingAgreementDto) *UpdatePortfolioLicensingAgreementUsingPUTParams {
	o.SetPlaDto(plaDto)
	return o
}

// SetPlaDto adds the plaDto to the update portfolio licensing agreement using p u t params
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) SetPlaDto(plaDto *models.PortfolioLicensingAgreementDto) {
	o.PlaDto = plaDto
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePortfolioLicensingAgreementUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PlaDto != nil {
		if err := r.SetBodyParam(o.PlaDto); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
