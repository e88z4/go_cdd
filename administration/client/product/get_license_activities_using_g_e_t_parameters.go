// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLicenseActivitiesUsingGETParams creates a new GetLicenseActivitiesUsingGETParams object
// with the default values initialized.
func NewGetLicenseActivitiesUsingGETParams() *GetLicenseActivitiesUsingGETParams {
	var ()
	return &GetLicenseActivitiesUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLicenseActivitiesUsingGETParamsWithTimeout creates a new GetLicenseActivitiesUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLicenseActivitiesUsingGETParamsWithTimeout(timeout time.Duration) *GetLicenseActivitiesUsingGETParams {
	var ()
	return &GetLicenseActivitiesUsingGETParams{

		timeout: timeout,
	}
}

// NewGetLicenseActivitiesUsingGETParamsWithContext creates a new GetLicenseActivitiesUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLicenseActivitiesUsingGETParamsWithContext(ctx context.Context) *GetLicenseActivitiesUsingGETParams {
	var ()
	return &GetLicenseActivitiesUsingGETParams{

		Context: ctx,
	}
}

// NewGetLicenseActivitiesUsingGETParamsWithHTTPClient creates a new GetLicenseActivitiesUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLicenseActivitiesUsingGETParamsWithHTTPClient(client *http.Client) *GetLicenseActivitiesUsingGETParams {
	var ()
	return &GetLicenseActivitiesUsingGETParams{
		HTTPClient: client,
	}
}

/*GetLicenseActivitiesUsingGETParams contains all the parameters to send to the API endpoint
for the get license activities using g e t operation typically these are written to a http.Request
*/
type GetLicenseActivitiesUsingGETParams struct {

	/*EndDate
	  endDate

	*/
	EndDate *int64
	/*PageNumber
	  pageNumber

	*/
	PageNumber *int32
	/*PageSize
	  pageSize

	*/
	PageSize *int32
	/*StartDate
	  startDate

	*/
	StartDate *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) WithTimeout(timeout time.Duration) *GetLicenseActivitiesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) WithContext(ctx context.Context) *GetLicenseActivitiesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) WithHTTPClient(client *http.Client) *GetLicenseActivitiesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) WithEndDate(endDate *int64) *GetLicenseActivitiesUsingGETParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) SetEndDate(endDate *int64) {
	o.EndDate = endDate
}

// WithPageNumber adds the pageNumber to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) WithPageNumber(pageNumber *int32) *GetLicenseActivitiesUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) WithPageSize(pageSize *int32) *GetLicenseActivitiesUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithStartDate adds the startDate to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) WithStartDate(startDate *int64) *GetLicenseActivitiesUsingGETParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get license activities using g e t params
func (o *GetLicenseActivitiesUsingGETParams) SetStartDate(startDate *int64) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetLicenseActivitiesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate int64
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := swag.FormatInt64(qrEndDate)
		if qEndDate != "" {
			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page_number
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page_number", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate int64
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := swag.FormatInt64(qrStartDate)
		if qStartDate != "" {
			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
