// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// UpdatePortfolioLicensingAgreementUsingPUTReader is a Reader for the UpdatePortfolioLicensingAgreementUsingPUT structure.
type UpdatePortfolioLicensingAgreementUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePortfolioLicensingAgreementUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePortfolioLicensingAgreementUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdatePortfolioLicensingAgreementUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdatePortfolioLicensingAgreementUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePortfolioLicensingAgreementUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePortfolioLicensingAgreementUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatePortfolioLicensingAgreementUsingPUTOK creates a UpdatePortfolioLicensingAgreementUsingPUTOK with default headers values
func NewUpdatePortfolioLicensingAgreementUsingPUTOK() *UpdatePortfolioLicensingAgreementUsingPUTOK {
	return &UpdatePortfolioLicensingAgreementUsingPUTOK{}
}

/*UpdatePortfolioLicensingAgreementUsingPUTOK handles this case with default header values.

OK
*/
type UpdatePortfolioLicensingAgreementUsingPUTOK struct {
	Payload *models.PortfolioLicensingAgreementDto
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /product/license][%d] updatePortfolioLicensingAgreementUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTOK) GetPayload() *models.PortfolioLicensingAgreementDto {
	return o.Payload
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PortfolioLicensingAgreementDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePortfolioLicensingAgreementUsingPUTCreated creates a UpdatePortfolioLicensingAgreementUsingPUTCreated with default headers values
func NewUpdatePortfolioLicensingAgreementUsingPUTCreated() *UpdatePortfolioLicensingAgreementUsingPUTCreated {
	return &UpdatePortfolioLicensingAgreementUsingPUTCreated{}
}

/*UpdatePortfolioLicensingAgreementUsingPUTCreated handles this case with default header values.

Created
*/
type UpdatePortfolioLicensingAgreementUsingPUTCreated struct {
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /product/license][%d] updatePortfolioLicensingAgreementUsingPUTCreated ", 201)
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePortfolioLicensingAgreementUsingPUTUnauthorized creates a UpdatePortfolioLicensingAgreementUsingPUTUnauthorized with default headers values
func NewUpdatePortfolioLicensingAgreementUsingPUTUnauthorized() *UpdatePortfolioLicensingAgreementUsingPUTUnauthorized {
	return &UpdatePortfolioLicensingAgreementUsingPUTUnauthorized{}
}

/*UpdatePortfolioLicensingAgreementUsingPUTUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdatePortfolioLicensingAgreementUsingPUTUnauthorized struct {
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /product/license][%d] updatePortfolioLicensingAgreementUsingPUTUnauthorized ", 401)
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePortfolioLicensingAgreementUsingPUTForbidden creates a UpdatePortfolioLicensingAgreementUsingPUTForbidden with default headers values
func NewUpdatePortfolioLicensingAgreementUsingPUTForbidden() *UpdatePortfolioLicensingAgreementUsingPUTForbidden {
	return &UpdatePortfolioLicensingAgreementUsingPUTForbidden{}
}

/*UpdatePortfolioLicensingAgreementUsingPUTForbidden handles this case with default header values.

Forbidden
*/
type UpdatePortfolioLicensingAgreementUsingPUTForbidden struct {
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /product/license][%d] updatePortfolioLicensingAgreementUsingPUTForbidden ", 403)
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePortfolioLicensingAgreementUsingPUTNotFound creates a UpdatePortfolioLicensingAgreementUsingPUTNotFound with default headers values
func NewUpdatePortfolioLicensingAgreementUsingPUTNotFound() *UpdatePortfolioLicensingAgreementUsingPUTNotFound {
	return &UpdatePortfolioLicensingAgreementUsingPUTNotFound{}
}

/*UpdatePortfolioLicensingAgreementUsingPUTNotFound handles this case with default header values.

Not Found
*/
type UpdatePortfolioLicensingAgreementUsingPUTNotFound struct {
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /product/license][%d] updatePortfolioLicensingAgreementUsingPUTNotFound ", 404)
}

func (o *UpdatePortfolioLicensingAgreementUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
