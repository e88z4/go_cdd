// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new product API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomerFeedbackUsingPOST(params *CreateCustomerFeedbackUsingPOSTParams) (*CreateCustomerFeedbackUsingPOSTOK, *CreateCustomerFeedbackUsingPOSTCreated, error)

	CreatePortfolioLicensingAgreementUsingPOST(params *CreatePortfolioLicensingAgreementUsingPOSTParams) (*CreatePortfolioLicensingAgreementUsingPOSTOK, *CreatePortfolioLicensingAgreementUsingPOSTCreated, error)

	GetLicenseActivitiesUsingGET(params *GetLicenseActivitiesUsingGETParams) (*GetLicenseActivitiesUsingGETOK, error)

	GetPortfolioLicensingAgreementUsingGET(params *GetPortfolioLicensingAgreementUsingGETParams) (*GetPortfolioLicensingAgreementUsingGETOK, error)

	PatchPortfolioLicensingAgreementUsingPATCH(params *PatchPortfolioLicensingAgreementUsingPATCHParams) (*PatchPortfolioLicensingAgreementUsingPATCHOK, *PatchPortfolioLicensingAgreementUsingPATCHNoContent, error)

	UpdatePortfolioLicensingAgreementUsingPUT(params *UpdatePortfolioLicensingAgreementUsingPUTParams) (*UpdatePortfolioLicensingAgreementUsingPUTOK, *UpdatePortfolioLicensingAgreementUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCustomerFeedbackUsingPOST creates a customer feedback
*/
func (a *Client) CreateCustomerFeedbackUsingPOST(params *CreateCustomerFeedbackUsingPOSTParams) (*CreateCustomerFeedbackUsingPOSTOK, *CreateCustomerFeedbackUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomerFeedbackUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomerFeedbackUsingPOST",
		Method:             "POST",
		PathPattern:        "/product/customer-feedback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCustomerFeedbackUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCustomerFeedbackUsingPOSTOK:
		return value, nil, nil
	case *CreateCustomerFeedbackUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for product: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePortfolioLicensingAgreementUsingPOST creates portfolio license agreement info
*/
func (a *Client) CreatePortfolioLicensingAgreementUsingPOST(params *CreatePortfolioLicensingAgreementUsingPOSTParams) (*CreatePortfolioLicensingAgreementUsingPOSTOK, *CreatePortfolioLicensingAgreementUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePortfolioLicensingAgreementUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPortfolioLicensingAgreementUsingPOST",
		Method:             "POST",
		PathPattern:        "/product/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePortfolioLicensingAgreementUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePortfolioLicensingAgreementUsingPOSTOK:
		return value, nil, nil
	case *CreatePortfolioLicensingAgreementUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for product: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicenseActivitiesUsingGET retrieves portfolio license agreement activities
*/
func (a *Client) GetLicenseActivitiesUsingGET(params *GetLicenseActivitiesUsingGETParams) (*GetLicenseActivitiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseActivitiesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseActivitiesUsingGET",
		Method:             "GET",
		PathPattern:        "/product/license/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLicenseActivitiesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicenseActivitiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicenseActivitiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPortfolioLicensingAgreementUsingGET retrieves portfolio license agreement info
*/
func (a *Client) GetPortfolioLicensingAgreementUsingGET(params *GetPortfolioLicensingAgreementUsingGETParams) (*GetPortfolioLicensingAgreementUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPortfolioLicensingAgreementUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPortfolioLicensingAgreementUsingGET",
		Method:             "GET",
		PathPattern:        "/product/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPortfolioLicensingAgreementUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPortfolioLicensingAgreementUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPortfolioLicensingAgreementUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPortfolioLicensingAgreementUsingPATCH patches portfolio license agreement site id
*/
func (a *Client) PatchPortfolioLicensingAgreementUsingPATCH(params *PatchPortfolioLicensingAgreementUsingPATCHParams) (*PatchPortfolioLicensingAgreementUsingPATCHOK, *PatchPortfolioLicensingAgreementUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPortfolioLicensingAgreementUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchPortfolioLicensingAgreementUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/product/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPortfolioLicensingAgreementUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchPortfolioLicensingAgreementUsingPATCHOK:
		return value, nil, nil
	case *PatchPortfolioLicensingAgreementUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for product: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePortfolioLicensingAgreementUsingPUT updates portfolio license agreement info
*/
func (a *Client) UpdatePortfolioLicensingAgreementUsingPUT(params *UpdatePortfolioLicensingAgreementUsingPUTParams) (*UpdatePortfolioLicensingAgreementUsingPUTOK, *UpdatePortfolioLicensingAgreementUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePortfolioLicensingAgreementUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePortfolioLicensingAgreementUsingPUT",
		Method:             "PUT",
		PathPattern:        "/product/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePortfolioLicensingAgreementUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePortfolioLicensingAgreementUsingPUTOK:
		return value, nil, nil
	case *UpdatePortfolioLicensingAgreementUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for product: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
