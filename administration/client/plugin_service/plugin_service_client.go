// Code generated by go-swagger; DO NOT EDIT.

package plugin_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new plugin service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugin service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePluginUsingDELETE(params *DeletePluginUsingDELETEParams) (*DeletePluginUsingDELETEOK, *DeletePluginUsingDELETENoContent, error)

	EditPluginManifestURLUsingPUT(params *EditPluginManifestURLUsingPUTParams) (*EditPluginManifestURLUsingPUTOK, *EditPluginManifestURLUsingPUTCreated, error)

	GetAllPluginServiceTemplatesUsingGET(params *GetAllPluginServiceTemplatesUsingGETParams) (*GetAllPluginServiceTemplatesUsingGETOK, error)

	GetAllPluginsUsingGET(params *GetAllPluginsUsingGETParams) (*GetAllPluginsUsingGETOK, error)

	GetPluginIconUsingGET(params *GetPluginIconUsingGETParams) (*GetPluginIconUsingGETOK, error)

	GetPluginServiceTemplateParameterUsingPOST(params *GetPluginServiceTemplateParameterUsingPOSTParams) (*GetPluginServiceTemplateParameterUsingPOSTOK, *GetPluginServiceTemplateParameterUsingPOSTCreated, error)

	GetPluginServiceTemplateUsingGET(params *GetPluginServiceTemplateUsingGETParams) (*GetPluginServiceTemplateUsingGETOK, error)

	GetPluginServiceUsingGET(params *GetPluginServiceUsingGETParams) (*GetPluginServiceUsingGETOK, error)

	GetPluginUsingGET(params *GetPluginUsingGETParams) (*GetPluginUsingGETOK, error)

	RegisterPluginUsingPOST(params *RegisterPluginUsingPOSTParams) (*RegisterPluginUsingPOSTOK, *RegisterPluginUsingPOSTCreated, error)

	SyncPluginUsingPATCH(params *SyncPluginUsingPATCHParams) (*SyncPluginUsingPATCHOK, *SyncPluginUsingPATCHNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeletePluginUsingDELETE deletes a plugin
*/
func (a *Client) DeletePluginUsingDELETE(params *DeletePluginUsingDELETEParams) (*DeletePluginUsingDELETEOK, *DeletePluginUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePluginUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePluginUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/plugins/{pluginId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePluginUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePluginUsingDELETEOK:
		return value, nil, nil
	case *DeletePluginUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for plugin_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EditPluginManifestURLUsingPUT edits a plugin manifest URL
*/
func (a *Client) EditPluginManifestURLUsingPUT(params *EditPluginManifestURLUsingPUTParams) (*EditPluginManifestURLUsingPUTOK, *EditPluginManifestURLUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditPluginManifestURLUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editPluginManifestUrlUsingPUT",
		Method:             "PUT",
		PathPattern:        "/plugins/{pluginId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditPluginManifestURLUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EditPluginManifestURLUsingPUTOK:
		return value, nil, nil
	case *EditPluginManifestURLUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for plugin_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllPluginServiceTemplatesUsingGET retrieves all plugin service templates
*/
func (a *Client) GetAllPluginServiceTemplatesUsingGET(params *GetAllPluginServiceTemplatesUsingGETParams) (*GetAllPluginServiceTemplatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPluginServiceTemplatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllPluginServiceTemplatesUsingGET",
		Method:             "GET",
		PathPattern:        "/plugin-service-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPluginServiceTemplatesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPluginServiceTemplatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPluginServiceTemplatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllPluginsUsingGET retrieves all plugins
*/
func (a *Client) GetAllPluginsUsingGET(params *GetAllPluginsUsingGETParams) (*GetAllPluginsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPluginsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllPluginsUsingGET",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPluginsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPluginsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPluginsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginIconUsingGET retrieves a plugin s icon
*/
func (a *Client) GetPluginIconUsingGET(params *GetPluginIconUsingGETParams) (*GetPluginIconUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginIconUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginIconUsingGET",
		Method:             "GET",
		PathPattern:        "/plugins/{pluginId}/icon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginIconUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginIconUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginIconUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginServiceTemplateParameterUsingPOST retrieves a plugin service template parameter dynamic values
*/
func (a *Client) GetPluginServiceTemplateParameterUsingPOST(params *GetPluginServiceTemplateParameterUsingPOSTParams) (*GetPluginServiceTemplateParameterUsingPOSTOK, *GetPluginServiceTemplateParameterUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginServiceTemplateParameterUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginServiceTemplateParameterUsingPOST",
		Method:             "POST",
		PathPattern:        "/plugin-service-templates/{pluginServiceTemplateId}/plugin-service-template-parameters/{pluginServiceTemplateParameterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginServiceTemplateParameterUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetPluginServiceTemplateParameterUsingPOSTOK:
		return value, nil, nil
	case *GetPluginServiceTemplateParameterUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for plugin_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginServiceTemplateUsingGET retrieves a plugin service template
*/
func (a *Client) GetPluginServiceTemplateUsingGET(params *GetPluginServiceTemplateUsingGETParams) (*GetPluginServiceTemplateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginServiceTemplateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginServiceTemplateUsingGET",
		Method:             "GET",
		PathPattern:        "/plugin-service-templates/{pluginServiceTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginServiceTemplateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginServiceTemplateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginServiceTemplateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginServiceUsingGET retrieves a plugin service
*/
func (a *Client) GetPluginServiceUsingGET(params *GetPluginServiceUsingGETParams) (*GetPluginServiceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginServiceUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginServiceUsingGET",
		Method:             "GET",
		PathPattern:        "/plugin-services/{pluginServiceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginServiceUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginServiceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginServiceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPluginUsingGET retrieves a plugin
*/
func (a *Client) GetPluginUsingGET(params *GetPluginUsingGETParams) (*GetPluginUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginUsingGET",
		Method:             "GET",
		PathPattern:        "/plugins/{pluginId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterPluginUsingPOST registers a plugin by URL
*/
func (a *Client) RegisterPluginUsingPOST(params *RegisterPluginUsingPOSTParams) (*RegisterPluginUsingPOSTOK, *RegisterPluginUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterPluginUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerPluginUsingPOST",
		Method:             "POST",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterPluginUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterPluginUsingPOSTOK:
		return value, nil, nil
	case *RegisterPluginUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for plugin_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyncPluginUsingPATCH syncs a plugin
*/
func (a *Client) SyncPluginUsingPATCH(params *SyncPluginUsingPATCHParams) (*SyncPluginUsingPATCHOK, *SyncPluginUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncPluginUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncPluginUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/plugins/{pluginId}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncPluginUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncPluginUsingPATCHOK:
		return value, nil, nil
	case *SyncPluginUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for plugin_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
