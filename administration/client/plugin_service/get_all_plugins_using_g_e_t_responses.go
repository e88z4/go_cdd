// Code generated by go-swagger; DO NOT EDIT.

package plugin_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetAllPluginsUsingGETReader is a Reader for the GetAllPluginsUsingGET structure.
type GetAllPluginsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllPluginsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllPluginsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllPluginsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllPluginsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllPluginsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllPluginsUsingGETOK creates a GetAllPluginsUsingGETOK with default headers values
func NewGetAllPluginsUsingGETOK() *GetAllPluginsUsingGETOK {
	return &GetAllPluginsUsingGETOK{}
}

/*GetAllPluginsUsingGETOK handles this case with default header values.

OK
*/
type GetAllPluginsUsingGETOK struct {
	Payload *models.ListHolderDtoPluginDto
}

func (o *GetAllPluginsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /plugins][%d] getAllPluginsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllPluginsUsingGETOK) GetPayload() *models.ListHolderDtoPluginDto {
	return o.Payload
}

func (o *GetAllPluginsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoPluginDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPluginsUsingGETUnauthorized creates a GetAllPluginsUsingGETUnauthorized with default headers values
func NewGetAllPluginsUsingGETUnauthorized() *GetAllPluginsUsingGETUnauthorized {
	return &GetAllPluginsUsingGETUnauthorized{}
}

/*GetAllPluginsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllPluginsUsingGETUnauthorized struct {
}

func (o *GetAllPluginsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /plugins][%d] getAllPluginsUsingGETUnauthorized ", 401)
}

func (o *GetAllPluginsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPluginsUsingGETForbidden creates a GetAllPluginsUsingGETForbidden with default headers values
func NewGetAllPluginsUsingGETForbidden() *GetAllPluginsUsingGETForbidden {
	return &GetAllPluginsUsingGETForbidden{}
}

/*GetAllPluginsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllPluginsUsingGETForbidden struct {
}

func (o *GetAllPluginsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /plugins][%d] getAllPluginsUsingGETForbidden ", 403)
}

func (o *GetAllPluginsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllPluginsUsingGETNotFound creates a GetAllPluginsUsingGETNotFound with default headers values
func NewGetAllPluginsUsingGETNotFound() *GetAllPluginsUsingGETNotFound {
	return &GetAllPluginsUsingGETNotFound{}
}

/*GetAllPluginsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllPluginsUsingGETNotFound struct {
}

func (o *GetAllPluginsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /plugins][%d] getAllPluginsUsingGETNotFound ", 404)
}

func (o *GetAllPluginsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
