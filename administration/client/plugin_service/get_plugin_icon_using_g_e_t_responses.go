// Code generated by go-swagger; DO NOT EDIT.

package plugin_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetPluginIconUsingGETReader is a Reader for the GetPluginIconUsingGET structure.
type GetPluginIconUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPluginIconUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPluginIconUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPluginIconUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPluginIconUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPluginIconUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPluginIconUsingGETOK creates a GetPluginIconUsingGETOK with default headers values
func NewGetPluginIconUsingGETOK() *GetPluginIconUsingGETOK {
	return &GetPluginIconUsingGETOK{}
}

/*GetPluginIconUsingGETOK handles this case with default header values.

OK
*/
type GetPluginIconUsingGETOK struct {
}

func (o *GetPluginIconUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}/icon][%d] getPluginIconUsingGETOK ", 200)
}

func (o *GetPluginIconUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPluginIconUsingGETUnauthorized creates a GetPluginIconUsingGETUnauthorized with default headers values
func NewGetPluginIconUsingGETUnauthorized() *GetPluginIconUsingGETUnauthorized {
	return &GetPluginIconUsingGETUnauthorized{}
}

/*GetPluginIconUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPluginIconUsingGETUnauthorized struct {
}

func (o *GetPluginIconUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}/icon][%d] getPluginIconUsingGETUnauthorized ", 401)
}

func (o *GetPluginIconUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPluginIconUsingGETForbidden creates a GetPluginIconUsingGETForbidden with default headers values
func NewGetPluginIconUsingGETForbidden() *GetPluginIconUsingGETForbidden {
	return &GetPluginIconUsingGETForbidden{}
}

/*GetPluginIconUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetPluginIconUsingGETForbidden struct {
}

func (o *GetPluginIconUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}/icon][%d] getPluginIconUsingGETForbidden ", 403)
}

func (o *GetPluginIconUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPluginIconUsingGETNotFound creates a GetPluginIconUsingGETNotFound with default headers values
func NewGetPluginIconUsingGETNotFound() *GetPluginIconUsingGETNotFound {
	return &GetPluginIconUsingGETNotFound{}
}

/*GetPluginIconUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetPluginIconUsingGETNotFound struct {
}

func (o *GetPluginIconUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}/icon][%d] getPluginIconUsingGETNotFound ", 404)
}

func (o *GetPluginIconUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
