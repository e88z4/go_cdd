// Code generated by go-swagger; DO NOT EDIT.

package plugin_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetPluginUsingGETReader is a Reader for the GetPluginUsingGET structure.
type GetPluginUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPluginUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPluginUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPluginUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPluginUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPluginUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPluginUsingGETOK creates a GetPluginUsingGETOK with default headers values
func NewGetPluginUsingGETOK() *GetPluginUsingGETOK {
	return &GetPluginUsingGETOK{}
}

/*GetPluginUsingGETOK handles this case with default header values.

OK
*/
type GetPluginUsingGETOK struct {
	Payload *models.PluginDto
}

func (o *GetPluginUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}][%d] getPluginUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetPluginUsingGETOK) GetPayload() *models.PluginDto {
	return o.Payload
}

func (o *GetPluginUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PluginDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPluginUsingGETUnauthorized creates a GetPluginUsingGETUnauthorized with default headers values
func NewGetPluginUsingGETUnauthorized() *GetPluginUsingGETUnauthorized {
	return &GetPluginUsingGETUnauthorized{}
}

/*GetPluginUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPluginUsingGETUnauthorized struct {
}

func (o *GetPluginUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}][%d] getPluginUsingGETUnauthorized ", 401)
}

func (o *GetPluginUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPluginUsingGETForbidden creates a GetPluginUsingGETForbidden with default headers values
func NewGetPluginUsingGETForbidden() *GetPluginUsingGETForbidden {
	return &GetPluginUsingGETForbidden{}
}

/*GetPluginUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetPluginUsingGETForbidden struct {
}

func (o *GetPluginUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}][%d] getPluginUsingGETForbidden ", 403)
}

func (o *GetPluginUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPluginUsingGETNotFound creates a GetPluginUsingGETNotFound with default headers values
func NewGetPluginUsingGETNotFound() *GetPluginUsingGETNotFound {
	return &GetPluginUsingGETNotFound{}
}

/*GetPluginUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetPluginUsingGETNotFound struct {
}

func (o *GetPluginUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginId}][%d] getPluginUsingGETNotFound ", 404)
}

func (o *GetPluginUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
