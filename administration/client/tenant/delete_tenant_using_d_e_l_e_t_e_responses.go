// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteTenantUsingDELETEReader is a Reader for the DeleteTenantUsingDELETE structure.
type DeleteTenantUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTenantUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTenantUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteTenantUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteTenantUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteTenantUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteTenantUsingDELETEOK creates a DeleteTenantUsingDELETEOK with default headers values
func NewDeleteTenantUsingDELETEOK() *DeleteTenantUsingDELETEOK {
	return &DeleteTenantUsingDELETEOK{}
}

/*DeleteTenantUsingDELETEOK handles this case with default header values.

OK
*/
type DeleteTenantUsingDELETEOK struct {
}

func (o *DeleteTenantUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /tenants/{tenantId}][%d] deleteTenantUsingDELETEOK ", 200)
}

func (o *DeleteTenantUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTenantUsingDELETENoContent creates a DeleteTenantUsingDELETENoContent with default headers values
func NewDeleteTenantUsingDELETENoContent() *DeleteTenantUsingDELETENoContent {
	return &DeleteTenantUsingDELETENoContent{}
}

/*DeleteTenantUsingDELETENoContent handles this case with default header values.

No Content
*/
type DeleteTenantUsingDELETENoContent struct {
}

func (o *DeleteTenantUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /tenants/{tenantId}][%d] deleteTenantUsingDELETENoContent ", 204)
}

func (o *DeleteTenantUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTenantUsingDELETEUnauthorized creates a DeleteTenantUsingDELETEUnauthorized with default headers values
func NewDeleteTenantUsingDELETEUnauthorized() *DeleteTenantUsingDELETEUnauthorized {
	return &DeleteTenantUsingDELETEUnauthorized{}
}

/*DeleteTenantUsingDELETEUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteTenantUsingDELETEUnauthorized struct {
}

func (o *DeleteTenantUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /tenants/{tenantId}][%d] deleteTenantUsingDELETEUnauthorized ", 401)
}

func (o *DeleteTenantUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTenantUsingDELETEForbidden creates a DeleteTenantUsingDELETEForbidden with default headers values
func NewDeleteTenantUsingDELETEForbidden() *DeleteTenantUsingDELETEForbidden {
	return &DeleteTenantUsingDELETEForbidden{}
}

/*DeleteTenantUsingDELETEForbidden handles this case with default header values.

Forbidden
*/
type DeleteTenantUsingDELETEForbidden struct {
}

func (o *DeleteTenantUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /tenants/{tenantId}][%d] deleteTenantUsingDELETEForbidden ", 403)
}

func (o *DeleteTenantUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
