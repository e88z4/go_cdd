// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTenantUsingDELETE(params *DeleteTenantUsingDELETEParams) (*DeleteTenantUsingDELETEOK, *DeleteTenantUsingDELETENoContent, error)

	GetAllTenantsUsingGET(params *GetAllTenantsUsingGETParams) (*GetAllTenantsUsingGETOK, error)

	GetTenantUsingGET(params *GetTenantUsingGETParams) (*GetTenantUsingGETOK, error)

	PatchTenantUsingPATCH1(params *PatchTenantUsingPATCH1Params) (*PatchTenantUsingPATCH1OK, *PatchTenantUsingPATCH1NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteTenantUsingDELETE deletes a tenant
*/
func (a *Client) DeleteTenantUsingDELETE(params *DeleteTenantUsingDELETEParams) (*DeleteTenantUsingDELETEOK, *DeleteTenantUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenantUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/tenants/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTenantUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTenantUsingDELETEOK:
		return value, nil, nil
	case *DeleteTenantUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllTenantsUsingGET retrieves all tenants
*/
func (a *Client) GetAllTenantsUsingGET(params *GetAllTenantsUsingGETParams) (*GetAllTenantsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTenantsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllTenantsUsingGET",
		Method:             "GET",
		PathPattern:        "/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTenantsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTenantsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTenantsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantUsingGET retrieves tenant
*/
func (a *Client) GetTenantUsingGET(params *GetTenantUsingGETParams) (*GetTenantUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantUsingGET",
		Method:             "GET",
		PathPattern:        "/tenants/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchTenantUsingPATCH1 patches a tenant
*/
func (a *Client) PatchTenantUsingPATCH1(params *PatchTenantUsingPATCH1Params) (*PatchTenantUsingPATCH1OK, *PatchTenantUsingPATCH1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTenantUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchTenantUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/tenants/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchTenantUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchTenantUsingPATCH1OK:
		return value, nil, nil
	case *PatchTenantUsingPATCH1NoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
