// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewPatchTenantUsingPATCH1Params creates a new PatchTenantUsingPATCH1Params object
// with the default values initialized.
func NewPatchTenantUsingPATCH1Params() *PatchTenantUsingPATCH1Params {
	var ()
	return &PatchTenantUsingPATCH1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchTenantUsingPATCH1ParamsWithTimeout creates a new PatchTenantUsingPATCH1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchTenantUsingPATCH1ParamsWithTimeout(timeout time.Duration) *PatchTenantUsingPATCH1Params {
	var ()
	return &PatchTenantUsingPATCH1Params{

		timeout: timeout,
	}
}

// NewPatchTenantUsingPATCH1ParamsWithContext creates a new PatchTenantUsingPATCH1Params object
// with the default values initialized, and the ability to set a context for a request
func NewPatchTenantUsingPATCH1ParamsWithContext(ctx context.Context) *PatchTenantUsingPATCH1Params {
	var ()
	return &PatchTenantUsingPATCH1Params{

		Context: ctx,
	}
}

// NewPatchTenantUsingPATCH1ParamsWithHTTPClient creates a new PatchTenantUsingPATCH1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchTenantUsingPATCH1ParamsWithHTTPClient(client *http.Client) *PatchTenantUsingPATCH1Params {
	var ()
	return &PatchTenantUsingPATCH1Params{
		HTTPClient: client,
	}
}

/*PatchTenantUsingPATCH1Params contains all the parameters to send to the API endpoint
for the patch tenant using p a t c h 1 operation typically these are written to a http.Request
*/
type PatchTenantUsingPATCH1Params struct {

	/*TenantDto
	  tenantDto

	*/
	TenantDto *models.TenantDto
	/*TenantID
	  tenantId

	*/
	TenantID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) WithTimeout(timeout time.Duration) *PatchTenantUsingPATCH1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) WithContext(ctx context.Context) *PatchTenantUsingPATCH1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) WithHTTPClient(client *http.Client) *PatchTenantUsingPATCH1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTenantDto adds the tenantDto to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) WithTenantDto(tenantDto *models.TenantDto) *PatchTenantUsingPATCH1Params {
	o.SetTenantDto(tenantDto)
	return o
}

// SetTenantDto adds the tenantDto to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) SetTenantDto(tenantDto *models.TenantDto) {
	o.TenantDto = tenantDto
}

// WithTenantID adds the tenantID to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) WithTenantID(tenantID int64) *PatchTenantUsingPATCH1Params {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the patch tenant using p a t c h 1 params
func (o *PatchTenantUsingPATCH1Params) SetTenantID(tenantID int64) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchTenantUsingPATCH1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TenantDto != nil {
		if err := r.SetBodyParam(o.TenantDto); err != nil {
			return err
		}
	}

	// path param tenantId
	if err := r.SetPathParam("tenantId", swag.FormatInt64(o.TenantID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
