// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetSessionUsingGETReader is a Reader for the GetSessionUsingGET structure.
type GetSessionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSessionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSessionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSessionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSessionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSessionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSessionUsingGETOK creates a GetSessionUsingGETOK with default headers values
func NewGetSessionUsingGETOK() *GetSessionUsingGETOK {
	return &GetSessionUsingGETOK{}
}

/*GetSessionUsingGETOK handles this case with default header values.

OK
*/
type GetSessionUsingGETOK struct {
	Payload *models.SessionDto
}

func (o *GetSessionUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /sessions/current][%d] getSessionUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSessionUsingGETOK) GetPayload() *models.SessionDto {
	return o.Payload
}

func (o *GetSessionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSessionUsingGETUnauthorized creates a GetSessionUsingGETUnauthorized with default headers values
func NewGetSessionUsingGETUnauthorized() *GetSessionUsingGETUnauthorized {
	return &GetSessionUsingGETUnauthorized{}
}

/*GetSessionUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSessionUsingGETUnauthorized struct {
}

func (o *GetSessionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sessions/current][%d] getSessionUsingGETUnauthorized ", 401)
}

func (o *GetSessionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSessionUsingGETForbidden creates a GetSessionUsingGETForbidden with default headers values
func NewGetSessionUsingGETForbidden() *GetSessionUsingGETForbidden {
	return &GetSessionUsingGETForbidden{}
}

/*GetSessionUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetSessionUsingGETForbidden struct {
}

func (o *GetSessionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /sessions/current][%d] getSessionUsingGETForbidden ", 403)
}

func (o *GetSessionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSessionUsingGETNotFound creates a GetSessionUsingGETNotFound with default headers values
func NewGetSessionUsingGETNotFound() *GetSessionUsingGETNotFound {
	return &GetSessionUsingGETNotFound{}
}

/*GetSessionUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetSessionUsingGETNotFound struct {
}

func (o *GetSessionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /sessions/current][%d] getSessionUsingGETNotFound ", 404)
}

func (o *GetSessionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
