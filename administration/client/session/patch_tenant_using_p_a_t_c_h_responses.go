// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// PatchTenantUsingPATCHReader is a Reader for the PatchTenantUsingPATCH structure.
type PatchTenantUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchTenantUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchTenantUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchTenantUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchTenantUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchTenantUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchTenantUsingPATCHOK creates a PatchTenantUsingPATCHOK with default headers values
func NewPatchTenantUsingPATCHOK() *PatchTenantUsingPATCHOK {
	return &PatchTenantUsingPATCHOK{}
}

/*PatchTenantUsingPATCHOK handles this case with default header values.

OK
*/
type PatchTenantUsingPATCHOK struct {
	Payload *models.SessionDto
}

func (o *PatchTenantUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /sessions/current][%d] patchTenantUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchTenantUsingPATCHOK) GetPayload() *models.SessionDto {
	return o.Payload
}

func (o *PatchTenantUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTenantUsingPATCHNoContent creates a PatchTenantUsingPATCHNoContent with default headers values
func NewPatchTenantUsingPATCHNoContent() *PatchTenantUsingPATCHNoContent {
	return &PatchTenantUsingPATCHNoContent{}
}

/*PatchTenantUsingPATCHNoContent handles this case with default header values.

No Content
*/
type PatchTenantUsingPATCHNoContent struct {
}

func (o *PatchTenantUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /sessions/current][%d] patchTenantUsingPATCHNoContent ", 204)
}

func (o *PatchTenantUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchTenantUsingPATCHUnauthorized creates a PatchTenantUsingPATCHUnauthorized with default headers values
func NewPatchTenantUsingPATCHUnauthorized() *PatchTenantUsingPATCHUnauthorized {
	return &PatchTenantUsingPATCHUnauthorized{}
}

/*PatchTenantUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchTenantUsingPATCHUnauthorized struct {
}

func (o *PatchTenantUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /sessions/current][%d] patchTenantUsingPATCHUnauthorized ", 401)
}

func (o *PatchTenantUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchTenantUsingPATCHForbidden creates a PatchTenantUsingPATCHForbidden with default headers values
func NewPatchTenantUsingPATCHForbidden() *PatchTenantUsingPATCHForbidden {
	return &PatchTenantUsingPATCHForbidden{}
}

/*PatchTenantUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type PatchTenantUsingPATCHForbidden struct {
}

func (o *PatchTenantUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /sessions/current][%d] patchTenantUsingPATCHForbidden ", 403)
}

func (o *PatchTenantUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
