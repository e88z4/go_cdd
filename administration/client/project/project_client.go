// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddPartiesToProjectUsingPOST(params *AddPartiesToProjectUsingPOSTParams) (*AddPartiesToProjectUsingPOSTOK, *AddPartiesToProjectUsingPOSTCreated, error)

	CreateProjectUsingPOST(params *CreateProjectUsingPOSTParams) (*CreateProjectUsingPOSTOK, *CreateProjectUsingPOSTCreated, error)

	DeleteProjectUsingDELETE(params *DeleteProjectUsingDELETEParams) (*DeleteProjectUsingDELETEOK, *DeleteProjectUsingDELETENoContent, error)

	GetAllProjectUserGroupsUsingGET(params *GetAllProjectUserGroupsUsingGETParams) (*GetAllProjectUserGroupsUsingGETOK, error)

	GetAllProjectsUsingGET(params *GetAllProjectsUsingGETParams) (*GetAllProjectsUsingGETOK, error)

	GetProjectUsersUsingGET(params *GetProjectUsersUsingGETParams) (*GetProjectUsersUsingGETOK, error)

	GetProjectUsingGET(params *GetProjectUsingGETParams) (*GetProjectUsingGETOK, error)

	RemovePartiesFromProjectUsingDELETE(params *RemovePartiesFromProjectUsingDELETEParams) (*RemovePartiesFromProjectUsingDELETEOK, *RemovePartiesFromProjectUsingDELETENoContent, error)

	RemoveParyFromProjectUsingDELETE(params *RemoveParyFromProjectUsingDELETEParams) (*RemoveParyFromProjectUsingDELETEOK, *RemoveParyFromProjectUsingDELETENoContent, error)

	UpdateProjectUsingPUT(params *UpdateProjectUsingPUTParams) (*UpdateProjectUsingPUTOK, *UpdateProjectUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddPartiesToProjectUsingPOST creates an association between a specific project and a collection of parties

  Every party must include party ID and Role ID
*/
func (a *Client) AddPartiesToProjectUsingPOST(params *AddPartiesToProjectUsingPOSTParams) (*AddPartiesToProjectUsingPOSTOK, *AddPartiesToProjectUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPartiesToProjectUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addPartiesToProjectUsingPOST",
		Method:             "POST",
		PathPattern:        "/projects/{projectId}/parties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPartiesToProjectUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddPartiesToProjectUsingPOSTOK:
		return value, nil, nil
	case *AddPartiesToProjectUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectUsingPOST creates project
*/
func (a *Client) CreateProjectUsingPOST(params *CreateProjectUsingPOSTParams) (*CreateProjectUsingPOSTOK, *CreateProjectUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectUsingPOST",
		Method:             "POST",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProjectUsingPOSTOK:
		return value, nil, nil
	case *CreateProjectUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProjectUsingDELETE deletes a project
*/
func (a *Client) DeleteProjectUsingDELETE(params *DeleteProjectUsingDELETEParams) (*DeleteProjectUsingDELETEOK, *DeleteProjectUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProjectUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProjectUsingDELETEOK:
		return value, nil, nil
	case *DeleteProjectUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllProjectUserGroupsUsingGET retrieves all project user groups
*/
func (a *Client) GetAllProjectUserGroupsUsingGET(params *GetAllProjectUserGroupsUsingGETParams) (*GetAllProjectUserGroupsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProjectUserGroupsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllProjectUserGroupsUsingGET",
		Method:             "GET",
		PathPattern:        "/projects/user-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllProjectUserGroupsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProjectUserGroupsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProjectUserGroupsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllProjectsUsingGET retrieves all projects
*/
func (a *Client) GetAllProjectsUsingGET(params *GetAllProjectsUsingGETParams) (*GetAllProjectsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProjectsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllProjectsUsingGET",
		Method:             "GET",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllProjectsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProjectsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProjectsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectUsersUsingGET retrieves all users for project
*/
func (a *Client) GetProjectUsersUsingGET(params *GetProjectUsersUsingGETParams) (*GetProjectUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectUsersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/projects/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectUsersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectUsingGET retrieves a project
*/
func (a *Client) GetProjectUsingGET(params *GetProjectUsingGETParams) (*GetProjectUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectUsingGET",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemovePartiesFromProjectUsingDELETE deletes multiple parties to project association
*/
func (a *Client) RemovePartiesFromProjectUsingDELETE(params *RemovePartiesFromProjectUsingDELETEParams) (*RemovePartiesFromProjectUsingDELETEOK, *RemovePartiesFromProjectUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemovePartiesFromProjectUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removePartiesFromProjectUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/parties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemovePartiesFromProjectUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemovePartiesFromProjectUsingDELETEOK:
		return value, nil, nil
	case *RemovePartiesFromProjectUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveParyFromProjectUsingDELETE deletes party to project association
*/
func (a *Client) RemoveParyFromProjectUsingDELETE(params *RemoveParyFromProjectUsingDELETEParams) (*RemoveParyFromProjectUsingDELETEOK, *RemoveParyFromProjectUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveParyFromProjectUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeParyFromProjectUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/projects/{projectId}/parties/{partyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveParyFromProjectUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveParyFromProjectUsingDELETEOK:
		return value, nil, nil
	case *RemoveParyFromProjectUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectUsingPUT updates a project
*/
func (a *Client) UpdateProjectUsingPUT(params *UpdateProjectUsingPUTParams) (*UpdateProjectUsingPUTOK, *UpdateProjectUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectUsingPUT",
		Method:             "PUT",
		PathPattern:        "/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProjectUsingPUTOK:
		return value, nil, nil
	case *UpdateProjectUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
