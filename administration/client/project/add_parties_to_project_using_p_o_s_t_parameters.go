// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewAddPartiesToProjectUsingPOSTParams creates a new AddPartiesToProjectUsingPOSTParams object
// with the default values initialized.
func NewAddPartiesToProjectUsingPOSTParams() *AddPartiesToProjectUsingPOSTParams {
	var ()
	return &AddPartiesToProjectUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddPartiesToProjectUsingPOSTParamsWithTimeout creates a new AddPartiesToProjectUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddPartiesToProjectUsingPOSTParamsWithTimeout(timeout time.Duration) *AddPartiesToProjectUsingPOSTParams {
	var ()
	return &AddPartiesToProjectUsingPOSTParams{

		timeout: timeout,
	}
}

// NewAddPartiesToProjectUsingPOSTParamsWithContext creates a new AddPartiesToProjectUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddPartiesToProjectUsingPOSTParamsWithContext(ctx context.Context) *AddPartiesToProjectUsingPOSTParams {
	var ()
	return &AddPartiesToProjectUsingPOSTParams{

		Context: ctx,
	}
}

// NewAddPartiesToProjectUsingPOSTParamsWithHTTPClient creates a new AddPartiesToProjectUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddPartiesToProjectUsingPOSTParamsWithHTTPClient(client *http.Client) *AddPartiesToProjectUsingPOSTParams {
	var ()
	return &AddPartiesToProjectUsingPOSTParams{
		HTTPClient: client,
	}
}

/*AddPartiesToProjectUsingPOSTParams contains all the parameters to send to the API endpoint
for the add parties to project using p o s t operation typically these are written to a http.Request
*/
type AddPartiesToProjectUsingPOSTParams struct {

	/*Parties
	  parties

	*/
	Parties []*models.PartyDto
	/*ProjectID
	  projectId

	*/
	ProjectID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) WithTimeout(timeout time.Duration) *AddPartiesToProjectUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) WithContext(ctx context.Context) *AddPartiesToProjectUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) WithHTTPClient(client *http.Client) *AddPartiesToProjectUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithParties adds the parties to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) WithParties(parties []*models.PartyDto) *AddPartiesToProjectUsingPOSTParams {
	o.SetParties(parties)
	return o
}

// SetParties adds the parties to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) SetParties(parties []*models.PartyDto) {
	o.Parties = parties
}

// WithProjectID adds the projectID to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) WithProjectID(projectID int64) *AddPartiesToProjectUsingPOSTParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the add parties to project using p o s t params
func (o *AddPartiesToProjectUsingPOSTParams) SetProjectID(projectID int64) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *AddPartiesToProjectUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Parties != nil {
		if err := r.SetBodyParam(o.Parties); err != nil {
			return err
		}
	}

	// path param projectId
	if err := r.SetPathParam("projectId", swag.FormatInt64(o.ProjectID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
