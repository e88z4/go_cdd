// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetProjectUsingGETReader is a Reader for the GetProjectUsingGET structure.
type GetProjectUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetProjectUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProjectUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetProjectUsingGETOK creates a GetProjectUsingGETOK with default headers values
func NewGetProjectUsingGETOK() *GetProjectUsingGETOK {
	return &GetProjectUsingGETOK{}
}

/*GetProjectUsingGETOK handles this case with default header values.

OK
*/
type GetProjectUsingGETOK struct {
	Payload *models.ProjectDto
}

func (o *GetProjectUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /projects/{projectId}][%d] getProjectUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetProjectUsingGETOK) GetPayload() *models.ProjectDto {
	return o.Payload
}

func (o *GetProjectUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectUsingGETUnauthorized creates a GetProjectUsingGETUnauthorized with default headers values
func NewGetProjectUsingGETUnauthorized() *GetProjectUsingGETUnauthorized {
	return &GetProjectUsingGETUnauthorized{}
}

/*GetProjectUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetProjectUsingGETUnauthorized struct {
}

func (o *GetProjectUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{projectId}][%d] getProjectUsingGETUnauthorized ", 401)
}

func (o *GetProjectUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProjectUsingGETForbidden creates a GetProjectUsingGETForbidden with default headers values
func NewGetProjectUsingGETForbidden() *GetProjectUsingGETForbidden {
	return &GetProjectUsingGETForbidden{}
}

/*GetProjectUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetProjectUsingGETForbidden struct {
}

func (o *GetProjectUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{projectId}][%d] getProjectUsingGETForbidden ", 403)
}

func (o *GetProjectUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProjectUsingGETNotFound creates a GetProjectUsingGETNotFound with default headers values
func NewGetProjectUsingGETNotFound() *GetProjectUsingGETNotFound {
	return &GetProjectUsingGETNotFound{}
}

/*GetProjectUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetProjectUsingGETNotFound struct {
}

func (o *GetProjectUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{projectId}][%d] getProjectUsingGETNotFound ", 404)
}

func (o *GetProjectUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
