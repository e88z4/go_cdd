// Code generated by go-swagger; DO NOT EDIT.

package maintenance_window

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewPatchMaintenanceWindowUsingPATCHParams creates a new PatchMaintenanceWindowUsingPATCHParams object
// with the default values initialized.
func NewPatchMaintenanceWindowUsingPATCHParams() *PatchMaintenanceWindowUsingPATCHParams {
	var ()
	return &PatchMaintenanceWindowUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchMaintenanceWindowUsingPATCHParamsWithTimeout creates a new PatchMaintenanceWindowUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchMaintenanceWindowUsingPATCHParamsWithTimeout(timeout time.Duration) *PatchMaintenanceWindowUsingPATCHParams {
	var ()
	return &PatchMaintenanceWindowUsingPATCHParams{

		timeout: timeout,
	}
}

// NewPatchMaintenanceWindowUsingPATCHParamsWithContext creates a new PatchMaintenanceWindowUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchMaintenanceWindowUsingPATCHParamsWithContext(ctx context.Context) *PatchMaintenanceWindowUsingPATCHParams {
	var ()
	return &PatchMaintenanceWindowUsingPATCHParams{

		Context: ctx,
	}
}

// NewPatchMaintenanceWindowUsingPATCHParamsWithHTTPClient creates a new PatchMaintenanceWindowUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchMaintenanceWindowUsingPATCHParamsWithHTTPClient(client *http.Client) *PatchMaintenanceWindowUsingPATCHParams {
	var ()
	return &PatchMaintenanceWindowUsingPATCHParams{
		HTTPClient: client,
	}
}

/*PatchMaintenanceWindowUsingPATCHParams contains all the parameters to send to the API endpoint
for the patch maintenance window using p a t c h operation typically these are written to a http.Request
*/
type PatchMaintenanceWindowUsingPATCHParams struct {

	/*MaintenanceWindowDto
	  maintenanceWindowDto

	*/
	MaintenanceWindowDto *models.MaintenanceWindowDto
	/*MaintenanceWindowID
	  maintenanceWindowId

	*/
	MaintenanceWindowID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) WithTimeout(timeout time.Duration) *PatchMaintenanceWindowUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) WithContext(ctx context.Context) *PatchMaintenanceWindowUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) WithHTTPClient(client *http.Client) *PatchMaintenanceWindowUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaintenanceWindowDto adds the maintenanceWindowDto to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) WithMaintenanceWindowDto(maintenanceWindowDto *models.MaintenanceWindowDto) *PatchMaintenanceWindowUsingPATCHParams {
	o.SetMaintenanceWindowDto(maintenanceWindowDto)
	return o
}

// SetMaintenanceWindowDto adds the maintenanceWindowDto to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) SetMaintenanceWindowDto(maintenanceWindowDto *models.MaintenanceWindowDto) {
	o.MaintenanceWindowDto = maintenanceWindowDto
}

// WithMaintenanceWindowID adds the maintenanceWindowID to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) WithMaintenanceWindowID(maintenanceWindowID int64) *PatchMaintenanceWindowUsingPATCHParams {
	o.SetMaintenanceWindowID(maintenanceWindowID)
	return o
}

// SetMaintenanceWindowID adds the maintenanceWindowId to the patch maintenance window using p a t c h params
func (o *PatchMaintenanceWindowUsingPATCHParams) SetMaintenanceWindowID(maintenanceWindowID int64) {
	o.MaintenanceWindowID = maintenanceWindowID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchMaintenanceWindowUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaintenanceWindowDto != nil {
		if err := r.SetBodyParam(o.MaintenanceWindowDto); err != nil {
			return err
		}
	}

	// path param maintenanceWindowId
	if err := r.SetPathParam("maintenanceWindowId", swag.FormatInt64(o.MaintenanceWindowID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
