// Code generated by go-swagger; DO NOT EDIT.

package maintenance_window

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new maintenance window API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for maintenance window API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMaintenanceWindowUsingPOST(params *CreateMaintenanceWindowUsingPOSTParams) (*CreateMaintenanceWindowUsingPOSTOK, *CreateMaintenanceWindowUsingPOSTCreated, error)

	DeleteMaintenanceWindowUsingDELETE(params *DeleteMaintenanceWindowUsingDELETEParams) (*DeleteMaintenanceWindowUsingDELETEOK, *DeleteMaintenanceWindowUsingDELETENoContent, error)

	GetMaintenanceWindowUsingGET(params *GetMaintenanceWindowUsingGETParams) (*GetMaintenanceWindowUsingGETOK, error)

	GetMaintenanceWindowsUsingGET(params *GetMaintenanceWindowsUsingGETParams) (*GetMaintenanceWindowsUsingGETOK, error)

	PatchMaintenanceWindowUsingPATCH(params *PatchMaintenanceWindowUsingPATCHParams) (*PatchMaintenanceWindowUsingPATCHOK, *PatchMaintenanceWindowUsingPATCHNoContent, error)

	UpdateMaintenanceWindowUsingPUT(params *UpdateMaintenanceWindowUsingPUTParams) (*UpdateMaintenanceWindowUsingPUTOK, *UpdateMaintenanceWindowUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMaintenanceWindowUsingPOST creates a maintenance window
*/
func (a *Client) CreateMaintenanceWindowUsingPOST(params *CreateMaintenanceWindowUsingPOSTParams) (*CreateMaintenanceWindowUsingPOSTOK, *CreateMaintenanceWindowUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMaintenanceWindowUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMaintenanceWindowUsingPOST",
		Method:             "POST",
		PathPattern:        "/maintenance-windows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMaintenanceWindowUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateMaintenanceWindowUsingPOSTOK:
		return value, nil, nil
	case *CreateMaintenanceWindowUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for maintenance_window: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMaintenanceWindowUsingDELETE deletes a maintenance window
*/
func (a *Client) DeleteMaintenanceWindowUsingDELETE(params *DeleteMaintenanceWindowUsingDELETEParams) (*DeleteMaintenanceWindowUsingDELETEOK, *DeleteMaintenanceWindowUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMaintenanceWindowUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMaintenanceWindowUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/maintenance-windows/{maintenanceWindowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMaintenanceWindowUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteMaintenanceWindowUsingDELETEOK:
		return value, nil, nil
	case *DeleteMaintenanceWindowUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for maintenance_window: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMaintenanceWindowUsingGET retrieves a maintenance window
*/
func (a *Client) GetMaintenanceWindowUsingGET(params *GetMaintenanceWindowUsingGETParams) (*GetMaintenanceWindowUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMaintenanceWindowUsingGET",
		Method:             "GET",
		PathPattern:        "/maintenance-windows/{maintenanceWindowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMaintenanceWindowUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMaintenanceWindowUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMaintenanceWindowUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMaintenanceWindowsUsingGET retrieves all maintenance windows
*/
func (a *Client) GetMaintenanceWindowsUsingGET(params *GetMaintenanceWindowsUsingGETParams) (*GetMaintenanceWindowsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMaintenanceWindowsUsingGET",
		Method:             "GET",
		PathPattern:        "/maintenance-windows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMaintenanceWindowsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMaintenanceWindowsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMaintenanceWindowsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchMaintenanceWindowUsingPATCH changes a maintenance window
*/
func (a *Client) PatchMaintenanceWindowUsingPATCH(params *PatchMaintenanceWindowUsingPATCHParams) (*PatchMaintenanceWindowUsingPATCHOK, *PatchMaintenanceWindowUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMaintenanceWindowUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchMaintenanceWindowUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/maintenance-windows/{maintenanceWindowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchMaintenanceWindowUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchMaintenanceWindowUsingPATCHOK:
		return value, nil, nil
	case *PatchMaintenanceWindowUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for maintenance_window: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMaintenanceWindowUsingPUT updates a maintenance window
*/
func (a *Client) UpdateMaintenanceWindowUsingPUT(params *UpdateMaintenanceWindowUsingPUTParams) (*UpdateMaintenanceWindowUsingPUTOK, *UpdateMaintenanceWindowUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMaintenanceWindowUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMaintenanceWindowUsingPUT",
		Method:             "PUT",
		PathPattern:        "/maintenance-windows/{maintenanceWindowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMaintenanceWindowUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMaintenanceWindowUsingPUTOK:
		return value, nil, nil
	case *UpdateMaintenanceWindowUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for maintenance_window: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
