// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAPIDocumentationUsingGETParams creates a new GetAPIDocumentationUsingGETParams object
// with the default values initialized.
func NewGetAPIDocumentationUsingGETParams() *GetAPIDocumentationUsingGETParams {
	var ()
	return &GetAPIDocumentationUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIDocumentationUsingGETParamsWithTimeout creates a new GetAPIDocumentationUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAPIDocumentationUsingGETParamsWithTimeout(timeout time.Duration) *GetAPIDocumentationUsingGETParams {
	var ()
	return &GetAPIDocumentationUsingGETParams{

		timeout: timeout,
	}
}

// NewGetAPIDocumentationUsingGETParamsWithContext creates a new GetAPIDocumentationUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAPIDocumentationUsingGETParamsWithContext(ctx context.Context) *GetAPIDocumentationUsingGETParams {
	var ()
	return &GetAPIDocumentationUsingGETParams{

		Context: ctx,
	}
}

// NewGetAPIDocumentationUsingGETParamsWithHTTPClient creates a new GetAPIDocumentationUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAPIDocumentationUsingGETParamsWithHTTPClient(client *http.Client) *GetAPIDocumentationUsingGETParams {
	var ()
	return &GetAPIDocumentationUsingGETParams{
		HTTPClient: client,
	}
}

/*GetAPIDocumentationUsingGETParams contains all the parameters to send to the API endpoint
for the get Api documentation using g e t operation typically these are written to a http.Request
*/
type GetAPIDocumentationUsingGETParams struct {

	/*Group
	  groupName

	*/
	Group *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) WithTimeout(timeout time.Duration) *GetAPIDocumentationUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) WithContext(ctx context.Context) *GetAPIDocumentationUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) WithHTTPClient(client *http.Client) *GetAPIDocumentationUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) WithGroup(group *string) *GetAPIDocumentationUsingGETParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the get Api documentation using g e t params
func (o *GetAPIDocumentationUsingGETParams) SetGroup(group *string) {
	o.Group = group
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIDocumentationUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Group != nil {

		// query param group
		var qrGroup string
		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {
			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
