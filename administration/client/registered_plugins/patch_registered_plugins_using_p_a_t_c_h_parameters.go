// Code generated by go-swagger; DO NOT EDIT.

package registered_plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewPatchRegisteredPluginsUsingPATCHParams creates a new PatchRegisteredPluginsUsingPATCHParams object
// with the default values initialized.
func NewPatchRegisteredPluginsUsingPATCHParams() *PatchRegisteredPluginsUsingPATCHParams {
	var ()
	return &PatchRegisteredPluginsUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchRegisteredPluginsUsingPATCHParamsWithTimeout creates a new PatchRegisteredPluginsUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchRegisteredPluginsUsingPATCHParamsWithTimeout(timeout time.Duration) *PatchRegisteredPluginsUsingPATCHParams {
	var ()
	return &PatchRegisteredPluginsUsingPATCHParams{

		timeout: timeout,
	}
}

// NewPatchRegisteredPluginsUsingPATCHParamsWithContext creates a new PatchRegisteredPluginsUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchRegisteredPluginsUsingPATCHParamsWithContext(ctx context.Context) *PatchRegisteredPluginsUsingPATCHParams {
	var ()
	return &PatchRegisteredPluginsUsingPATCHParams{

		Context: ctx,
	}
}

// NewPatchRegisteredPluginsUsingPATCHParamsWithHTTPClient creates a new PatchRegisteredPluginsUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchRegisteredPluginsUsingPATCHParamsWithHTTPClient(client *http.Client) *PatchRegisteredPluginsUsingPATCHParams {
	var ()
	return &PatchRegisteredPluginsUsingPATCHParams{
		HTTPClient: client,
	}
}

/*PatchRegisteredPluginsUsingPATCHParams contains all the parameters to send to the API endpoint
for the patch registered plugins using p a t c h operation typically these are written to a http.Request
*/
type PatchRegisteredPluginsUsingPATCHParams struct {

	/*RegisteredPlugins
	  registeredPlugins

	*/
	RegisteredPlugins *models.RegisteredPluginDtoList

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) WithTimeout(timeout time.Duration) *PatchRegisteredPluginsUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) WithContext(ctx context.Context) *PatchRegisteredPluginsUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) WithHTTPClient(client *http.Client) *PatchRegisteredPluginsUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegisteredPlugins adds the registeredPlugins to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) WithRegisteredPlugins(registeredPlugins *models.RegisteredPluginDtoList) *PatchRegisteredPluginsUsingPATCHParams {
	o.SetRegisteredPlugins(registeredPlugins)
	return o
}

// SetRegisteredPlugins adds the registeredPlugins to the patch registered plugins using p a t c h params
func (o *PatchRegisteredPluginsUsingPATCHParams) SetRegisteredPlugins(registeredPlugins *models.RegisteredPluginDtoList) {
	o.RegisteredPlugins = registeredPlugins
}

// WriteToRequest writes these params to a swagger request
func (o *PatchRegisteredPluginsUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RegisteredPlugins != nil {
		if err := r.SetBodyParam(o.RegisteredPlugins); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
