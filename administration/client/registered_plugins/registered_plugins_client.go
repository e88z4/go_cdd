// Code generated by go-swagger; DO NOT EDIT.

package registered_plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new registered plugins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registered plugins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAutoRegisterPluginUsingPOST(params *CreateAutoRegisterPluginUsingPOSTParams) (*CreateAutoRegisterPluginUsingPOSTOK, *CreateAutoRegisterPluginUsingPOSTCreated, error)

	DeleteAutoRegisterPluginUsingDELETE(params *DeleteAutoRegisterPluginUsingDELETEParams) (*DeleteAutoRegisterPluginUsingDELETEOK, *DeleteAutoRegisterPluginUsingDELETENoContent, error)

	GetAutoRegisterPluginsUsingGET(params *GetAutoRegisterPluginsUsingGETParams) (*GetAutoRegisterPluginsUsingGETOK, error)

	PatchRegisteredPluginsUsingPATCH(params *PatchRegisteredPluginsUsingPATCHParams) (*PatchRegisteredPluginsUsingPATCHOK, *PatchRegisteredPluginsUsingPATCHNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAutoRegisterPluginUsingPOST creates registered plugin
*/
func (a *Client) CreateAutoRegisterPluginUsingPOST(params *CreateAutoRegisterPluginUsingPOSTParams) (*CreateAutoRegisterPluginUsingPOSTOK, *CreateAutoRegisterPluginUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAutoRegisterPluginUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAutoRegisterPluginUsingPOST",
		Method:             "POST",
		PathPattern:        "/registered-plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAutoRegisterPluginUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAutoRegisterPluginUsingPOSTOK:
		return value, nil, nil
	case *CreateAutoRegisterPluginUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registered_plugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAutoRegisterPluginUsingDELETE deletes a registered plugin
*/
func (a *Client) DeleteAutoRegisterPluginUsingDELETE(params *DeleteAutoRegisterPluginUsingDELETEParams) (*DeleteAutoRegisterPluginUsingDELETEOK, *DeleteAutoRegisterPluginUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAutoRegisterPluginUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAutoRegisterPluginUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/registered-plugins/{registeredPluginId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAutoRegisterPluginUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAutoRegisterPluginUsingDELETEOK:
		return value, nil, nil
	case *DeleteAutoRegisterPluginUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registered_plugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAutoRegisterPluginsUsingGET retrieves all registered plugins
*/
func (a *Client) GetAutoRegisterPluginsUsingGET(params *GetAutoRegisterPluginsUsingGETParams) (*GetAutoRegisterPluginsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoRegisterPluginsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAutoRegisterPluginsUsingGET",
		Method:             "GET",
		PathPattern:        "/registered-plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutoRegisterPluginsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutoRegisterPluginsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAutoRegisterPluginsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRegisteredPluginsUsingPATCH patches registered plugins
*/
func (a *Client) PatchRegisteredPluginsUsingPATCH(params *PatchRegisteredPluginsUsingPATCHParams) (*PatchRegisteredPluginsUsingPATCHOK, *PatchRegisteredPluginsUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRegisteredPluginsUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRegisteredPluginsUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/registered-plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRegisteredPluginsUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchRegisteredPluginsUsingPATCHOK:
		return value, nil, nil
	case *PatchRegisteredPluginsUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registered_plugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
