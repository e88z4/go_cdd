// Code generated by go-swagger; DO NOT EDIT.

package log_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLogsUsingGETParams creates a new GetLogsUsingGETParams object
// with the default values initialized.
func NewGetLogsUsingGETParams() *GetLogsUsingGETParams {
	var ()
	return &GetLogsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogsUsingGETParamsWithTimeout creates a new GetLogsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLogsUsingGETParamsWithTimeout(timeout time.Duration) *GetLogsUsingGETParams {
	var ()
	return &GetLogsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetLogsUsingGETParamsWithContext creates a new GetLogsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLogsUsingGETParamsWithContext(ctx context.Context) *GetLogsUsingGETParams {
	var ()
	return &GetLogsUsingGETParams{

		Context: ctx,
	}
}

// NewGetLogsUsingGETParamsWithHTTPClient creates a new GetLogsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLogsUsingGETParamsWithHTTPClient(client *http.Client) *GetLogsUsingGETParams {
	var ()
	return &GetLogsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetLogsUsingGETParams contains all the parameters to send to the API endpoint
for the get logs using g e t operation typically these are written to a http.Request
*/
type GetLogsUsingGETParams struct {

	/*DispositionType
	  dispositionTypeDto

	*/
	DispositionType *string
	/*Folder
	  requestedFolder

	*/
	Folder *string
	/*PageNumber
	  pageNumber

	*/
	PageNumber *int32
	/*PageSize
	  pageSize

	*/
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get logs using g e t params
func (o *GetLogsUsingGETParams) WithTimeout(timeout time.Duration) *GetLogsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get logs using g e t params
func (o *GetLogsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get logs using g e t params
func (o *GetLogsUsingGETParams) WithContext(ctx context.Context) *GetLogsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get logs using g e t params
func (o *GetLogsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get logs using g e t params
func (o *GetLogsUsingGETParams) WithHTTPClient(client *http.Client) *GetLogsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get logs using g e t params
func (o *GetLogsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDispositionType adds the dispositionType to the get logs using g e t params
func (o *GetLogsUsingGETParams) WithDispositionType(dispositionType *string) *GetLogsUsingGETParams {
	o.SetDispositionType(dispositionType)
	return o
}

// SetDispositionType adds the dispositionType to the get logs using g e t params
func (o *GetLogsUsingGETParams) SetDispositionType(dispositionType *string) {
	o.DispositionType = dispositionType
}

// WithFolder adds the folder to the get logs using g e t params
func (o *GetLogsUsingGETParams) WithFolder(folder *string) *GetLogsUsingGETParams {
	o.SetFolder(folder)
	return o
}

// SetFolder adds the folder to the get logs using g e t params
func (o *GetLogsUsingGETParams) SetFolder(folder *string) {
	o.Folder = folder
}

// WithPageNumber adds the pageNumber to the get logs using g e t params
func (o *GetLogsUsingGETParams) WithPageNumber(pageNumber *int32) *GetLogsUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get logs using g e t params
func (o *GetLogsUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get logs using g e t params
func (o *GetLogsUsingGETParams) WithPageSize(pageSize *int32) *GetLogsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get logs using g e t params
func (o *GetLogsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DispositionType != nil {

		// query param disposition_type
		var qrDispositionType string
		if o.DispositionType != nil {
			qrDispositionType = *o.DispositionType
		}
		qDispositionType := qrDispositionType
		if qDispositionType != "" {
			if err := r.SetQueryParam("disposition_type", qDispositionType); err != nil {
				return err
			}
		}

	}

	if o.Folder != nil {

		// query param folder
		var qrFolder string
		if o.Folder != nil {
			qrFolder = *o.Folder
		}
		qFolder := qrFolder
		if qFolder != "" {
			if err := r.SetQueryParam("folder", qFolder); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page_number
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page_number", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
