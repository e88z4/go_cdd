// Code generated by go-swagger; DO NOT EDIT.

package email_notification_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new email notification server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for email notification server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEmailNotificationServerUsingPOST(params *CreateEmailNotificationServerUsingPOSTParams) (*CreateEmailNotificationServerUsingPOSTOK, *CreateEmailNotificationServerUsingPOSTCreated, error)

	DeleteEmailNotificationServerUsingDELETE(params *DeleteEmailNotificationServerUsingDELETEParams) (*DeleteEmailNotificationServerUsingDELETEOK, *DeleteEmailNotificationServerUsingDELETENoContent, error)

	DeleteEmailNotificationServersUsingDELETE(params *DeleteEmailNotificationServersUsingDELETEParams) (*DeleteEmailNotificationServersUsingDELETEOK, *DeleteEmailNotificationServersUsingDELETENoContent, error)

	GetEmailNotificationServerUsingGET(params *GetEmailNotificationServerUsingGETParams) (*GetEmailNotificationServerUsingGETOK, error)

	GetEmailNotificationServersUsingGET(params *GetEmailNotificationServersUsingGETParams) (*GetEmailNotificationServersUsingGETOK, error)

	PatchEmailNotificationServerUsingPATCH(params *PatchEmailNotificationServerUsingPATCHParams) (*PatchEmailNotificationServerUsingPATCHOK, *PatchEmailNotificationServerUsingPATCHNoContent, error)

	TestEmailNotificationServerConnectivityUsingPOST(params *TestEmailNotificationServerConnectivityUsingPOSTParams) (*TestEmailNotificationServerConnectivityUsingPOSTOK, *TestEmailNotificationServerConnectivityUsingPOSTCreated, error)

	UpdateEmailNotificationServerUsingPUT(params *UpdateEmailNotificationServerUsingPUTParams) (*UpdateEmailNotificationServerUsingPUTOK, *UpdateEmailNotificationServerUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEmailNotificationServerUsingPOST creates a new email notification server definition
*/
func (a *Client) CreateEmailNotificationServerUsingPOST(params *CreateEmailNotificationServerUsingPOSTParams) (*CreateEmailNotificationServerUsingPOSTOK, *CreateEmailNotificationServerUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmailNotificationServerUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEmailNotificationServerUsingPOST",
		Method:             "POST",
		PathPattern:        "/email-notification-servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEmailNotificationServerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEmailNotificationServerUsingPOSTOK:
		return value, nil, nil
	case *CreateEmailNotificationServerUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_notification_server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEmailNotificationServerUsingDELETE deletes an email notification definition
*/
func (a *Client) DeleteEmailNotificationServerUsingDELETE(params *DeleteEmailNotificationServerUsingDELETEParams) (*DeleteEmailNotificationServerUsingDELETEOK, *DeleteEmailNotificationServerUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmailNotificationServerUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEmailNotificationServerUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/email-notification-servers/{emailNotificationServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEmailNotificationServerUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEmailNotificationServerUsingDELETEOK:
		return value, nil, nil
	case *DeleteEmailNotificationServerUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_notification_server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEmailNotificationServersUsingDELETE deletes all email notification definitions
*/
func (a *Client) DeleteEmailNotificationServersUsingDELETE(params *DeleteEmailNotificationServersUsingDELETEParams) (*DeleteEmailNotificationServersUsingDELETEOK, *DeleteEmailNotificationServersUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmailNotificationServersUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEmailNotificationServersUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/email-notification-servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEmailNotificationServersUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEmailNotificationServersUsingDELETEOK:
		return value, nil, nil
	case *DeleteEmailNotificationServersUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_notification_server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmailNotificationServerUsingGET retrieves an email notification server definition
*/
func (a *Client) GetEmailNotificationServerUsingGET(params *GetEmailNotificationServerUsingGETParams) (*GetEmailNotificationServerUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailNotificationServerUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailNotificationServerUsingGET",
		Method:             "GET",
		PathPattern:        "/email-notification-servers/{emailNotificationServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmailNotificationServerUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailNotificationServerUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailNotificationServerUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmailNotificationServersUsingGET retrieves all email notification server definitions
*/
func (a *Client) GetEmailNotificationServersUsingGET(params *GetEmailNotificationServersUsingGETParams) (*GetEmailNotificationServersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailNotificationServersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailNotificationServersUsingGET",
		Method:             "GET",
		PathPattern:        "/email-notification-servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmailNotificationServersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailNotificationServersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailNotificationServersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchEmailNotificationServerUsingPATCH patches an email notification server definition
*/
func (a *Client) PatchEmailNotificationServerUsingPATCH(params *PatchEmailNotificationServerUsingPATCHParams) (*PatchEmailNotificationServerUsingPATCHOK, *PatchEmailNotificationServerUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEmailNotificationServerUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchEmailNotificationServerUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/email-notification-servers/{emailNotificationServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchEmailNotificationServerUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchEmailNotificationServerUsingPATCHOK:
		return value, nil, nil
	case *PatchEmailNotificationServerUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_notification_server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestEmailNotificationServerConnectivityUsingPOST connectivities test for email notification server
*/
func (a *Client) TestEmailNotificationServerConnectivityUsingPOST(params *TestEmailNotificationServerConnectivityUsingPOSTParams) (*TestEmailNotificationServerConnectivityUsingPOSTOK, *TestEmailNotificationServerConnectivityUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestEmailNotificationServerConnectivityUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testEmailNotificationServerConnectivityUsingPOST",
		Method:             "POST",
		PathPattern:        "/email-notification-servers/connectivity-tests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestEmailNotificationServerConnectivityUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TestEmailNotificationServerConnectivityUsingPOSTOK:
		return value, nil, nil
	case *TestEmailNotificationServerConnectivityUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_notification_server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEmailNotificationServerUsingPUT updates an email notification server definition
*/
func (a *Client) UpdateEmailNotificationServerUsingPUT(params *UpdateEmailNotificationServerUsingPUTParams) (*UpdateEmailNotificationServerUsingPUTOK, *UpdateEmailNotificationServerUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmailNotificationServerUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEmailNotificationServerUsingPUT",
		Method:             "PUT",
		PathPattern:        "/email-notification-servers/{emailNotificationServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEmailNotificationServerUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEmailNotificationServerUsingPUTOK:
		return value, nil, nil
	case *UpdateEmailNotificationServerUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_notification_server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
