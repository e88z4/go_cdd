// Code generated by go-swagger; DO NOT EDIT.

package payment_plan_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewHandleChargifyWebhookUsingPOSTParams creates a new HandleChargifyWebhookUsingPOSTParams object
// with the default values initialized.
func NewHandleChargifyWebhookUsingPOSTParams() *HandleChargifyWebhookUsingPOSTParams {
	var ()
	return &HandleChargifyWebhookUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHandleChargifyWebhookUsingPOSTParamsWithTimeout creates a new HandleChargifyWebhookUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHandleChargifyWebhookUsingPOSTParamsWithTimeout(timeout time.Duration) *HandleChargifyWebhookUsingPOSTParams {
	var ()
	return &HandleChargifyWebhookUsingPOSTParams{

		timeout: timeout,
	}
}

// NewHandleChargifyWebhookUsingPOSTParamsWithContext creates a new HandleChargifyWebhookUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewHandleChargifyWebhookUsingPOSTParamsWithContext(ctx context.Context) *HandleChargifyWebhookUsingPOSTParams {
	var ()
	return &HandleChargifyWebhookUsingPOSTParams{

		Context: ctx,
	}
}

// NewHandleChargifyWebhookUsingPOSTParamsWithHTTPClient creates a new HandleChargifyWebhookUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHandleChargifyWebhookUsingPOSTParamsWithHTTPClient(client *http.Client) *HandleChargifyWebhookUsingPOSTParams {
	var ()
	return &HandleChargifyWebhookUsingPOSTParams{
		HTTPClient: client,
	}
}

/*HandleChargifyWebhookUsingPOSTParams contains all the parameters to send to the API endpoint
for the handle chargify webhook using p o s t operation typically these are written to a http.Request
*/
type HandleChargifyWebhookUsingPOSTParams struct {

	/*Payload
	  payload

	*/
	Payload ref

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) WithTimeout(timeout time.Duration) *HandleChargifyWebhookUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) WithContext(ctx context.Context) *HandleChargifyWebhookUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) WithHTTPClient(client *http.Client) *HandleChargifyWebhookUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPayload adds the payload to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) WithPayload(payload ref) *HandleChargifyWebhookUsingPOSTParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the handle chargify webhook using p o s t params
func (o *HandleChargifyWebhookUsingPOSTParams) SetPayload(payload ref) {
	o.Payload = payload
}

// WriteToRequest writes these params to a swagger request
func (o *HandleChargifyWebhookUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param payload
	frPayload := o.Payload
	fPayload := frPayload
	if fPayload != "" {
		if err := r.SetFormParam("payload", fPayload); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
