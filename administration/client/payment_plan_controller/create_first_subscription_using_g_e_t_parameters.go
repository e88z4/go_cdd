// Code generated by go-swagger; DO NOT EDIT.

package payment_plan_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateFirstSubscriptionUsingGETParams creates a new CreateFirstSubscriptionUsingGETParams object
// with the default values initialized.
func NewCreateFirstSubscriptionUsingGETParams() *CreateFirstSubscriptionUsingGETParams {
	var ()
	return &CreateFirstSubscriptionUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateFirstSubscriptionUsingGETParamsWithTimeout creates a new CreateFirstSubscriptionUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateFirstSubscriptionUsingGETParamsWithTimeout(timeout time.Duration) *CreateFirstSubscriptionUsingGETParams {
	var ()
	return &CreateFirstSubscriptionUsingGETParams{

		timeout: timeout,
	}
}

// NewCreateFirstSubscriptionUsingGETParamsWithContext creates a new CreateFirstSubscriptionUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateFirstSubscriptionUsingGETParamsWithContext(ctx context.Context) *CreateFirstSubscriptionUsingGETParams {
	var ()
	return &CreateFirstSubscriptionUsingGETParams{

		Context: ctx,
	}
}

// NewCreateFirstSubscriptionUsingGETParamsWithHTTPClient creates a new CreateFirstSubscriptionUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateFirstSubscriptionUsingGETParamsWithHTTPClient(client *http.Client) *CreateFirstSubscriptionUsingGETParams {
	var ()
	return &CreateFirstSubscriptionUsingGETParams{
		HTTPClient: client,
	}
}

/*CreateFirstSubscriptionUsingGETParams contains all the parameters to send to the API endpoint
for the create first subscription using g e t operation typically these are written to a http.Request
*/
type CreateFirstSubscriptionUsingGETParams struct {

	/*ID
	  subscriptionId

	*/
	ID string
	/*Ref
	  tenantId

	*/
	Ref string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) WithTimeout(timeout time.Duration) *CreateFirstSubscriptionUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) WithContext(ctx context.Context) *CreateFirstSubscriptionUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) WithHTTPClient(client *http.Client) *CreateFirstSubscriptionUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) WithID(id string) *CreateFirstSubscriptionUsingGETParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) SetID(id string) {
	o.ID = id
}

// WithRef adds the ref to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) WithRef(ref string) *CreateFirstSubscriptionUsingGETParams {
	o.SetRef(ref)
	return o
}

// SetRef adds the ref to the create first subscription using g e t params
func (o *CreateFirstSubscriptionUsingGETParams) SetRef(ref string) {
	o.Ref = ref
}

// WriteToRequest writes these params to a swagger request
func (o *CreateFirstSubscriptionUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param id
	qrID := o.ID
	qID := qrID
	if qID != "" {
		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	// query param ref
	qrRef := o.Ref
	qRef := qrRef
	if qRef != "" {
		if err := r.SetQueryParam("ref", qRef); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
