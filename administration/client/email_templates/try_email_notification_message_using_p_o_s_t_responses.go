// Code generated by go-swagger; DO NOT EDIT.

package email_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// TryEmailNotificationMessageUsingPOSTReader is a Reader for the TryEmailNotificationMessageUsingPOST structure.
type TryEmailNotificationMessageUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TryEmailNotificationMessageUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTryEmailNotificationMessageUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewTryEmailNotificationMessageUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewTryEmailNotificationMessageUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTryEmailNotificationMessageUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTryEmailNotificationMessageUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTryEmailNotificationMessageUsingPOSTOK creates a TryEmailNotificationMessageUsingPOSTOK with default headers values
func NewTryEmailNotificationMessageUsingPOSTOK() *TryEmailNotificationMessageUsingPOSTOK {
	return &TryEmailNotificationMessageUsingPOSTOK{}
}

/*TryEmailNotificationMessageUsingPOSTOK handles this case with default header values.

OK
*/
type TryEmailNotificationMessageUsingPOSTOK struct {
	Payload *models.EmailNotificationMessageDto
}

func (o *TryEmailNotificationMessageUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /email-notification-messages/{emailNotificationMessageName}/{languageTag}/test-email][%d] tryEmailNotificationMessageUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *TryEmailNotificationMessageUsingPOSTOK) GetPayload() *models.EmailNotificationMessageDto {
	return o.Payload
}

func (o *TryEmailNotificationMessageUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EmailNotificationMessageDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTryEmailNotificationMessageUsingPOSTCreated creates a TryEmailNotificationMessageUsingPOSTCreated with default headers values
func NewTryEmailNotificationMessageUsingPOSTCreated() *TryEmailNotificationMessageUsingPOSTCreated {
	return &TryEmailNotificationMessageUsingPOSTCreated{}
}

/*TryEmailNotificationMessageUsingPOSTCreated handles this case with default header values.

Created
*/
type TryEmailNotificationMessageUsingPOSTCreated struct {
}

func (o *TryEmailNotificationMessageUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /email-notification-messages/{emailNotificationMessageName}/{languageTag}/test-email][%d] tryEmailNotificationMessageUsingPOSTCreated ", 201)
}

func (o *TryEmailNotificationMessageUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTryEmailNotificationMessageUsingPOSTUnauthorized creates a TryEmailNotificationMessageUsingPOSTUnauthorized with default headers values
func NewTryEmailNotificationMessageUsingPOSTUnauthorized() *TryEmailNotificationMessageUsingPOSTUnauthorized {
	return &TryEmailNotificationMessageUsingPOSTUnauthorized{}
}

/*TryEmailNotificationMessageUsingPOSTUnauthorized handles this case with default header values.

Unauthorized
*/
type TryEmailNotificationMessageUsingPOSTUnauthorized struct {
}

func (o *TryEmailNotificationMessageUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /email-notification-messages/{emailNotificationMessageName}/{languageTag}/test-email][%d] tryEmailNotificationMessageUsingPOSTUnauthorized ", 401)
}

func (o *TryEmailNotificationMessageUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTryEmailNotificationMessageUsingPOSTForbidden creates a TryEmailNotificationMessageUsingPOSTForbidden with default headers values
func NewTryEmailNotificationMessageUsingPOSTForbidden() *TryEmailNotificationMessageUsingPOSTForbidden {
	return &TryEmailNotificationMessageUsingPOSTForbidden{}
}

/*TryEmailNotificationMessageUsingPOSTForbidden handles this case with default header values.

Forbidden
*/
type TryEmailNotificationMessageUsingPOSTForbidden struct {
}

func (o *TryEmailNotificationMessageUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /email-notification-messages/{emailNotificationMessageName}/{languageTag}/test-email][%d] tryEmailNotificationMessageUsingPOSTForbidden ", 403)
}

func (o *TryEmailNotificationMessageUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTryEmailNotificationMessageUsingPOSTNotFound creates a TryEmailNotificationMessageUsingPOSTNotFound with default headers values
func NewTryEmailNotificationMessageUsingPOSTNotFound() *TryEmailNotificationMessageUsingPOSTNotFound {
	return &TryEmailNotificationMessageUsingPOSTNotFound{}
}

/*TryEmailNotificationMessageUsingPOSTNotFound handles this case with default header values.

Not Found
*/
type TryEmailNotificationMessageUsingPOSTNotFound struct {
}

func (o *TryEmailNotificationMessageUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /email-notification-messages/{emailNotificationMessageName}/{languageTag}/test-email][%d] tryEmailNotificationMessageUsingPOSTNotFound ", 404)
}

func (o *TryEmailNotificationMessageUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
