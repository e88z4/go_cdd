// Code generated by go-swagger; DO NOT EDIT.

package email_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new email templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for email templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetEmailNotificationMessageUsingGET(params *GetEmailNotificationMessageUsingGETParams) (*GetEmailNotificationMessageUsingGETOK, error)

	GetEmailNotificationMessagesUsingGET(params *GetEmailNotificationMessagesUsingGETParams) (*GetEmailNotificationMessagesUsingGETOK, error)

	GetEmailNotificationTemplateUsingGET(params *GetEmailNotificationTemplateUsingGETParams) (*GetEmailNotificationTemplateUsingGETOK, error)

	GetEmailNotificationTemplatesUsingGET(params *GetEmailNotificationTemplatesUsingGETParams) (*GetEmailNotificationTemplatesUsingGETOK, error)

	PatchEmailNotificationMessageUsingPATCH(params *PatchEmailNotificationMessageUsingPATCHParams) (*PatchEmailNotificationMessageUsingPATCHOK, *PatchEmailNotificationMessageUsingPATCHNoContent, error)

	PatchEmailNotificationTemplateUsingPATCH(params *PatchEmailNotificationTemplateUsingPATCHParams) (*PatchEmailNotificationTemplateUsingPATCHOK, *PatchEmailNotificationTemplateUsingPATCHNoContent, error)

	TryEmailNotificationMessageUsingPOST(params *TryEmailNotificationMessageUsingPOSTParams) (*TryEmailNotificationMessageUsingPOSTOK, *TryEmailNotificationMessageUsingPOSTCreated, error)

	TryEmailNotificationTemplateUsingPOST(params *TryEmailNotificationTemplateUsingPOSTParams) (*TryEmailNotificationTemplateUsingPOSTOK, *TryEmailNotificationTemplateUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetEmailNotificationMessageUsingGET gets an email message template
*/
func (a *Client) GetEmailNotificationMessageUsingGET(params *GetEmailNotificationMessageUsingGETParams) (*GetEmailNotificationMessageUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailNotificationMessageUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailNotificationMessageUsingGET",
		Method:             "GET",
		PathPattern:        "/email-notification-messages/{emailNotificationMessageName}/{languageTag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmailNotificationMessageUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailNotificationMessageUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailNotificationMessageUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmailNotificationMessagesUsingGET gets list of email message templates
*/
func (a *Client) GetEmailNotificationMessagesUsingGET(params *GetEmailNotificationMessagesUsingGETParams) (*GetEmailNotificationMessagesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailNotificationMessagesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailNotificationMessagesUsingGET",
		Method:             "GET",
		PathPattern:        "/email-notification-messages/{languageTag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmailNotificationMessagesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailNotificationMessagesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailNotificationMessagesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmailNotificationTemplateUsingGET gets an email template
*/
func (a *Client) GetEmailNotificationTemplateUsingGET(params *GetEmailNotificationTemplateUsingGETParams) (*GetEmailNotificationTemplateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailNotificationTemplateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailNotificationTemplateUsingGET",
		Method:             "GET",
		PathPattern:        "/email-notification-templates/{emailNotificationTemplateName}/{languageTag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmailNotificationTemplateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailNotificationTemplateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailNotificationTemplateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmailNotificationTemplatesUsingGET gets list of email templates
*/
func (a *Client) GetEmailNotificationTemplatesUsingGET(params *GetEmailNotificationTemplatesUsingGETParams) (*GetEmailNotificationTemplatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailNotificationTemplatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailNotificationTemplatesUsingGET",
		Method:             "GET",
		PathPattern:        "/email-notification-templates/{languageTag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmailNotificationTemplatesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailNotificationTemplatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailNotificationTemplatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchEmailNotificationMessageUsingPATCH patches an email notification
*/
func (a *Client) PatchEmailNotificationMessageUsingPATCH(params *PatchEmailNotificationMessageUsingPATCHParams) (*PatchEmailNotificationMessageUsingPATCHOK, *PatchEmailNotificationMessageUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEmailNotificationMessageUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchEmailNotificationMessageUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/email-notification-messages/{emailNotificationMessageName}/{languageTag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchEmailNotificationMessageUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchEmailNotificationMessageUsingPATCHOK:
		return value, nil, nil
	case *PatchEmailNotificationMessageUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchEmailNotificationTemplateUsingPATCH patches an email template
*/
func (a *Client) PatchEmailNotificationTemplateUsingPATCH(params *PatchEmailNotificationTemplateUsingPATCHParams) (*PatchEmailNotificationTemplateUsingPATCHOK, *PatchEmailNotificationTemplateUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEmailNotificationTemplateUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchEmailNotificationTemplateUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/email-notification-templates/{emailNotificationTemplateName}/{languageTag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchEmailNotificationTemplateUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchEmailNotificationTemplateUsingPATCHOK:
		return value, nil, nil
	case *PatchEmailNotificationTemplateUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TryEmailNotificationMessageUsingPOST tries email notification message
*/
func (a *Client) TryEmailNotificationMessageUsingPOST(params *TryEmailNotificationMessageUsingPOSTParams) (*TryEmailNotificationMessageUsingPOSTOK, *TryEmailNotificationMessageUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTryEmailNotificationMessageUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tryEmailNotificationMessageUsingPOST",
		Method:             "POST",
		PathPattern:        "/email-notification-messages/{emailNotificationMessageName}/{languageTag}/test-email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TryEmailNotificationMessageUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TryEmailNotificationMessageUsingPOSTOK:
		return value, nil, nil
	case *TryEmailNotificationMessageUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TryEmailNotificationTemplateUsingPOST tries email notification template
*/
func (a *Client) TryEmailNotificationTemplateUsingPOST(params *TryEmailNotificationTemplateUsingPOSTParams) (*TryEmailNotificationTemplateUsingPOSTOK, *TryEmailNotificationTemplateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTryEmailNotificationTemplateUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tryEmailNotificationTemplateUsingPOST",
		Method:             "POST",
		PathPattern:        "/email-notification-templates/{emailNotificationTemplateName}/{languageTag}/test-email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TryEmailNotificationTemplateUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TryEmailNotificationTemplateUsingPOSTOK:
		return value, nil, nil
	case *TryEmailNotificationTemplateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for email_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
