// Code generated by go-swagger; DO NOT EDIT.

package email_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewTryEmailNotificationMessageUsingPOSTParams creates a new TryEmailNotificationMessageUsingPOSTParams object
// with the default values initialized.
func NewTryEmailNotificationMessageUsingPOSTParams() *TryEmailNotificationMessageUsingPOSTParams {
	var ()
	return &TryEmailNotificationMessageUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTryEmailNotificationMessageUsingPOSTParamsWithTimeout creates a new TryEmailNotificationMessageUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTryEmailNotificationMessageUsingPOSTParamsWithTimeout(timeout time.Duration) *TryEmailNotificationMessageUsingPOSTParams {
	var ()
	return &TryEmailNotificationMessageUsingPOSTParams{

		timeout: timeout,
	}
}

// NewTryEmailNotificationMessageUsingPOSTParamsWithContext creates a new TryEmailNotificationMessageUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewTryEmailNotificationMessageUsingPOSTParamsWithContext(ctx context.Context) *TryEmailNotificationMessageUsingPOSTParams {
	var ()
	return &TryEmailNotificationMessageUsingPOSTParams{

		Context: ctx,
	}
}

// NewTryEmailNotificationMessageUsingPOSTParamsWithHTTPClient creates a new TryEmailNotificationMessageUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTryEmailNotificationMessageUsingPOSTParamsWithHTTPClient(client *http.Client) *TryEmailNotificationMessageUsingPOSTParams {
	var ()
	return &TryEmailNotificationMessageUsingPOSTParams{
		HTTPClient: client,
	}
}

/*TryEmailNotificationMessageUsingPOSTParams contains all the parameters to send to the API endpoint
for the try email notification message using p o s t operation typically these are written to a http.Request
*/
type TryEmailNotificationMessageUsingPOSTParams struct {

	/*EmailNotificationMessageDto
	  emailNotificationMessageDto

	*/
	EmailNotificationMessageDto *models.EmailNotificationMessageDto
	/*EmailNotificationMessageName
	  msgName

	*/
	EmailNotificationMessageName string
	/*LanguageTag
	  language

	*/
	LanguageTag string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) WithTimeout(timeout time.Duration) *TryEmailNotificationMessageUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) WithContext(ctx context.Context) *TryEmailNotificationMessageUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) WithHTTPClient(client *http.Client) *TryEmailNotificationMessageUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailNotificationMessageDto adds the emailNotificationMessageDto to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) WithEmailNotificationMessageDto(emailNotificationMessageDto *models.EmailNotificationMessageDto) *TryEmailNotificationMessageUsingPOSTParams {
	o.SetEmailNotificationMessageDto(emailNotificationMessageDto)
	return o
}

// SetEmailNotificationMessageDto adds the emailNotificationMessageDto to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) SetEmailNotificationMessageDto(emailNotificationMessageDto *models.EmailNotificationMessageDto) {
	o.EmailNotificationMessageDto = emailNotificationMessageDto
}

// WithEmailNotificationMessageName adds the emailNotificationMessageName to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) WithEmailNotificationMessageName(emailNotificationMessageName string) *TryEmailNotificationMessageUsingPOSTParams {
	o.SetEmailNotificationMessageName(emailNotificationMessageName)
	return o
}

// SetEmailNotificationMessageName adds the emailNotificationMessageName to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) SetEmailNotificationMessageName(emailNotificationMessageName string) {
	o.EmailNotificationMessageName = emailNotificationMessageName
}

// WithLanguageTag adds the languageTag to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) WithLanguageTag(languageTag string) *TryEmailNotificationMessageUsingPOSTParams {
	o.SetLanguageTag(languageTag)
	return o
}

// SetLanguageTag adds the languageTag to the try email notification message using p o s t params
func (o *TryEmailNotificationMessageUsingPOSTParams) SetLanguageTag(languageTag string) {
	o.LanguageTag = languageTag
}

// WriteToRequest writes these params to a swagger request
func (o *TryEmailNotificationMessageUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmailNotificationMessageDto != nil {
		if err := r.SetBodyParam(o.EmailNotificationMessageDto); err != nil {
			return err
		}
	}

	// path param emailNotificationMessageName
	if err := r.SetPathParam("emailNotificationMessageName", o.EmailNotificationMessageName); err != nil {
		return err
	}

	// path param languageTag
	if err := r.SetPathParam("languageTag", o.LanguageTag); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
