// Code generated by go-swagger; DO NOT EDIT.

package directory_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetDirectoryServerUsingGETReader is a Reader for the GetDirectoryServerUsingGET structure.
type GetDirectoryServerUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDirectoryServerUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDirectoryServerUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDirectoryServerUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDirectoryServerUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDirectoryServerUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDirectoryServerUsingGETOK creates a GetDirectoryServerUsingGETOK with default headers values
func NewGetDirectoryServerUsingGETOK() *GetDirectoryServerUsingGETOK {
	return &GetDirectoryServerUsingGETOK{}
}

/*GetDirectoryServerUsingGETOK handles this case with default header values.

OK
*/
type GetDirectoryServerUsingGETOK struct {
	Payload *models.DirectoryServerDto
}

func (o *GetDirectoryServerUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /directory-servers/{directoryServerId}][%d] getDirectoryServerUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDirectoryServerUsingGETOK) GetPayload() *models.DirectoryServerDto {
	return o.Payload
}

func (o *GetDirectoryServerUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DirectoryServerDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDirectoryServerUsingGETUnauthorized creates a GetDirectoryServerUsingGETUnauthorized with default headers values
func NewGetDirectoryServerUsingGETUnauthorized() *GetDirectoryServerUsingGETUnauthorized {
	return &GetDirectoryServerUsingGETUnauthorized{}
}

/*GetDirectoryServerUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDirectoryServerUsingGETUnauthorized struct {
}

func (o *GetDirectoryServerUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /directory-servers/{directoryServerId}][%d] getDirectoryServerUsingGETUnauthorized ", 401)
}

func (o *GetDirectoryServerUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDirectoryServerUsingGETForbidden creates a GetDirectoryServerUsingGETForbidden with default headers values
func NewGetDirectoryServerUsingGETForbidden() *GetDirectoryServerUsingGETForbidden {
	return &GetDirectoryServerUsingGETForbidden{}
}

/*GetDirectoryServerUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetDirectoryServerUsingGETForbidden struct {
}

func (o *GetDirectoryServerUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /directory-servers/{directoryServerId}][%d] getDirectoryServerUsingGETForbidden ", 403)
}

func (o *GetDirectoryServerUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDirectoryServerUsingGETNotFound creates a GetDirectoryServerUsingGETNotFound with default headers values
func NewGetDirectoryServerUsingGETNotFound() *GetDirectoryServerUsingGETNotFound {
	return &GetDirectoryServerUsingGETNotFound{}
}

/*GetDirectoryServerUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetDirectoryServerUsingGETNotFound struct {
}

func (o *GetDirectoryServerUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /directory-servers/{directoryServerId}][%d] getDirectoryServerUsingGETNotFound ", 404)
}

func (o *GetDirectoryServerUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
