// Code generated by go-swagger; DO NOT EDIT.

package directory_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// PatchDirectoryServerUsingPATCHReader is a Reader for the PatchDirectoryServerUsingPATCH structure.
type PatchDirectoryServerUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDirectoryServerUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDirectoryServerUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchDirectoryServerUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchDirectoryServerUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchDirectoryServerUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchDirectoryServerUsingPATCHOK creates a PatchDirectoryServerUsingPATCHOK with default headers values
func NewPatchDirectoryServerUsingPATCHOK() *PatchDirectoryServerUsingPATCHOK {
	return &PatchDirectoryServerUsingPATCHOK{}
}

/*PatchDirectoryServerUsingPATCHOK handles this case with default header values.

OK
*/
type PatchDirectoryServerUsingPATCHOK struct {
	Payload *models.DirectoryServerDto
}

func (o *PatchDirectoryServerUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /directory-servers/{directoryServerId}][%d] patchDirectoryServerUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchDirectoryServerUsingPATCHOK) GetPayload() *models.DirectoryServerDto {
	return o.Payload
}

func (o *PatchDirectoryServerUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DirectoryServerDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDirectoryServerUsingPATCHNoContent creates a PatchDirectoryServerUsingPATCHNoContent with default headers values
func NewPatchDirectoryServerUsingPATCHNoContent() *PatchDirectoryServerUsingPATCHNoContent {
	return &PatchDirectoryServerUsingPATCHNoContent{}
}

/*PatchDirectoryServerUsingPATCHNoContent handles this case with default header values.

No Content
*/
type PatchDirectoryServerUsingPATCHNoContent struct {
}

func (o *PatchDirectoryServerUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /directory-servers/{directoryServerId}][%d] patchDirectoryServerUsingPATCHNoContent ", 204)
}

func (o *PatchDirectoryServerUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDirectoryServerUsingPATCHUnauthorized creates a PatchDirectoryServerUsingPATCHUnauthorized with default headers values
func NewPatchDirectoryServerUsingPATCHUnauthorized() *PatchDirectoryServerUsingPATCHUnauthorized {
	return &PatchDirectoryServerUsingPATCHUnauthorized{}
}

/*PatchDirectoryServerUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchDirectoryServerUsingPATCHUnauthorized struct {
}

func (o *PatchDirectoryServerUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /directory-servers/{directoryServerId}][%d] patchDirectoryServerUsingPATCHUnauthorized ", 401)
}

func (o *PatchDirectoryServerUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDirectoryServerUsingPATCHForbidden creates a PatchDirectoryServerUsingPATCHForbidden with default headers values
func NewPatchDirectoryServerUsingPATCHForbidden() *PatchDirectoryServerUsingPATCHForbidden {
	return &PatchDirectoryServerUsingPATCHForbidden{}
}

/*PatchDirectoryServerUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type PatchDirectoryServerUsingPATCHForbidden struct {
}

func (o *PatchDirectoryServerUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /directory-servers/{directoryServerId}][%d] patchDirectoryServerUsingPATCHForbidden ", 403)
}

func (o *PatchDirectoryServerUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
