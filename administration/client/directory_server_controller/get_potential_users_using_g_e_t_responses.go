// Code generated by go-swagger; DO NOT EDIT.

package directory_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetPotentialUsersUsingGETReader is a Reader for the GetPotentialUsersUsingGET structure.
type GetPotentialUsersUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPotentialUsersUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPotentialUsersUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPotentialUsersUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPotentialUsersUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPotentialUsersUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPotentialUsersUsingGETOK creates a GetPotentialUsersUsingGETOK with default headers values
func NewGetPotentialUsersUsingGETOK() *GetPotentialUsersUsingGETOK {
	return &GetPotentialUsersUsingGETOK{}
}

/*GetPotentialUsersUsingGETOK handles this case with default header values.

OK
*/
type GetPotentialUsersUsingGETOK struct {
	Payload *models.ListHolderDtoUserDto
}

func (o *GetPotentialUsersUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /directory-users][%d] getPotentialUsersUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetPotentialUsersUsingGETOK) GetPayload() *models.ListHolderDtoUserDto {
	return o.Payload
}

func (o *GetPotentialUsersUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoUserDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPotentialUsersUsingGETUnauthorized creates a GetPotentialUsersUsingGETUnauthorized with default headers values
func NewGetPotentialUsersUsingGETUnauthorized() *GetPotentialUsersUsingGETUnauthorized {
	return &GetPotentialUsersUsingGETUnauthorized{}
}

/*GetPotentialUsersUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPotentialUsersUsingGETUnauthorized struct {
}

func (o *GetPotentialUsersUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /directory-users][%d] getPotentialUsersUsingGETUnauthorized ", 401)
}

func (o *GetPotentialUsersUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPotentialUsersUsingGETForbidden creates a GetPotentialUsersUsingGETForbidden with default headers values
func NewGetPotentialUsersUsingGETForbidden() *GetPotentialUsersUsingGETForbidden {
	return &GetPotentialUsersUsingGETForbidden{}
}

/*GetPotentialUsersUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetPotentialUsersUsingGETForbidden struct {
}

func (o *GetPotentialUsersUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /directory-users][%d] getPotentialUsersUsingGETForbidden ", 403)
}

func (o *GetPotentialUsersUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPotentialUsersUsingGETNotFound creates a GetPotentialUsersUsingGETNotFound with default headers values
func NewGetPotentialUsersUsingGETNotFound() *GetPotentialUsersUsingGETNotFound {
	return &GetPotentialUsersUsingGETNotFound{}
}

/*GetPotentialUsersUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetPotentialUsersUsingGETNotFound struct {
}

func (o *GetPotentialUsersUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /directory-users][%d] getPotentialUsersUsingGETNotFound ", 404)
}

func (o *GetPotentialUsersUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
