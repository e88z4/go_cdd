// Code generated by go-swagger; DO NOT EDIT.

package directory_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetDirectoryServersUsingGETReader is a Reader for the GetDirectoryServersUsingGET structure.
type GetDirectoryServersUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDirectoryServersUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDirectoryServersUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDirectoryServersUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDirectoryServersUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDirectoryServersUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDirectoryServersUsingGETOK creates a GetDirectoryServersUsingGETOK with default headers values
func NewGetDirectoryServersUsingGETOK() *GetDirectoryServersUsingGETOK {
	return &GetDirectoryServersUsingGETOK{}
}

/*GetDirectoryServersUsingGETOK handles this case with default header values.

OK
*/
type GetDirectoryServersUsingGETOK struct {
	Payload *models.ListHolderDtoDirectoryServerDto
}

func (o *GetDirectoryServersUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /directory-servers][%d] getDirectoryServersUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDirectoryServersUsingGETOK) GetPayload() *models.ListHolderDtoDirectoryServerDto {
	return o.Payload
}

func (o *GetDirectoryServersUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoDirectoryServerDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDirectoryServersUsingGETUnauthorized creates a GetDirectoryServersUsingGETUnauthorized with default headers values
func NewGetDirectoryServersUsingGETUnauthorized() *GetDirectoryServersUsingGETUnauthorized {
	return &GetDirectoryServersUsingGETUnauthorized{}
}

/*GetDirectoryServersUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDirectoryServersUsingGETUnauthorized struct {
}

func (o *GetDirectoryServersUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /directory-servers][%d] getDirectoryServersUsingGETUnauthorized ", 401)
}

func (o *GetDirectoryServersUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDirectoryServersUsingGETForbidden creates a GetDirectoryServersUsingGETForbidden with default headers values
func NewGetDirectoryServersUsingGETForbidden() *GetDirectoryServersUsingGETForbidden {
	return &GetDirectoryServersUsingGETForbidden{}
}

/*GetDirectoryServersUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetDirectoryServersUsingGETForbidden struct {
}

func (o *GetDirectoryServersUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /directory-servers][%d] getDirectoryServersUsingGETForbidden ", 403)
}

func (o *GetDirectoryServersUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDirectoryServersUsingGETNotFound creates a GetDirectoryServersUsingGETNotFound with default headers values
func NewGetDirectoryServersUsingGETNotFound() *GetDirectoryServersUsingGETNotFound {
	return &GetDirectoryServersUsingGETNotFound{}
}

/*GetDirectoryServersUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetDirectoryServersUsingGETNotFound struct {
}

func (o *GetDirectoryServersUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /directory-servers][%d] getDirectoryServersUsingGETNotFound ", 404)
}

func (o *GetDirectoryServersUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
