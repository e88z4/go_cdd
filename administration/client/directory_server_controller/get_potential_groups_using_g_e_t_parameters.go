// Code generated by go-swagger; DO NOT EDIT.

package directory_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPotentialGroupsUsingGETParams creates a new GetPotentialGroupsUsingGETParams object
// with the default values initialized.
func NewGetPotentialGroupsUsingGETParams() *GetPotentialGroupsUsingGETParams {
	var ()
	return &GetPotentialGroupsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPotentialGroupsUsingGETParamsWithTimeout creates a new GetPotentialGroupsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPotentialGroupsUsingGETParamsWithTimeout(timeout time.Duration) *GetPotentialGroupsUsingGETParams {
	var ()
	return &GetPotentialGroupsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetPotentialGroupsUsingGETParamsWithContext creates a new GetPotentialGroupsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPotentialGroupsUsingGETParamsWithContext(ctx context.Context) *GetPotentialGroupsUsingGETParams {
	var ()
	return &GetPotentialGroupsUsingGETParams{

		Context: ctx,
	}
}

// NewGetPotentialGroupsUsingGETParamsWithHTTPClient creates a new GetPotentialGroupsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPotentialGroupsUsingGETParamsWithHTTPClient(client *http.Client) *GetPotentialGroupsUsingGETParams {
	var ()
	return &GetPotentialGroupsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetPotentialGroupsUsingGETParams contains all the parameters to send to the API endpoint
for the get potential groups using g e t operation typically these are written to a http.Request
*/
type GetPotentialGroupsUsingGETParams struct {

	/*DirectoryServer
	  directoryServerId

	*/
	DirectoryServer int64
	/*Filter
	  filter

	*/
	Filter *string
	/*FilterExistEntities
	  filterExistEntities

	*/
	FilterExistEntities *bool
	/*PageSize
	  pageSize

	*/
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) WithTimeout(timeout time.Duration) *GetPotentialGroupsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) WithContext(ctx context.Context) *GetPotentialGroupsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) WithHTTPClient(client *http.Client) *GetPotentialGroupsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirectoryServer adds the directoryServer to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) WithDirectoryServer(directoryServer int64) *GetPotentialGroupsUsingGETParams {
	o.SetDirectoryServer(directoryServer)
	return o
}

// SetDirectoryServer adds the directoryServer to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) SetDirectoryServer(directoryServer int64) {
	o.DirectoryServer = directoryServer
}

// WithFilter adds the filter to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) WithFilter(filter *string) *GetPotentialGroupsUsingGETParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithFilterExistEntities adds the filterExistEntities to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) WithFilterExistEntities(filterExistEntities *bool) *GetPotentialGroupsUsingGETParams {
	o.SetFilterExistEntities(filterExistEntities)
	return o
}

// SetFilterExistEntities adds the filterExistEntities to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) SetFilterExistEntities(filterExistEntities *bool) {
	o.FilterExistEntities = filterExistEntities
}

// WithPageSize adds the pageSize to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) WithPageSize(pageSize *int32) *GetPotentialGroupsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get potential groups using g e t params
func (o *GetPotentialGroupsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetPotentialGroupsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param directory_server
	qrDirectoryServer := o.DirectoryServer
	qDirectoryServer := swag.FormatInt64(qrDirectoryServer)
	if qDirectoryServer != "" {
		if err := r.SetQueryParam("directory_server", qDirectoryServer); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.FilterExistEntities != nil {

		// query param filter_exist_entities
		var qrFilterExistEntities bool
		if o.FilterExistEntities != nil {
			qrFilterExistEntities = *o.FilterExistEntities
		}
		qFilterExistEntities := swag.FormatBool(qrFilterExistEntities)
		if qFilterExistEntities != "" {
			if err := r.SetQueryParam("filter_exist_entities", qFilterExistEntities); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
