// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	httptransport "github.com/go-openapi/runtime/client"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	apiops "github.com/e88z4/go_cdd/administration/client/api"
	"github.com/e88z4/go_cdd/administration/client/api_access_token"
	"github.com/e88z4/go_cdd/administration/client/application"
	"github.com/e88z4/go_cdd/administration/client/application_source"
	"github.com/e88z4/go_cdd/administration/client/db_settings"
	"github.com/e88z4/go_cdd/administration/client/directory_server_controller"
	"github.com/e88z4/go_cdd/administration/client/dsl"
	"github.com/e88z4/go_cdd/administration/client/email_notification_server"
	"github.com/e88z4/go_cdd/administration/client/email_templates"
	"github.com/e88z4/go_cdd/administration/client/endpoint"
	"github.com/e88z4/go_cdd/administration/client/environment"
	"github.com/e88z4/go_cdd/administration/client/freeze_period"
	"github.com/e88z4/go_cdd/administration/client/invitation_controller"
	"github.com/e88z4/go_cdd/administration/client/log_files"
	"github.com/e88z4/go_cdd/administration/client/maintenance_window"
	"github.com/e88z4/go_cdd/administration/client/parties"
	"github.com/e88z4/go_cdd/administration/client/payment_plan_controller"
	"github.com/e88z4/go_cdd/administration/client/permissions"
	"github.com/e88z4/go_cdd/administration/client/plugin_service"
	"github.com/e88z4/go_cdd/administration/client/product"
	"github.com/e88z4/go_cdd/administration/client/project"
	"github.com/e88z4/go_cdd/administration/client/registered_plugins"
	"github.com/e88z4/go_cdd/administration/client/roles"
	"github.com/e88z4/go_cdd/administration/client/saml_domain"
	"github.com/e88z4/go_cdd/administration/client/session"
	"github.com/e88z4/go_cdd/administration/client/system_preferences"
	"github.com/e88z4/go_cdd/administration/client/tenant"
	"github.com/e88z4/go_cdd/administration/client/user"
	"github.com/e88z4/go_cdd/administration/client/user_group"
	"github.com/e88z4/go_cdd/administration/client/version"
)

// Default a d m i n i s t r a t i o n HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "cddirector.io"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/cdd/administration/0000/v1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new a d m i n i s t r a t i o n HTTP client.
func NewHTTPClient(formats strfmt.Registry) *ADMINISTRATION {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new a d m i n i s t r a t i o n HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *ADMINISTRATION {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new a d m i n i s t r a t i o n client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *ADMINISTRATION {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(ADMINISTRATION)
	cli.Transport = transport
	cli.API = apiops.New(transport, formats)
	cli.APIAccessToken = api_access_token.New(transport, formats)
	cli.Application = application.New(transport, formats)
	cli.ApplicationSource = application_source.New(transport, formats)
	cli.DbSettings = db_settings.New(transport, formats)
	cli.DirectoryServerController = directory_server_controller.New(transport, formats)
	cli.Dsl = dsl.New(transport, formats)
	cli.EmailNotificationServer = email_notification_server.New(transport, formats)
	cli.EmailTemplates = email_templates.New(transport, formats)
	cli.Endpoint = endpoint.New(transport, formats)
	cli.Environment = environment.New(transport, formats)
	cli.FreezePeriod = freeze_period.New(transport, formats)
	cli.InvitationController = invitation_controller.New(transport, formats)
	cli.LogFiles = log_files.New(transport, formats)
	cli.MaintenanceWindow = maintenance_window.New(transport, formats)
	cli.Parties = parties.New(transport, formats)
	cli.PaymentPlanController = payment_plan_controller.New(transport, formats)
	cli.Permissions = permissions.New(transport, formats)
	cli.PluginService = plugin_service.New(transport, formats)
	cli.Product = product.New(transport, formats)
	cli.Project = project.New(transport, formats)
	cli.RegisteredPlugins = registered_plugins.New(transport, formats)
	cli.Roles = roles.New(transport, formats)
	cli.SamlDomain = saml_domain.New(transport, formats)
	cli.Session = session.New(transport, formats)
	cli.SystemPreferences = system_preferences.New(transport, formats)
	cli.Tenant = tenant.New(transport, formats)
	cli.User = user.New(transport, formats)
	cli.UserGroup = user_group.New(transport, formats)
	cli.Version = version.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// ADMINISTRATION is a client for a d m i n i s t r a t i o n
type ADMINISTRATION struct {
	API apiops.ClientService

	APIAccessToken api_access_token.ClientService

	Application application.ClientService

	ApplicationSource application_source.ClientService

	DbSettings db_settings.ClientService

	DirectoryServerController directory_server_controller.ClientService

	Dsl dsl.ClientService

	EmailNotificationServer email_notification_server.ClientService

	EmailTemplates email_templates.ClientService

	Endpoint endpoint.ClientService

	Environment environment.ClientService

	FreezePeriod freeze_period.ClientService

	InvitationController invitation_controller.ClientService

	LogFiles log_files.ClientService

	MaintenanceWindow maintenance_window.ClientService

	Parties parties.ClientService

	PaymentPlanController payment_plan_controller.ClientService

	Permissions permissions.ClientService

	PluginService plugin_service.ClientService

	Product product.ClientService

	Project project.ClientService

	RegisteredPlugins registered_plugins.ClientService

	Roles roles.ClientService

	SamlDomain saml_domain.ClientService

	Session session.ClientService

	SystemPreferences system_preferences.ClientService

	Tenant tenant.ClientService

	User user.ClientService

	UserGroup user_group.ClientService

	Version version.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *ADMINISTRATION) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.API.SetTransport(transport)
	c.APIAccessToken.SetTransport(transport)
	c.Application.SetTransport(transport)
	c.ApplicationSource.SetTransport(transport)
	c.DbSettings.SetTransport(transport)
	c.DirectoryServerController.SetTransport(transport)
	c.Dsl.SetTransport(transport)
	c.EmailNotificationServer.SetTransport(transport)
	c.EmailTemplates.SetTransport(transport)
	c.Endpoint.SetTransport(transport)
	c.Environment.SetTransport(transport)
	c.FreezePeriod.SetTransport(transport)
	c.InvitationController.SetTransport(transport)
	c.LogFiles.SetTransport(transport)
	c.MaintenanceWindow.SetTransport(transport)
	c.Parties.SetTransport(transport)
	c.PaymentPlanController.SetTransport(transport)
	c.Permissions.SetTransport(transport)
	c.PluginService.SetTransport(transport)
	c.Product.SetTransport(transport)
	c.Project.SetTransport(transport)
	c.RegisteredPlugins.SetTransport(transport)
	c.Roles.SetTransport(transport)
	c.SamlDomain.SetTransport(transport)
	c.Session.SetTransport(transport)
	c.SystemPreferences.SetTransport(transport)
	c.Tenant.SetTransport(transport)
	c.User.SetTransport(transport)
	c.UserGroup.SetTransport(transport)
	c.Version.SetTransport(transport)
}
