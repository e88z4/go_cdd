// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAPIAccessTokenUsingGETParams creates a new GetAPIAccessTokenUsingGETParams object
// with the default values initialized.
func NewGetAPIAccessTokenUsingGETParams() *GetAPIAccessTokenUsingGETParams {
	var ()
	return &GetAPIAccessTokenUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIAccessTokenUsingGETParamsWithTimeout creates a new GetAPIAccessTokenUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAPIAccessTokenUsingGETParamsWithTimeout(timeout time.Duration) *GetAPIAccessTokenUsingGETParams {
	var ()
	return &GetAPIAccessTokenUsingGETParams{

		timeout: timeout,
	}
}

// NewGetAPIAccessTokenUsingGETParamsWithContext creates a new GetAPIAccessTokenUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAPIAccessTokenUsingGETParamsWithContext(ctx context.Context) *GetAPIAccessTokenUsingGETParams {
	var ()
	return &GetAPIAccessTokenUsingGETParams{

		Context: ctx,
	}
}

// NewGetAPIAccessTokenUsingGETParamsWithHTTPClient creates a new GetAPIAccessTokenUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAPIAccessTokenUsingGETParamsWithHTTPClient(client *http.Client) *GetAPIAccessTokenUsingGETParams {
	var ()
	return &GetAPIAccessTokenUsingGETParams{
		HTTPClient: client,
	}
}

/*GetAPIAccessTokenUsingGETParams contains all the parameters to send to the API endpoint
for the get Api access token using g e t operation typically these are written to a http.Request
*/
type GetAPIAccessTokenUsingGETParams struct {

	/*UserID
	  userId

	*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) WithTimeout(timeout time.Duration) *GetAPIAccessTokenUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) WithContext(ctx context.Context) *GetAPIAccessTokenUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) WithHTTPClient(client *http.Client) *GetAPIAccessTokenUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserID adds the userID to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) WithUserID(userID int64) *GetAPIAccessTokenUsingGETParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get Api access token using g e t params
func (o *GetAPIAccessTokenUsingGETParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIAccessTokenUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param userId
	if err := r.SetPathParam("userId", swag.FormatInt64(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
