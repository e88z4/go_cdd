// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// PatchUserUsingPATCHReader is a Reader for the PatchUserUsingPATCH structure.
type PatchUserUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUserUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchUserUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchUserUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchUserUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchUserUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchUserUsingPATCHOK creates a PatchUserUsingPATCHOK with default headers values
func NewPatchUserUsingPATCHOK() *PatchUserUsingPATCHOK {
	return &PatchUserUsingPATCHOK{}
}

/*PatchUserUsingPATCHOK handles this case with default header values.

OK
*/
type PatchUserUsingPATCHOK struct {
	Payload *models.UserDto
}

func (o *PatchUserUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] patchUserUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchUserUsingPATCHOK) GetPayload() *models.UserDto {
	return o.Payload
}

func (o *PatchUserUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserUsingPATCHNoContent creates a PatchUserUsingPATCHNoContent with default headers values
func NewPatchUserUsingPATCHNoContent() *PatchUserUsingPATCHNoContent {
	return &PatchUserUsingPATCHNoContent{}
}

/*PatchUserUsingPATCHNoContent handles this case with default header values.

No Content
*/
type PatchUserUsingPATCHNoContent struct {
}

func (o *PatchUserUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] patchUserUsingPATCHNoContent ", 204)
}

func (o *PatchUserUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUserUsingPATCHUnauthorized creates a PatchUserUsingPATCHUnauthorized with default headers values
func NewPatchUserUsingPATCHUnauthorized() *PatchUserUsingPATCHUnauthorized {
	return &PatchUserUsingPATCHUnauthorized{}
}

/*PatchUserUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchUserUsingPATCHUnauthorized struct {
}

func (o *PatchUserUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] patchUserUsingPATCHUnauthorized ", 401)
}

func (o *PatchUserUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUserUsingPATCHForbidden creates a PatchUserUsingPATCHForbidden with default headers values
func NewPatchUserUsingPATCHForbidden() *PatchUserUsingPATCHForbidden {
	return &PatchUserUsingPATCHForbidden{}
}

/*PatchUserUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type PatchUserUsingPATCHForbidden struct {
}

func (o *PatchUserUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /users/{userId}][%d] patchUserUsingPATCHForbidden ", 403)
}

func (o *PatchUserUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
