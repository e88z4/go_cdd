// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeUserPasswordUsingPOST(params *ChangeUserPasswordUsingPOSTParams) (*ChangeUserPasswordUsingPOSTOK, *ChangeUserPasswordUsingPOSTCreated, error)

	ChangeUserPasswordUsingPUT(params *ChangeUserPasswordUsingPUTParams) (*ChangeUserPasswordUsingPUTOK, *ChangeUserPasswordUsingPUTCreated, error)

	CreateAPIAccessTokenUsingPOST1(params *CreateAPIAccessTokenUsingPOST1Params) (*CreateAPIAccessTokenUsingPOST1OK, *CreateAPIAccessTokenUsingPOST1Created, error)

	CreateUsersUsingPOST(params *CreateUsersUsingPOSTParams) (*CreateUsersUsingPOSTOK, *CreateUsersUsingPOSTCreated, error)

	DeleteUserUsingDELETE(params *DeleteUserUsingDELETEParams) (*DeleteUserUsingDELETEOK, *DeleteUserUsingDELETENoContent, error)

	GetAPIAccessTokenUsingGET(params *GetAPIAccessTokenUsingGETParams) (*GetAPIAccessTokenUsingGETOK, error)

	GetUserUsingGET(params *GetUserUsingGETParams) (*GetUserUsingGETOK, error)

	GetUsersUsingGET(params *GetUsersUsingGETParams) (*GetUsersUsingGETOK, error)

	PatchUserUsingPATCH(params *PatchUserUsingPATCHParams) (*PatchUserUsingPATCHOK, *PatchUserUsingPATCHNoContent, error)

	UpdateUserUsingPUT(params *UpdateUserUsingPUTParams) (*UpdateUserUsingPUTOK, *UpdateUserUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangeUserPasswordUsingPOST submits a password reset request auth0
*/
func (a *Client) ChangeUserPasswordUsingPOST(params *ChangeUserPasswordUsingPOSTParams) (*ChangeUserPasswordUsingPOSTOK, *ChangeUserPasswordUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeUserPasswordUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeUserPasswordUsingPOST",
		Method:             "POST",
		PathPattern:        "/users/current/password/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeUserPasswordUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ChangeUserPasswordUsingPOSTOK:
		return value, nil, nil
	case *ChangeUserPasswordUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeUserPasswordUsingPUT changes a own user password
*/
func (a *Client) ChangeUserPasswordUsingPUT(params *ChangeUserPasswordUsingPUTParams) (*ChangeUserPasswordUsingPUTOK, *ChangeUserPasswordUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeUserPasswordUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeUserPasswordUsingPUT",
		Method:             "PUT",
		PathPattern:        "/users/{userId}/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeUserPasswordUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ChangeUserPasswordUsingPUTOK:
		return value, nil, nil
	case *ChangeUserPasswordUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAPIAccessTokenUsingPOST1 creates api access token for appropriate user
*/
func (a *Client) CreateAPIAccessTokenUsingPOST1(params *CreateAPIAccessTokenUsingPOST1Params) (*CreateAPIAccessTokenUsingPOST1OK, *CreateAPIAccessTokenUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIAccessTokenUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApiAccessTokenUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/users/{userId}/api-access-tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAPIAccessTokenUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAPIAccessTokenUsingPOST1OK:
		return value, nil, nil
	case *CreateAPIAccessTokenUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUsersUsingPOST creates a user
*/
func (a *Client) CreateUsersUsingPOST(params *CreateUsersUsingPOSTParams) (*CreateUsersUsingPOSTOK, *CreateUsersUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsersUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUsersUsingPOST",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUsersUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUsersUsingPOSTOK:
		return value, nil, nil
	case *CreateUsersUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserUsingDELETE deletes a user
*/
func (a *Client) DeleteUserUsingDELETE(params *DeleteUserUsingDELETEParams) (*DeleteUserUsingDELETEOK, *DeleteUserUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAccessTokenUsingGET gets api access token for appropriate user
*/
func (a *Client) GetAPIAccessTokenUsingGET(params *GetAPIAccessTokenUsingGETParams) (*GetAPIAccessTokenUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccessTokenUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiAccessTokenUsingGET",
		Method:             "GET",
		PathPattern:        "/users/{userId}/api-access-tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccessTokenUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccessTokenUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiAccessTokenUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserUsingGET retrieves a user
*/
func (a *Client) GetUserUsingGET(params *GetUserUsingGETParams) (*GetUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserUsingGET",
		Method:             "GET",
		PathPattern:        "/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsingGET retrieves all users
*/
func (a *Client) GetUsersUsingGET(params *GetUsersUsingGETParams) (*GetUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchUserUsingPATCH patches a user
*/
func (a *Client) PatchUserUsingPATCH(params *PatchUserUsingPATCHParams) (*PatchUserUsingPATCHOK, *PatchUserUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUserUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchUserUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchUserUsingPATCHOK:
		return value, nil, nil
	case *PatchUserUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserUsingPUT updates a user
*/
func (a *Client) UpdateUserUsingPUT(params *UpdateUserUsingPUTParams) (*UpdateUserUsingPUTOK, *UpdateUserUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserUsingPUT",
		Method:             "PUT",
		PathPattern:        "/users/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUserUsingPUTOK:
		return value, nil, nil
	case *UpdateUserUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
