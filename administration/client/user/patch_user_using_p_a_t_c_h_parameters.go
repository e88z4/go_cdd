// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewPatchUserUsingPATCHParams creates a new PatchUserUsingPATCHParams object
// with the default values initialized.
func NewPatchUserUsingPATCHParams() *PatchUserUsingPATCHParams {
	var ()
	return &PatchUserUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchUserUsingPATCHParamsWithTimeout creates a new PatchUserUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchUserUsingPATCHParamsWithTimeout(timeout time.Duration) *PatchUserUsingPATCHParams {
	var ()
	return &PatchUserUsingPATCHParams{

		timeout: timeout,
	}
}

// NewPatchUserUsingPATCHParamsWithContext creates a new PatchUserUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchUserUsingPATCHParamsWithContext(ctx context.Context) *PatchUserUsingPATCHParams {
	var ()
	return &PatchUserUsingPATCHParams{

		Context: ctx,
	}
}

// NewPatchUserUsingPATCHParamsWithHTTPClient creates a new PatchUserUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchUserUsingPATCHParamsWithHTTPClient(client *http.Client) *PatchUserUsingPATCHParams {
	var ()
	return &PatchUserUsingPATCHParams{
		HTTPClient: client,
	}
}

/*PatchUserUsingPATCHParams contains all the parameters to send to the API endpoint
for the patch user using p a t c h operation typically these are written to a http.Request
*/
type PatchUserUsingPATCHParams struct {

	/*UserDto
	  userDto

	*/
	UserDto *models.UserDto
	/*UserID
	  userId

	*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) WithTimeout(timeout time.Duration) *PatchUserUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) WithContext(ctx context.Context) *PatchUserUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) WithHTTPClient(client *http.Client) *PatchUserUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserDto adds the userDto to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) WithUserDto(userDto *models.UserDto) *PatchUserUsingPATCHParams {
	o.SetUserDto(userDto)
	return o
}

// SetUserDto adds the userDto to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) SetUserDto(userDto *models.UserDto) {
	o.UserDto = userDto
}

// WithUserID adds the userID to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) WithUserID(userID int64) *PatchUserUsingPATCHParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the patch user using p a t c h params
func (o *PatchUserUsingPATCHParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchUserUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserDto != nil {
		if err := r.SetBodyParam(o.UserDto); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", swag.FormatInt64(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
