// Code generated by go-swagger; DO NOT EDIT.

package freeze_period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewEnableDisableFreezePeriodUsingPATCHParams creates a new EnableDisableFreezePeriodUsingPATCHParams object
// with the default values initialized.
func NewEnableDisableFreezePeriodUsingPATCHParams() *EnableDisableFreezePeriodUsingPATCHParams {
	var ()
	return &EnableDisableFreezePeriodUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEnableDisableFreezePeriodUsingPATCHParamsWithTimeout creates a new EnableDisableFreezePeriodUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEnableDisableFreezePeriodUsingPATCHParamsWithTimeout(timeout time.Duration) *EnableDisableFreezePeriodUsingPATCHParams {
	var ()
	return &EnableDisableFreezePeriodUsingPATCHParams{

		timeout: timeout,
	}
}

// NewEnableDisableFreezePeriodUsingPATCHParamsWithContext creates a new EnableDisableFreezePeriodUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewEnableDisableFreezePeriodUsingPATCHParamsWithContext(ctx context.Context) *EnableDisableFreezePeriodUsingPATCHParams {
	var ()
	return &EnableDisableFreezePeriodUsingPATCHParams{

		Context: ctx,
	}
}

// NewEnableDisableFreezePeriodUsingPATCHParamsWithHTTPClient creates a new EnableDisableFreezePeriodUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEnableDisableFreezePeriodUsingPATCHParamsWithHTTPClient(client *http.Client) *EnableDisableFreezePeriodUsingPATCHParams {
	var ()
	return &EnableDisableFreezePeriodUsingPATCHParams{
		HTTPClient: client,
	}
}

/*EnableDisableFreezePeriodUsingPATCHParams contains all the parameters to send to the API endpoint
for the enable disable freeze period using p a t c h operation typically these are written to a http.Request
*/
type EnableDisableFreezePeriodUsingPATCHParams struct {

	/*FreezePeriodDto
	  freezePeriodDto

	*/
	FreezePeriodDto *models.FreezePeriodDto
	/*FreezePeriodID
	  freezePeriodId

	*/
	FreezePeriodID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) WithTimeout(timeout time.Duration) *EnableDisableFreezePeriodUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) WithContext(ctx context.Context) *EnableDisableFreezePeriodUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) WithHTTPClient(client *http.Client) *EnableDisableFreezePeriodUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFreezePeriodDto adds the freezePeriodDto to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) WithFreezePeriodDto(freezePeriodDto *models.FreezePeriodDto) *EnableDisableFreezePeriodUsingPATCHParams {
	o.SetFreezePeriodDto(freezePeriodDto)
	return o
}

// SetFreezePeriodDto adds the freezePeriodDto to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) SetFreezePeriodDto(freezePeriodDto *models.FreezePeriodDto) {
	o.FreezePeriodDto = freezePeriodDto
}

// WithFreezePeriodID adds the freezePeriodID to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) WithFreezePeriodID(freezePeriodID int64) *EnableDisableFreezePeriodUsingPATCHParams {
	o.SetFreezePeriodID(freezePeriodID)
	return o
}

// SetFreezePeriodID adds the freezePeriodId to the enable disable freeze period using p a t c h params
func (o *EnableDisableFreezePeriodUsingPATCHParams) SetFreezePeriodID(freezePeriodID int64) {
	o.FreezePeriodID = freezePeriodID
}

// WriteToRequest writes these params to a swagger request
func (o *EnableDisableFreezePeriodUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FreezePeriodDto != nil {
		if err := r.SetBodyParam(o.FreezePeriodDto); err != nil {
			return err
		}
	}

	// path param freezePeriodId
	if err := r.SetPathParam("freezePeriodId", swag.FormatInt64(o.FreezePeriodID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
