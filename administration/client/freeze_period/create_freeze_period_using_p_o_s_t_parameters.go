// Code generated by go-swagger; DO NOT EDIT.

package freeze_period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// NewCreateFreezePeriodUsingPOSTParams creates a new CreateFreezePeriodUsingPOSTParams object
// with the default values initialized.
func NewCreateFreezePeriodUsingPOSTParams() *CreateFreezePeriodUsingPOSTParams {
	var ()
	return &CreateFreezePeriodUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateFreezePeriodUsingPOSTParamsWithTimeout creates a new CreateFreezePeriodUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateFreezePeriodUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateFreezePeriodUsingPOSTParams {
	var ()
	return &CreateFreezePeriodUsingPOSTParams{

		timeout: timeout,
	}
}

// NewCreateFreezePeriodUsingPOSTParamsWithContext creates a new CreateFreezePeriodUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateFreezePeriodUsingPOSTParamsWithContext(ctx context.Context) *CreateFreezePeriodUsingPOSTParams {
	var ()
	return &CreateFreezePeriodUsingPOSTParams{

		Context: ctx,
	}
}

// NewCreateFreezePeriodUsingPOSTParamsWithHTTPClient creates a new CreateFreezePeriodUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateFreezePeriodUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateFreezePeriodUsingPOSTParams {
	var ()
	return &CreateFreezePeriodUsingPOSTParams{
		HTTPClient: client,
	}
}

/*CreateFreezePeriodUsingPOSTParams contains all the parameters to send to the API endpoint
for the create freeze period using p o s t operation typically these are written to a http.Request
*/
type CreateFreezePeriodUsingPOSTParams struct {

	/*FreezePeriodDto
	  freezePeriodDto

	*/
	FreezePeriodDto *models.FreezePeriodDto

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateFreezePeriodUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) WithContext(ctx context.Context) *CreateFreezePeriodUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateFreezePeriodUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFreezePeriodDto adds the freezePeriodDto to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) WithFreezePeriodDto(freezePeriodDto *models.FreezePeriodDto) *CreateFreezePeriodUsingPOSTParams {
	o.SetFreezePeriodDto(freezePeriodDto)
	return o
}

// SetFreezePeriodDto adds the freezePeriodDto to the create freeze period using p o s t params
func (o *CreateFreezePeriodUsingPOSTParams) SetFreezePeriodDto(freezePeriodDto *models.FreezePeriodDto) {
	o.FreezePeriodDto = freezePeriodDto
}

// WriteToRequest writes these params to a swagger request
func (o *CreateFreezePeriodUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FreezePeriodDto != nil {
		if err := r.SetBodyParam(o.FreezePeriodDto); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
