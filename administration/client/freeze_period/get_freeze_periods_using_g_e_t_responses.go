// Code generated by go-swagger; DO NOT EDIT.

package freeze_period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetFreezePeriodsUsingGETReader is a Reader for the GetFreezePeriodsUsingGET structure.
type GetFreezePeriodsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFreezePeriodsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFreezePeriodsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetFreezePeriodsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFreezePeriodsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFreezePeriodsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFreezePeriodsUsingGETOK creates a GetFreezePeriodsUsingGETOK with default headers values
func NewGetFreezePeriodsUsingGETOK() *GetFreezePeriodsUsingGETOK {
	return &GetFreezePeriodsUsingGETOK{}
}

/*GetFreezePeriodsUsingGETOK handles this case with default header values.

OK
*/
type GetFreezePeriodsUsingGETOK struct {
	Payload *models.ListHolderDtoFreezePeriodDto
}

func (o *GetFreezePeriodsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /freeze-periods][%d] getFreezePeriodsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetFreezePeriodsUsingGETOK) GetPayload() *models.ListHolderDtoFreezePeriodDto {
	return o.Payload
}

func (o *GetFreezePeriodsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListHolderDtoFreezePeriodDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFreezePeriodsUsingGETUnauthorized creates a GetFreezePeriodsUsingGETUnauthorized with default headers values
func NewGetFreezePeriodsUsingGETUnauthorized() *GetFreezePeriodsUsingGETUnauthorized {
	return &GetFreezePeriodsUsingGETUnauthorized{}
}

/*GetFreezePeriodsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetFreezePeriodsUsingGETUnauthorized struct {
}

func (o *GetFreezePeriodsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /freeze-periods][%d] getFreezePeriodsUsingGETUnauthorized ", 401)
}

func (o *GetFreezePeriodsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFreezePeriodsUsingGETForbidden creates a GetFreezePeriodsUsingGETForbidden with default headers values
func NewGetFreezePeriodsUsingGETForbidden() *GetFreezePeriodsUsingGETForbidden {
	return &GetFreezePeriodsUsingGETForbidden{}
}

/*GetFreezePeriodsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetFreezePeriodsUsingGETForbidden struct {
}

func (o *GetFreezePeriodsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /freeze-periods][%d] getFreezePeriodsUsingGETForbidden ", 403)
}

func (o *GetFreezePeriodsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFreezePeriodsUsingGETNotFound creates a GetFreezePeriodsUsingGETNotFound with default headers values
func NewGetFreezePeriodsUsingGETNotFound() *GetFreezePeriodsUsingGETNotFound {
	return &GetFreezePeriodsUsingGETNotFound{}
}

/*GetFreezePeriodsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetFreezePeriodsUsingGETNotFound struct {
}

func (o *GetFreezePeriodsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /freeze-periods][%d] getFreezePeriodsUsingGETNotFound ", 404)
}

func (o *GetFreezePeriodsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
