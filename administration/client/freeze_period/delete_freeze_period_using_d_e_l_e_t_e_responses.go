// Code generated by go-swagger; DO NOT EDIT.

package freeze_period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteFreezePeriodUsingDELETEReader is a Reader for the DeleteFreezePeriodUsingDELETE structure.
type DeleteFreezePeriodUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFreezePeriodUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteFreezePeriodUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteFreezePeriodUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteFreezePeriodUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteFreezePeriodUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteFreezePeriodUsingDELETEOK creates a DeleteFreezePeriodUsingDELETEOK with default headers values
func NewDeleteFreezePeriodUsingDELETEOK() *DeleteFreezePeriodUsingDELETEOK {
	return &DeleteFreezePeriodUsingDELETEOK{}
}

/*DeleteFreezePeriodUsingDELETEOK handles this case with default header values.

OK
*/
type DeleteFreezePeriodUsingDELETEOK struct {
}

func (o *DeleteFreezePeriodUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /freeze-periods/{freezePeriodId}][%d] deleteFreezePeriodUsingDELETEOK ", 200)
}

func (o *DeleteFreezePeriodUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFreezePeriodUsingDELETENoContent creates a DeleteFreezePeriodUsingDELETENoContent with default headers values
func NewDeleteFreezePeriodUsingDELETENoContent() *DeleteFreezePeriodUsingDELETENoContent {
	return &DeleteFreezePeriodUsingDELETENoContent{}
}

/*DeleteFreezePeriodUsingDELETENoContent handles this case with default header values.

No Content
*/
type DeleteFreezePeriodUsingDELETENoContent struct {
}

func (o *DeleteFreezePeriodUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /freeze-periods/{freezePeriodId}][%d] deleteFreezePeriodUsingDELETENoContent ", 204)
}

func (o *DeleteFreezePeriodUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFreezePeriodUsingDELETEUnauthorized creates a DeleteFreezePeriodUsingDELETEUnauthorized with default headers values
func NewDeleteFreezePeriodUsingDELETEUnauthorized() *DeleteFreezePeriodUsingDELETEUnauthorized {
	return &DeleteFreezePeriodUsingDELETEUnauthorized{}
}

/*DeleteFreezePeriodUsingDELETEUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteFreezePeriodUsingDELETEUnauthorized struct {
}

func (o *DeleteFreezePeriodUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /freeze-periods/{freezePeriodId}][%d] deleteFreezePeriodUsingDELETEUnauthorized ", 401)
}

func (o *DeleteFreezePeriodUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFreezePeriodUsingDELETEForbidden creates a DeleteFreezePeriodUsingDELETEForbidden with default headers values
func NewDeleteFreezePeriodUsingDELETEForbidden() *DeleteFreezePeriodUsingDELETEForbidden {
	return &DeleteFreezePeriodUsingDELETEForbidden{}
}

/*DeleteFreezePeriodUsingDELETEForbidden handles this case with default header values.

Forbidden
*/
type DeleteFreezePeriodUsingDELETEForbidden struct {
}

func (o *DeleteFreezePeriodUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /freeze-periods/{freezePeriodId}][%d] deleteFreezePeriodUsingDELETEForbidden ", 403)
}

func (o *DeleteFreezePeriodUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
