// Code generated by go-swagger; DO NOT EDIT.

package freeze_period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new freeze period API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for freeze period API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFreezePeriodUsingPOST(params *CreateFreezePeriodUsingPOSTParams) (*CreateFreezePeriodUsingPOSTOK, *CreateFreezePeriodUsingPOSTCreated, error)

	DeleteFreezePeriodUsingDELETE(params *DeleteFreezePeriodUsingDELETEParams) (*DeleteFreezePeriodUsingDELETEOK, *DeleteFreezePeriodUsingDELETENoContent, error)

	EnableDisableFreezePeriodUsingPATCH(params *EnableDisableFreezePeriodUsingPATCHParams) (*EnableDisableFreezePeriodUsingPATCHOK, *EnableDisableFreezePeriodUsingPATCHNoContent, error)

	GetFreezePeriodUsingGET(params *GetFreezePeriodUsingGETParams) (*GetFreezePeriodUsingGETOK, error)

	GetFreezePeriodsUsingGET(params *GetFreezePeriodsUsingGETParams) (*GetFreezePeriodsUsingGETOK, error)

	UpdateFreezePeriodUsingPUT(params *UpdateFreezePeriodUsingPUTParams) (*UpdateFreezePeriodUsingPUTOK, *UpdateFreezePeriodUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFreezePeriodUsingPOST creates freeze period entry
*/
func (a *Client) CreateFreezePeriodUsingPOST(params *CreateFreezePeriodUsingPOSTParams) (*CreateFreezePeriodUsingPOSTOK, *CreateFreezePeriodUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFreezePeriodUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFreezePeriodUsingPOST",
		Method:             "POST",
		PathPattern:        "/freeze-periods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFreezePeriodUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateFreezePeriodUsingPOSTOK:
		return value, nil, nil
	case *CreateFreezePeriodUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for freeze_period: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFreezePeriodUsingDELETE deletes freeze period entry
*/
func (a *Client) DeleteFreezePeriodUsingDELETE(params *DeleteFreezePeriodUsingDELETEParams) (*DeleteFreezePeriodUsingDELETEOK, *DeleteFreezePeriodUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFreezePeriodUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFreezePeriodUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/freeze-periods/{freezePeriodId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFreezePeriodUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteFreezePeriodUsingDELETEOK:
		return value, nil, nil
	case *DeleteFreezePeriodUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for freeze_period: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableDisableFreezePeriodUsingPATCH enables disable freeze period
*/
func (a *Client) EnableDisableFreezePeriodUsingPATCH(params *EnableDisableFreezePeriodUsingPATCHParams) (*EnableDisableFreezePeriodUsingPATCHOK, *EnableDisableFreezePeriodUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableDisableFreezePeriodUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enableDisableFreezePeriodUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/freeze-periods/{freezePeriodId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableDisableFreezePeriodUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EnableDisableFreezePeriodUsingPATCHOK:
		return value, nil, nil
	case *EnableDisableFreezePeriodUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for freeze_period: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFreezePeriodUsingGET gets freeze period entry
*/
func (a *Client) GetFreezePeriodUsingGET(params *GetFreezePeriodUsingGETParams) (*GetFreezePeriodUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFreezePeriodUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFreezePeriodUsingGET",
		Method:             "GET",
		PathPattern:        "/freeze-periods/{freezePeriodId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFreezePeriodUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFreezePeriodUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFreezePeriodUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFreezePeriodsUsingGET retrieves all freeze periods
*/
func (a *Client) GetFreezePeriodsUsingGET(params *GetFreezePeriodsUsingGETParams) (*GetFreezePeriodsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFreezePeriodsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFreezePeriodsUsingGET",
		Method:             "GET",
		PathPattern:        "/freeze-periods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFreezePeriodsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFreezePeriodsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFreezePeriodsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFreezePeriodUsingPUT updates freeze period
*/
func (a *Client) UpdateFreezePeriodUsingPUT(params *UpdateFreezePeriodUsingPUTParams) (*UpdateFreezePeriodUsingPUTOK, *UpdateFreezePeriodUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFreezePeriodUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFreezePeriodUsingPUT",
		Method:             "PUT",
		PathPattern:        "/freeze-periods/{freezePeriodId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFreezePeriodUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateFreezePeriodUsingPUTOK:
		return value, nil, nil
	case *UpdateFreezePeriodUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for freeze_period: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
