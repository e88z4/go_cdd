// Code generated by go-swagger; DO NOT EDIT.

package api_access_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api access token API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api access token API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAPIAccessTokenUsingPOST(params *CreateAPIAccessTokenUsingPOSTParams) (*CreateAPIAccessTokenUsingPOSTOK, *CreateAPIAccessTokenUsingPOSTCreated, error)

	DeleteAPIAccessTokenUsingDELETE(params *DeleteAPIAccessTokenUsingDELETEParams) (*DeleteAPIAccessTokenUsingDELETEOK, *DeleteAPIAccessTokenUsingDELETENoContent, error)

	DeleteAPIAccessTokensUsingDELETE(params *DeleteAPIAccessTokensUsingDELETEParams) (*DeleteAPIAccessTokensUsingDELETEOK, *DeleteAPIAccessTokensUsingDELETENoContent, error)

	GetAPIAccessTokensUsingGET(params *GetAPIAccessTokensUsingGETParams) (*GetAPIAccessTokensUsingGETOK, error)

	GetAPIAccessTokensUsingGET1(params *GetAPIAccessTokensUsingGET1Params) (*GetAPIAccessTokensUsingGET1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAPIAccessTokenUsingPOST creates api access token
*/
func (a *Client) CreateAPIAccessTokenUsingPOST(params *CreateAPIAccessTokenUsingPOSTParams) (*CreateAPIAccessTokenUsingPOSTOK, *CreateAPIAccessTokenUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAPIAccessTokenUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApiAccessTokenUsingPOST",
		Method:             "POST",
		PathPattern:        "/api-access-tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAPIAccessTokenUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAPIAccessTokenUsingPOSTOK:
		return value, nil, nil
	case *CreateAPIAccessTokenUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_access_token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIAccessTokenUsingDELETE deletes user api access token
*/
func (a *Client) DeleteAPIAccessTokenUsingDELETE(params *DeleteAPIAccessTokenUsingDELETEParams) (*DeleteAPIAccessTokenUsingDELETEOK, *DeleteAPIAccessTokenUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIAccessTokenUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiAccessTokenUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/api-access-tokens/{apiAccessTokenId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIAccessTokenUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAPIAccessTokenUsingDELETEOK:
		return value, nil, nil
	case *DeleteAPIAccessTokenUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_access_token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAPIAccessTokensUsingDELETE deletes all user api access tokens
*/
func (a *Client) DeleteAPIAccessTokensUsingDELETE(params *DeleteAPIAccessTokensUsingDELETEParams) (*DeleteAPIAccessTokensUsingDELETEOK, *DeleteAPIAccessTokensUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIAccessTokensUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiAccessTokensUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/api-access-tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIAccessTokensUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAPIAccessTokensUsingDELETEOK:
		return value, nil, nil
	case *DeleteAPIAccessTokensUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_access_token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAccessTokensUsingGET gets user api access token
*/
func (a *Client) GetAPIAccessTokensUsingGET(params *GetAPIAccessTokensUsingGETParams) (*GetAPIAccessTokensUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccessTokensUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiAccessTokensUsingGET",
		Method:             "GET",
		PathPattern:        "/api-access-tokens/{apiAccessTokenId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccessTokensUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccessTokensUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiAccessTokensUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAccessTokensUsingGET1 gets all user api access token
*/
func (a *Client) GetAPIAccessTokensUsingGET1(params *GetAPIAccessTokensUsingGET1Params) (*GetAPIAccessTokensUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAccessTokensUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiAccessTokensUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api-access-tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIAccessTokensUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAccessTokensUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiAccessTokensUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
