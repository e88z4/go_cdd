// Code generated by go-swagger; DO NOT EDIT.

package system_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetSupportedDisplayNamesUsingGETReader is a Reader for the GetSupportedDisplayNamesUsingGET structure.
type GetSupportedDisplayNamesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSupportedDisplayNamesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSupportedDisplayNamesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSupportedDisplayNamesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSupportedDisplayNamesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSupportedDisplayNamesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSupportedDisplayNamesUsingGETOK creates a GetSupportedDisplayNamesUsingGETOK with default headers values
func NewGetSupportedDisplayNamesUsingGETOK() *GetSupportedDisplayNamesUsingGETOK {
	return &GetSupportedDisplayNamesUsingGETOK{}
}

/*GetSupportedDisplayNamesUsingGETOK handles this case with default header values.

OK
*/
type GetSupportedDisplayNamesUsingGETOK struct {
	Payload []string
}

func (o *GetSupportedDisplayNamesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /product/settings/system-preferences/display-names][%d] getSupportedDisplayNamesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSupportedDisplayNamesUsingGETOK) GetPayload() []string {
	return o.Payload
}

func (o *GetSupportedDisplayNamesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupportedDisplayNamesUsingGETUnauthorized creates a GetSupportedDisplayNamesUsingGETUnauthorized with default headers values
func NewGetSupportedDisplayNamesUsingGETUnauthorized() *GetSupportedDisplayNamesUsingGETUnauthorized {
	return &GetSupportedDisplayNamesUsingGETUnauthorized{}
}

/*GetSupportedDisplayNamesUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSupportedDisplayNamesUsingGETUnauthorized struct {
}

func (o *GetSupportedDisplayNamesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /product/settings/system-preferences/display-names][%d] getSupportedDisplayNamesUsingGETUnauthorized ", 401)
}

func (o *GetSupportedDisplayNamesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSupportedDisplayNamesUsingGETForbidden creates a GetSupportedDisplayNamesUsingGETForbidden with default headers values
func NewGetSupportedDisplayNamesUsingGETForbidden() *GetSupportedDisplayNamesUsingGETForbidden {
	return &GetSupportedDisplayNamesUsingGETForbidden{}
}

/*GetSupportedDisplayNamesUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetSupportedDisplayNamesUsingGETForbidden struct {
}

func (o *GetSupportedDisplayNamesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /product/settings/system-preferences/display-names][%d] getSupportedDisplayNamesUsingGETForbidden ", 403)
}

func (o *GetSupportedDisplayNamesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSupportedDisplayNamesUsingGETNotFound creates a GetSupportedDisplayNamesUsingGETNotFound with default headers values
func NewGetSupportedDisplayNamesUsingGETNotFound() *GetSupportedDisplayNamesUsingGETNotFound {
	return &GetSupportedDisplayNamesUsingGETNotFound{}
}

/*GetSupportedDisplayNamesUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetSupportedDisplayNamesUsingGETNotFound struct {
}

func (o *GetSupportedDisplayNamesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /product/settings/system-preferences/display-names][%d] getSupportedDisplayNamesUsingGETNotFound ", 404)
}

func (o *GetSupportedDisplayNamesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
