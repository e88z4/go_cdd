// Code generated by go-swagger; DO NOT EDIT.

package system_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system preferences API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system preferences API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetSupportedDisplayNamesUsingGET(params *GetSupportedDisplayNamesUsingGETParams) (*GetSupportedDisplayNamesUsingGETOK, error)

	GetSystemPreferencesDtoUsingGET(params *GetSystemPreferencesDtoUsingGETParams) (*GetSystemPreferencesDtoUsingGETOK, error)

	TestMicroservicesConnectivityUsingPOST(params *TestMicroservicesConnectivityUsingPOSTParams) (*TestMicroservicesConnectivityUsingPOSTOK, *TestMicroservicesConnectivityUsingPOSTCreated, error)

	UpdateSystemPreferencesDtoUsingPATCH(params *UpdateSystemPreferencesDtoUsingPATCHParams) (*UpdateSystemPreferencesDtoUsingPATCHOK, *UpdateSystemPreferencesDtoUsingPATCHNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetSupportedDisplayNamesUsingGET gets system preference display names
*/
func (a *Client) GetSupportedDisplayNamesUsingGET(params *GetSupportedDisplayNamesUsingGETParams) (*GetSupportedDisplayNamesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportedDisplayNamesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSupportedDisplayNamesUsingGET",
		Method:             "GET",
		PathPattern:        "/product/settings/system-preferences/display-names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSupportedDisplayNamesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportedDisplayNamesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupportedDisplayNamesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemPreferencesDtoUsingGET gets system preferences
*/
func (a *Client) GetSystemPreferencesDtoUsingGET(params *GetSystemPreferencesDtoUsingGETParams) (*GetSystemPreferencesDtoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemPreferencesDtoUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemPreferencesDtoUsingGET",
		Method:             "GET",
		PathPattern:        "/product/settings/system-preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemPreferencesDtoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemPreferencesDtoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemPreferencesDtoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestMicroservicesConnectivityUsingPOST connectivities test for adaptive testing services
*/
func (a *Client) TestMicroservicesConnectivityUsingPOST(params *TestMicroservicesConnectivityUsingPOSTParams) (*TestMicroservicesConnectivityUsingPOSTOK, *TestMicroservicesConnectivityUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestMicroservicesConnectivityUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testMicroservicesConnectivityUsingPOST",
		Method:             "POST",
		PathPattern:        "/adaptive-testing/connectivity-tests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestMicroservicesConnectivityUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TestMicroservicesConnectivityUsingPOSTOK:
		return value, nil, nil
	case *TestMicroservicesConnectivityUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system_preferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSystemPreferencesDtoUsingPATCH sets system preferences
*/
func (a *Client) UpdateSystemPreferencesDtoUsingPATCH(params *UpdateSystemPreferencesDtoUsingPATCHParams) (*UpdateSystemPreferencesDtoUsingPATCHOK, *UpdateSystemPreferencesDtoUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSystemPreferencesDtoUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSystemPreferencesDtoUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/product/settings/system-preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSystemPreferencesDtoUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSystemPreferencesDtoUsingPATCHOK:
		return value, nil, nil
	case *UpdateSystemPreferencesDtoUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system_preferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
