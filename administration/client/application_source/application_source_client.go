// Code generated by go-swagger; DO NOT EDIT.

package application_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new application source API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application source API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateApplicationSourceUsingPOST(params *CreateApplicationSourceUsingPOSTParams) (*CreateApplicationSourceUsingPOSTOK, *CreateApplicationSourceUsingPOSTCreated, error)

	DeleteApplicationSourceUsingDELETE(params *DeleteApplicationSourceUsingDELETEParams) (*DeleteApplicationSourceUsingDELETEOK, *DeleteApplicationSourceUsingDELETENoContent, error)

	GetAllApplicationSourcesUsingGET(params *GetAllApplicationSourcesUsingGETParams) (*GetAllApplicationSourcesUsingGETOK, error)

	SyncApplicationSourceUsingPATCH(params *SyncApplicationSourceUsingPATCHParams) (*SyncApplicationSourceUsingPATCHOK, *SyncApplicationSourceUsingPATCHNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateApplicationSourceUsingPOST creates an application source
*/
func (a *Client) CreateApplicationSourceUsingPOST(params *CreateApplicationSourceUsingPOSTParams) (*CreateApplicationSourceUsingPOSTOK, *CreateApplicationSourceUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApplicationSourceUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApplicationSourceUsingPOST",
		Method:             "POST",
		PathPattern:        "/application-sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateApplicationSourceUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateApplicationSourceUsingPOSTOK:
		return value, nil, nil
	case *CreateApplicationSourceUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_source: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteApplicationSourceUsingDELETE deletes an application source
*/
func (a *Client) DeleteApplicationSourceUsingDELETE(params *DeleteApplicationSourceUsingDELETEParams) (*DeleteApplicationSourceUsingDELETEOK, *DeleteApplicationSourceUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApplicationSourceUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApplicationSourceUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/application-sources/{applicationSourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteApplicationSourceUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteApplicationSourceUsingDELETEOK:
		return value, nil, nil
	case *DeleteApplicationSourceUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_source: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllApplicationSourcesUsingGET retrieves all application sources
*/
func (a *Client) GetAllApplicationSourcesUsingGET(params *GetAllApplicationSourcesUsingGETParams) (*GetAllApplicationSourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllApplicationSourcesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllApplicationSourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/application-sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllApplicationSourcesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllApplicationSourcesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllApplicationSourcesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyncApplicationSourceUsingPATCH syncs an application source
*/
func (a *Client) SyncApplicationSourceUsingPATCH(params *SyncApplicationSourceUsingPATCHParams) (*SyncApplicationSourceUsingPATCHOK, *SyncApplicationSourceUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncApplicationSourceUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncApplicationSourceUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/application-sources/{applicationSourceId}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncApplicationSourceUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncApplicationSourceUsingPATCHOK:
		return value, nil, nil
	case *SyncApplicationSourceUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_source: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
