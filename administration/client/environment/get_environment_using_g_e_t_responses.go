// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetEnvironmentUsingGETReader is a Reader for the GetEnvironmentUsingGET structure.
type GetEnvironmentUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEnvironmentUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEnvironmentUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEnvironmentUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEnvironmentUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEnvironmentUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEnvironmentUsingGETOK creates a GetEnvironmentUsingGETOK with default headers values
func NewGetEnvironmentUsingGETOK() *GetEnvironmentUsingGETOK {
	return &GetEnvironmentUsingGETOK{}
}

/*GetEnvironmentUsingGETOK handles this case with default header values.

OK
*/
type GetEnvironmentUsingGETOK struct {
	Payload *models.EnvironmentDto
}

func (o *GetEnvironmentUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /environments/{environmentId}][%d] getEnvironmentUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetEnvironmentUsingGETOK) GetPayload() *models.EnvironmentDto {
	return o.Payload
}

func (o *GetEnvironmentUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnvironmentDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEnvironmentUsingGETUnauthorized creates a GetEnvironmentUsingGETUnauthorized with default headers values
func NewGetEnvironmentUsingGETUnauthorized() *GetEnvironmentUsingGETUnauthorized {
	return &GetEnvironmentUsingGETUnauthorized{}
}

/*GetEnvironmentUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetEnvironmentUsingGETUnauthorized struct {
}

func (o *GetEnvironmentUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /environments/{environmentId}][%d] getEnvironmentUsingGETUnauthorized ", 401)
}

func (o *GetEnvironmentUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEnvironmentUsingGETForbidden creates a GetEnvironmentUsingGETForbidden with default headers values
func NewGetEnvironmentUsingGETForbidden() *GetEnvironmentUsingGETForbidden {
	return &GetEnvironmentUsingGETForbidden{}
}

/*GetEnvironmentUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetEnvironmentUsingGETForbidden struct {
}

func (o *GetEnvironmentUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /environments/{environmentId}][%d] getEnvironmentUsingGETForbidden ", 403)
}

func (o *GetEnvironmentUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEnvironmentUsingGETNotFound creates a GetEnvironmentUsingGETNotFound with default headers values
func NewGetEnvironmentUsingGETNotFound() *GetEnvironmentUsingGETNotFound {
	return &GetEnvironmentUsingGETNotFound{}
}

/*GetEnvironmentUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetEnvironmentUsingGETNotFound struct {
}

func (o *GetEnvironmentUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /environments/{environmentId}][%d] getEnvironmentUsingGETNotFound ", 404)
}

func (o *GetEnvironmentUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
