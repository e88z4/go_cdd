// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAllEnvironmentsUsingGETParams creates a new GetAllEnvironmentsUsingGETParams object
// with the default values initialized.
func NewGetAllEnvironmentsUsingGETParams() *GetAllEnvironmentsUsingGETParams {
	var ()
	return &GetAllEnvironmentsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllEnvironmentsUsingGETParamsWithTimeout creates a new GetAllEnvironmentsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllEnvironmentsUsingGETParamsWithTimeout(timeout time.Duration) *GetAllEnvironmentsUsingGETParams {
	var ()
	return &GetAllEnvironmentsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetAllEnvironmentsUsingGETParamsWithContext creates a new GetAllEnvironmentsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllEnvironmentsUsingGETParamsWithContext(ctx context.Context) *GetAllEnvironmentsUsingGETParams {
	var ()
	return &GetAllEnvironmentsUsingGETParams{

		Context: ctx,
	}
}

// NewGetAllEnvironmentsUsingGETParamsWithHTTPClient creates a new GetAllEnvironmentsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllEnvironmentsUsingGETParamsWithHTTPClient(client *http.Client) *GetAllEnvironmentsUsingGETParams {
	var ()
	return &GetAllEnvironmentsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetAllEnvironmentsUsingGETParams contains all the parameters to send to the API endpoint
for the get all environments using g e t operation typically these are written to a http.Request
*/
type GetAllEnvironmentsUsingGETParams struct {

	/*Filter
	  freeTextFilter

	*/
	Filter *string
	/*IsProjectSpecific
	  isProjectSpecific

	*/
	IsProjectSpecific *bool
	/*PageNumber
	  pageNumber

	*/
	PageNumber *int32
	/*PageSize
	  pageSize

	*/
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) WithTimeout(timeout time.Duration) *GetAllEnvironmentsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) WithContext(ctx context.Context) *GetAllEnvironmentsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) WithHTTPClient(client *http.Client) *GetAllEnvironmentsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) WithFilter(filter *string) *GetAllEnvironmentsUsingGETParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithIsProjectSpecific adds the isProjectSpecific to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) WithIsProjectSpecific(isProjectSpecific *bool) *GetAllEnvironmentsUsingGETParams {
	o.SetIsProjectSpecific(isProjectSpecific)
	return o
}

// SetIsProjectSpecific adds the isProjectSpecific to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) SetIsProjectSpecific(isProjectSpecific *bool) {
	o.IsProjectSpecific = isProjectSpecific
}

// WithPageNumber adds the pageNumber to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) WithPageNumber(pageNumber *int32) *GetAllEnvironmentsUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) WithPageSize(pageSize *int32) *GetAllEnvironmentsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get all environments using g e t params
func (o *GetAllEnvironmentsUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllEnvironmentsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.IsProjectSpecific != nil {

		// query param is_project_specific
		var qrIsProjectSpecific bool
		if o.IsProjectSpecific != nil {
			qrIsProjectSpecific = *o.IsProjectSpecific
		}
		qIsProjectSpecific := swag.FormatBool(qrIsProjectSpecific)
		if qIsProjectSpecific != "" {
			if err := r.SetQueryParam("is_project_specific", qIsProjectSpecific); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page_number
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page_number", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
