// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/administration/models"
)

// GetAllEnvironmentsUsingGETReader is a Reader for the GetAllEnvironmentsUsingGET structure.
type GetAllEnvironmentsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllEnvironmentsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllEnvironmentsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllEnvironmentsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllEnvironmentsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllEnvironmentsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllEnvironmentsUsingGETOK creates a GetAllEnvironmentsUsingGETOK with default headers values
func NewGetAllEnvironmentsUsingGETOK() *GetAllEnvironmentsUsingGETOK {
	return &GetAllEnvironmentsUsingGETOK{}
}

/*GetAllEnvironmentsUsingGETOK handles this case with default header values.

OK
*/
type GetAllEnvironmentsUsingGETOK struct {
	Payload *models.PagedResultDtoEnvironmentDto
}

func (o *GetAllEnvironmentsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /environments][%d] getAllEnvironmentsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllEnvironmentsUsingGETOK) GetPayload() *models.PagedResultDtoEnvironmentDto {
	return o.Payload
}

func (o *GetAllEnvironmentsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedResultDtoEnvironmentDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllEnvironmentsUsingGETUnauthorized creates a GetAllEnvironmentsUsingGETUnauthorized with default headers values
func NewGetAllEnvironmentsUsingGETUnauthorized() *GetAllEnvironmentsUsingGETUnauthorized {
	return &GetAllEnvironmentsUsingGETUnauthorized{}
}

/*GetAllEnvironmentsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllEnvironmentsUsingGETUnauthorized struct {
}

func (o *GetAllEnvironmentsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /environments][%d] getAllEnvironmentsUsingGETUnauthorized ", 401)
}

func (o *GetAllEnvironmentsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEnvironmentsUsingGETForbidden creates a GetAllEnvironmentsUsingGETForbidden with default headers values
func NewGetAllEnvironmentsUsingGETForbidden() *GetAllEnvironmentsUsingGETForbidden {
	return &GetAllEnvironmentsUsingGETForbidden{}
}

/*GetAllEnvironmentsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllEnvironmentsUsingGETForbidden struct {
}

func (o *GetAllEnvironmentsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /environments][%d] getAllEnvironmentsUsingGETForbidden ", 403)
}

func (o *GetAllEnvironmentsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEnvironmentsUsingGETNotFound creates a GetAllEnvironmentsUsingGETNotFound with default headers values
func NewGetAllEnvironmentsUsingGETNotFound() *GetAllEnvironmentsUsingGETNotFound {
	return &GetAllEnvironmentsUsingGETNotFound{}
}

/*GetAllEnvironmentsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllEnvironmentsUsingGETNotFound struct {
}

func (o *GetAllEnvironmentsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /environments][%d] getAllEnvironmentsUsingGETNotFound ", 404)
}

func (o *GetAllEnvironmentsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
