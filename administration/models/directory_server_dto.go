// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectoryServerDto directory server dto
// swagger:model DirectoryServerDto
type DirectoryServerDto struct {

	// admin password
	AdminPassword string `json:"adminPassword,omitempty"`

	// admin user
	AdminUser string `json:"adminUser,omitempty"`

	// connectivity arguments
	ConnectivityArguments []*ArgumentDto `json:"connectivityArguments"`

	// domain
	Domain string `json:"domain,omitempty"`

	// email attribute mapping
	EmailAttributeMapping string `json:"emailAttributeMapping,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// first name attribute mapping
	FirstNameAttributeMapping string `json:"firstNameAttributeMapping,omitempty"`

	// group search filter
	GroupSearchFilter string `json:"groupSearchFilter,omitempty"`

	// group search pattern
	GroupSearchPattern string `json:"groupSearchPattern,omitempty"`

	// host name
	HostName string `json:"hostName,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last connectivity status
	LastConnectivityStatus string `json:"lastConnectivityStatus,omitempty"`

	// last connectivity test date
	LastConnectivityTestDate int64 `json:"lastConnectivityTestDate,omitempty"`

	// last connectivity test message
	LastConnectivityTestMessage string `json:"lastConnectivityTestMessage,omitempty"`

	// last name attribute mapping
	LastNameAttributeMapping string `json:"lastNameAttributeMapping,omitempty"`

	// port
	Port int32 `json:"port,omitempty"`

	// provider
	// Enum: [ACTIVE_DIRECTORY LDAP]
	Provider string `json:"provider,omitempty"`

	// search base
	SearchBase string `json:"searchBase,omitempty"`

	// ssl
	Ssl bool `json:"ssl,omitempty"`

	// user attribute mapping
	UserAttributeMapping string `json:"userAttributeMapping,omitempty"`

	// user d n search pattern
	UserDNSearchPattern string `json:"userDNSearchPattern,omitempty"`

	// user search pattern
	UserSearchPattern string `json:"userSearchPattern,omitempty"`
}

// Validate validates this directory server dto
func (m *DirectoryServerDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectivityArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryServerDto) validateConnectivityArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectivityArguments); i++ {
		if swag.IsZero(m.ConnectivityArguments[i]) { // not required
			continue
		}

		if m.ConnectivityArguments[i] != nil {
			if err := m.ConnectivityArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectivityArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var directoryServerDtoTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE_DIRECTORY","LDAP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		directoryServerDtoTypeProviderPropEnum = append(directoryServerDtoTypeProviderPropEnum, v)
	}
}

const (

	// DirectoryServerDtoProviderACTIVEDIRECTORY captures enum value "ACTIVE_DIRECTORY"
	DirectoryServerDtoProviderACTIVEDIRECTORY string = "ACTIVE_DIRECTORY"

	// DirectoryServerDtoProviderLDAP captures enum value "LDAP"
	DirectoryServerDtoProviderLDAP string = "LDAP"
)

// prop value enum
func (m *DirectoryServerDto) validateProviderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, directoryServerDtoTypeProviderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DirectoryServerDto) validateProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryServerDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryServerDto) UnmarshalBinary(b []byte) error {
	var res DirectoryServerDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
