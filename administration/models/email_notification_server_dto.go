// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EmailNotificationServerDto email notification server dto
// swagger:model EmailNotificationServerDto
type EmailNotificationServerDto struct {

	// connectivity arguments
	ConnectivityArguments []*ArgumentDto `json:"connectivityArguments"`

	// destination email
	DestinationEmail string `json:"destinationEmail,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is enabled
	IsEnabled bool `json:"isEnabled,omitempty"`

	// is s s l
	IsSSL bool `json:"isSSL,omitempty"`

	// last connectivity status
	LastConnectivityStatus string `json:"lastConnectivityStatus,omitempty"`

	// last connectivity test date
	LastConnectivityTestDate int64 `json:"lastConnectivityTestDate,omitempty"`

	// last connectivity test message
	LastConnectivityTestMessage string `json:"lastConnectivityTestMessage,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// port
	Port int32 `json:"port,omitempty"`

	// sender
	Sender string `json:"sender,omitempty"`

	// sender display name
	SenderDisplayName string `json:"senderDisplayName,omitempty"`

	// user
	User string `json:"user,omitempty"`
}

// Validate validates this email notification server dto
func (m *EmailNotificationServerDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectivityArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailNotificationServerDto) validateConnectivityArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectivityArguments); i++ {
		if swag.IsZero(m.ConnectivityArguments[i]) { // not required
			continue
		}

		if m.ConnectivityArguments[i] != nil {
			if err := m.ConnectivityArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectivityArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmailNotificationServerDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailNotificationServerDto) UnmarshalBinary(b []byte) error {
	var res EmailNotificationServerDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
