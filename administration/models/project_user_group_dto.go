// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectUserGroupDto project user group dto
// swagger:model ProjectUserGroupDto
type ProjectUserGroupDto struct {

	// description
	Description string `json:"description,omitempty"`

	// directory server Id
	DirectoryServerID int64 `json:"directoryServerId,omitempty"`

	// dn
	Dn string `json:"dn,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is project party
	IsProjectParty bool `json:"isProjectParty,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project role
	ProjectRole *RoleDto `json:"projectRole,omitempty"`

	// role
	Role *RoleDto `json:"role,omitempty"`

	// users
	Users []*UserDto `json:"users"`
}

// Validate validates this project user group dto
func (m *ProjectUserGroupDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectUserGroupDto) validateProjectRole(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectRole) { // not required
		return nil
	}

	if m.ProjectRole != nil {
		if err := m.ProjectRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectRole")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectUserGroupDto) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectUserGroupDto) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectUserGroupDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectUserGroupDto) UnmarshalBinary(b []byte) error {
	var res ProjectUserGroupDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
