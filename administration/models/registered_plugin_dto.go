// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisteredPluginDto registered plugin dto
// swagger:model RegisteredPluginDto
type RegisteredPluginDto struct {

	// creation date
	CreationDate int64 `json:"creationDate,omitempty"`

	// creator
	Creator string `json:"creator,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// icon Url
	IconURL string `json:"iconUrl,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// modification date
	ModificationDate int64 `json:"modificationDate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// plugin server
	PluginServer *RegisteredPluginServerDto `json:"pluginServer,omitempty"`

	// relative Url
	RelativeURL string `json:"relativeUrl,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this registered plugin dto
func (m *RegisteredPluginDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePluginServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisteredPluginDto) validatePluginServer(formats strfmt.Registry) error {

	if swag.IsZero(m.PluginServer) { // not required
		return nil
	}

	if m.PluginServer != nil {
		if err := m.PluginServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pluginServer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisteredPluginDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisteredPluginDto) UnmarshalBinary(b []byte) error {
	var res RegisteredPluginDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
