// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserPermissionsDto user permissions dto
// swagger:model UserPermissionsDto
type UserPermissionsDto struct {

	// application
	Application *CRUDPermissionsDto `json:"application,omitempty"`

	// application source management
	ApplicationSourceManagement *CRUDPermissionsDto `json:"applicationSourceManagement,omitempty"`

	// cds
	Cds *EnablementDto `json:"cds,omitempty"`

	// change password
	ChangePassword *ChangePasswordDto `json:"changePassword,omitempty"`

	// cta
	Cta *EnablementDto `json:"cta,omitempty"`

	// dashboard
	Dashboard *DashboardPermissionsDto `json:"dashboard,omitempty"`

	// database
	Database *DatabaseDto `json:"database,omitempty"`

	// domain verification
	DomainVerification *EnablementDto `json:"domainVerification,omitempty"`

	// dsl manifests
	DslManifests *EnablementDto `json:"dslManifests,omitempty"`

	// email templates management
	EmailTemplatesManagement *CRUDPermissionsDto `json:"emailTemplatesManagement,omitempty"`

	// environment management
	EnvironmentManagement *CRUDPermissionsDto `json:"environmentManagement,omitempty"`

	// environment token
	EnvironmentToken *CRUDPermissionsDto `json:"environmentToken,omitempty"`

	// file sources
	FileSources *CRUDPermissionsDto `json:"fileSources,omitempty"`

	// help about
	HelpAbout *HelpAboutDto `json:"helpAbout,omitempty"`

	// maintenance window
	MaintenanceWindow *CRUDPermissionsDto `json:"maintenanceWindow,omitempty"`

	// manage endpoint
	ManageEndpoint *CRUDPermissionsDto `json:"manageEndpoint,omitempty"`

	// manage freeze period
	ManageFreezePeriod *CRUDPermissionsDto `json:"manageFreezePeriod,omitempty"`

	// microservices
	Microservices *EnablementDto `json:"microservices,omitempty"`

	// navigation guidance
	NavigationGuidance *NavigationGuidanceDto `json:"navigationGuidance,omitempty"`

	// payment plan
	PaymentPlan *EnablementDto `json:"paymentPlan,omitempty"`

	// plugin
	Plugin *CRUDPermissionsDto `json:"plugin,omitempty"`

	// pop
	Pop *POPPermissionDto `json:"pop,omitempty"`

	// portfolio licensing
	PortfolioLicensing *EnablementDto `json:"portfolioLicensing,omitempty"`

	// project management
	ProjectManagement *CRUDPermissionsDto `json:"projectManagement,omitempty"`

	// project party management
	ProjectPartyManagement *CRUDPermissionsDto `json:"projectPartyManagement,omitempty"`

	// redirect to landing page
	RedirectToLandingPage *RedirectToLandingPageDto `json:"redirectToLandingPage,omitempty"`

	// release
	Release *ReleasePermissionsDto `json:"release,omitempty"`

	// release score
	ReleaseScore *EnablementDto `json:"releaseScore,omitempty"`

	// release token template
	ReleaseTokenTemplate *CRUDPermissionsDto `json:"releaseTokenTemplate,omitempty"`

	// reset password
	ResetPassword *EnablementDto `json:"resetPassword,omitempty"`

	// role
	Role *CRUDPermissionsDto `json:"role,omitempty"`

	// saml
	Saml *EnablementDto `json:"saml,omitempty"`

	// send customer feedback
	SendCustomerFeedback *EnablementDto `json:"sendCustomerFeedback,omitempty"`

	// send invitation
	SendInvitation *EnablementDto `json:"sendInvitation,omitempty"`

	// smtp
	SMTP *SMTPDto `json:"smtp,omitempty"`

	// switch tenant page
	SwitchTenantPage *SwitchTenantPageDto `json:"switchTenantPage,omitempty"`

	// tar
	Tar *EnablementDto `json:"tar,omitempty"`

	// tenant management
	TenantManagement *EnablementDto `json:"tenantManagement,omitempty"`

	// tenant marketing information
	TenantMarketingInformation *TenantMarketingInformationDto `json:"tenantMarketingInformation,omitempty"`

	// track
	Track *TrackPermissionsDto `json:"track,omitempty"`

	// user management
	UserManagement *UserManagementDto `json:"userManagement,omitempty"`

	// user management system
	UserManagementSystem *UserManagementSystemDto `json:"userManagementSystem,omitempty"`
}

// Validate validates this user permissions dto
func (m *UserPermissionsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationSourceManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDslManifests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailTemplatesManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpAbout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManageEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManageFreezePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMicroservices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNavigationGuidance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortfolioLicensing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectPartyManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectToLandingPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseTokenTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaml(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendCustomerFeedback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendInvitation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitchTenantPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantMarketingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserManagementSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermissionsDto) validateApplication(formats strfmt.Registry) error {

	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateApplicationSourceManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationSourceManagement) { // not required
		return nil
	}

	if m.ApplicationSourceManagement != nil {
		if err := m.ApplicationSourceManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationSourceManagement")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateCds(formats strfmt.Registry) error {

	if swag.IsZero(m.Cds) { // not required
		return nil
	}

	if m.Cds != nil {
		if err := m.Cds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cds")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateChangePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangePassword) { // not required
		return nil
	}

	if m.ChangePassword != nil {
		if err := m.ChangePassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changePassword")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateCta(formats strfmt.Registry) error {

	if swag.IsZero(m.Cta) { // not required
		return nil
	}

	if m.Cta != nil {
		if err := m.Cta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cta")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateDashboard(formats strfmt.Registry) error {

	if swag.IsZero(m.Dashboard) { // not required
		return nil
	}

	if m.Dashboard != nil {
		if err := m.Dashboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateDatabase(formats strfmt.Registry) error {

	if swag.IsZero(m.Database) { // not required
		return nil
	}

	if m.Database != nil {
		if err := m.Database.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateDomainVerification(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainVerification) { // not required
		return nil
	}

	if m.DomainVerification != nil {
		if err := m.DomainVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domainVerification")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateDslManifests(formats strfmt.Registry) error {

	if swag.IsZero(m.DslManifests) { // not required
		return nil
	}

	if m.DslManifests != nil {
		if err := m.DslManifests.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dslManifests")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateEmailTemplatesManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailTemplatesManagement) { // not required
		return nil
	}

	if m.EmailTemplatesManagement != nil {
		if err := m.EmailTemplatesManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailTemplatesManagement")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateEnvironmentManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentManagement) { // not required
		return nil
	}

	if m.EnvironmentManagement != nil {
		if err := m.EnvironmentManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentManagement")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateEnvironmentToken(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentToken) { // not required
		return nil
	}

	if m.EnvironmentToken != nil {
		if err := m.EnvironmentToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentToken")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateFileSources(formats strfmt.Registry) error {

	if swag.IsZero(m.FileSources) { // not required
		return nil
	}

	if m.FileSources != nil {
		if err := m.FileSources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSources")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateHelpAbout(formats strfmt.Registry) error {

	if swag.IsZero(m.HelpAbout) { // not required
		return nil
	}

	if m.HelpAbout != nil {
		if err := m.HelpAbout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helpAbout")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateMaintenanceWindow(formats strfmt.Registry) error {

	if swag.IsZero(m.MaintenanceWindow) { // not required
		return nil
	}

	if m.MaintenanceWindow != nil {
		if err := m.MaintenanceWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceWindow")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateManageEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.ManageEndpoint) { // not required
		return nil
	}

	if m.ManageEndpoint != nil {
		if err := m.ManageEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manageEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateManageFreezePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.ManageFreezePeriod) { // not required
		return nil
	}

	if m.ManageFreezePeriod != nil {
		if err := m.ManageFreezePeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manageFreezePeriod")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateMicroservices(formats strfmt.Registry) error {

	if swag.IsZero(m.Microservices) { // not required
		return nil
	}

	if m.Microservices != nil {
		if err := m.Microservices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("microservices")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateNavigationGuidance(formats strfmt.Registry) error {

	if swag.IsZero(m.NavigationGuidance) { // not required
		return nil
	}

	if m.NavigationGuidance != nil {
		if err := m.NavigationGuidance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("navigationGuidance")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validatePaymentPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentPlan) { // not required
		return nil
	}

	if m.PaymentPlan != nil {
		if err := m.PaymentPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentPlan")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validatePlugin(formats strfmt.Registry) error {

	if swag.IsZero(m.Plugin) { // not required
		return nil
	}

	if m.Plugin != nil {
		if err := m.Plugin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugin")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validatePop(formats strfmt.Registry) error {

	if swag.IsZero(m.Pop) { // not required
		return nil
	}

	if m.Pop != nil {
		if err := m.Pop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pop")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validatePortfolioLicensing(formats strfmt.Registry) error {

	if swag.IsZero(m.PortfolioLicensing) { // not required
		return nil
	}

	if m.PortfolioLicensing != nil {
		if err := m.PortfolioLicensing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portfolioLicensing")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateProjectManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectManagement) { // not required
		return nil
	}

	if m.ProjectManagement != nil {
		if err := m.ProjectManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectManagement")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateProjectPartyManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectPartyManagement) { // not required
		return nil
	}

	if m.ProjectPartyManagement != nil {
		if err := m.ProjectPartyManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectPartyManagement")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateRedirectToLandingPage(formats strfmt.Registry) error {

	if swag.IsZero(m.RedirectToLandingPage) { // not required
		return nil
	}

	if m.RedirectToLandingPage != nil {
		if err := m.RedirectToLandingPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirectToLandingPage")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateReleaseScore(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseScore) { // not required
		return nil
	}

	if m.ReleaseScore != nil {
		if err := m.ReleaseScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseScore")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateReleaseTokenTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseTokenTemplate) { // not required
		return nil
	}

	if m.ReleaseTokenTemplate != nil {
		if err := m.ReleaseTokenTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("releaseTokenTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateResetPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.ResetPassword) { // not required
		return nil
	}

	if m.ResetPassword != nil {
		if err := m.ResetPassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resetPassword")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateSaml(formats strfmt.Registry) error {

	if swag.IsZero(m.Saml) { // not required
		return nil
	}

	if m.Saml != nil {
		if err := m.Saml.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateSendCustomerFeedback(formats strfmt.Registry) error {

	if swag.IsZero(m.SendCustomerFeedback) { // not required
		return nil
	}

	if m.SendCustomerFeedback != nil {
		if err := m.SendCustomerFeedback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sendCustomerFeedback")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateSendInvitation(formats strfmt.Registry) error {

	if swag.IsZero(m.SendInvitation) { // not required
		return nil
	}

	if m.SendInvitation != nil {
		if err := m.SendInvitation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sendInvitation")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateSMTP(formats strfmt.Registry) error {

	if swag.IsZero(m.SMTP) { // not required
		return nil
	}

	if m.SMTP != nil {
		if err := m.SMTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtp")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateSwitchTenantPage(formats strfmt.Registry) error {

	if swag.IsZero(m.SwitchTenantPage) { // not required
		return nil
	}

	if m.SwitchTenantPage != nil {
		if err := m.SwitchTenantPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switchTenantPage")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateTar(formats strfmt.Registry) error {

	if swag.IsZero(m.Tar) { // not required
		return nil
	}

	if m.Tar != nil {
		if err := m.Tar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tar")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateTenantManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantManagement) { // not required
		return nil
	}

	if m.TenantManagement != nil {
		if err := m.TenantManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenantManagement")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateTenantMarketingInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantMarketingInformation) { // not required
		return nil
	}

	if m.TenantMarketingInformation != nil {
		if err := m.TenantMarketingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenantMarketingInformation")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateTrack(formats strfmt.Registry) error {

	if swag.IsZero(m.Track) { // not required
		return nil
	}

	if m.Track != nil {
		if err := m.Track.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("track")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateUserManagement(formats strfmt.Registry) error {

	if swag.IsZero(m.UserManagement) { // not required
		return nil
	}

	if m.UserManagement != nil {
		if err := m.UserManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userManagement")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermissionsDto) validateUserManagementSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.UserManagementSystem) { // not required
		return nil
	}

	if m.UserManagementSystem != nil {
		if err := m.UserManagementSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userManagementSystem")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermissionsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermissionsDto) UnmarshalBinary(b []byte) error {
	var res UserPermissionsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
