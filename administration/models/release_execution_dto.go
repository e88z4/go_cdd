// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseExecutionDto release execution dto
// swagger:model ReleaseExecutionDto
type ReleaseExecutionDto struct {

	// allowed statuses
	AllowedStatuses []string `json:"allowedStatuses"`

	// deny stop reason
	// Enum: [PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS RELEASE_NOT_IN_EXECUTION_STATE TRANSITION_DOES_NOT_EXIST ALREADY_IN_STATE PHASE_NOT_APPROVED_TO_RUN MAX_ALLOWED_RUNNING_RELEASES_REACHED PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK PHASE_NOT_IN_EXECUTION_STATE TASK_MISSING_PARAMS ON_FAILURE_PHASE_IS_RUNNING CALLER_OF_ON_ERROR_PHASE_IS_RUNNING]
	DenyStopReason string `json:"denyStopReason,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// release Id
	ReleaseID int64 `json:"releaseId,omitempty"`

	// status
	// Enum: [DESIGN RUNNING RUNNING_WITH_FAILURES DONE]
	Status string `json:"status,omitempty"`

	// status description
	StatusDescription string `json:"statusDescription,omitempty"`

	// status reason
	// Enum: [SUCCESS FAILURE_DEPLOYMENT FAILURE_PERFORMANCE FAILURE_ENVIRONMENT FAILURE_FUNCTIONAL FAILURE_GENERAL NOT_IN_USE]
	StatusReason string `json:"statusReason,omitempty"`
}

// Validate validates this release execution dto
func (m *ReleaseExecutionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDenyStopReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var releaseExecutionDtoAllowedStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DESIGN","RUNNING","RUNNING_WITH_FAILURES","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseExecutionDtoAllowedStatusesItemsEnum = append(releaseExecutionDtoAllowedStatusesItemsEnum, v)
	}
}

func (m *ReleaseExecutionDto) validateAllowedStatusesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, releaseExecutionDtoAllowedStatusesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseExecutionDto) validateAllowedStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedStatuses); i++ {

		// value enum
		if err := m.validateAllowedStatusesItemsEnum("allowedStatuses"+"."+strconv.Itoa(i), "body", m.AllowedStatuses[i]); err != nil {
			return err
		}

	}

	return nil
}

var releaseExecutionDtoTypeDenyStopReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS","RELEASE_NOT_IN_EXECUTION_STATE","TRANSITION_DOES_NOT_EXIST","ALREADY_IN_STATE","PHASE_NOT_APPROVED_TO_RUN","MAX_ALLOWED_RUNNING_RELEASES_REACHED","PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK","PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE","RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK","PHASE_NOT_IN_EXECUTION_STATE","TASK_MISSING_PARAMS","ON_FAILURE_PHASE_IS_RUNNING","CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseExecutionDtoTypeDenyStopReasonPropEnum = append(releaseExecutionDtoTypeDenyStopReasonPropEnum, v)
	}
}

const (

	// ReleaseExecutionDtoDenyStopReasonPHASECONTAINSTASKWITHMISSINGPARAMS captures enum value "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"
	ReleaseExecutionDtoDenyStopReasonPHASECONTAINSTASKWITHMISSINGPARAMS string = "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"

	// ReleaseExecutionDtoDenyStopReasonRELEASENOTINEXECUTIONSTATE captures enum value "RELEASE_NOT_IN_EXECUTION_STATE"
	ReleaseExecutionDtoDenyStopReasonRELEASENOTINEXECUTIONSTATE string = "RELEASE_NOT_IN_EXECUTION_STATE"

	// ReleaseExecutionDtoDenyStopReasonTRANSITIONDOESNOTEXIST captures enum value "TRANSITION_DOES_NOT_EXIST"
	ReleaseExecutionDtoDenyStopReasonTRANSITIONDOESNOTEXIST string = "TRANSITION_DOES_NOT_EXIST"

	// ReleaseExecutionDtoDenyStopReasonALREADYINSTATE captures enum value "ALREADY_IN_STATE"
	ReleaseExecutionDtoDenyStopReasonALREADYINSTATE string = "ALREADY_IN_STATE"

	// ReleaseExecutionDtoDenyStopReasonPHASENOTAPPROVEDTORUN captures enum value "PHASE_NOT_APPROVED_TO_RUN"
	ReleaseExecutionDtoDenyStopReasonPHASENOTAPPROVEDTORUN string = "PHASE_NOT_APPROVED_TO_RUN"

	// ReleaseExecutionDtoDenyStopReasonMAXALLOWEDRUNNINGRELEASESREACHED captures enum value "MAX_ALLOWED_RUNNING_RELEASES_REACHED"
	ReleaseExecutionDtoDenyStopReasonMAXALLOWEDRUNNINGRELEASESREACHED string = "MAX_ALLOWED_RUNNING_RELEASES_REACHED"

	// ReleaseExecutionDtoDenyStopReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK captures enum value "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"
	ReleaseExecutionDtoDenyStopReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK string = "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"

	// ReleaseExecutionDtoDenyStopReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE captures enum value "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"
	ReleaseExecutionDtoDenyStopReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE string = "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"

	// ReleaseExecutionDtoDenyStopReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK captures enum value "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"
	ReleaseExecutionDtoDenyStopReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK string = "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"

	// ReleaseExecutionDtoDenyStopReasonPHASENOTINEXECUTIONSTATE captures enum value "PHASE_NOT_IN_EXECUTION_STATE"
	ReleaseExecutionDtoDenyStopReasonPHASENOTINEXECUTIONSTATE string = "PHASE_NOT_IN_EXECUTION_STATE"

	// ReleaseExecutionDtoDenyStopReasonTASKMISSINGPARAMS captures enum value "TASK_MISSING_PARAMS"
	ReleaseExecutionDtoDenyStopReasonTASKMISSINGPARAMS string = "TASK_MISSING_PARAMS"

	// ReleaseExecutionDtoDenyStopReasonONFAILUREPHASEISRUNNING captures enum value "ON_FAILURE_PHASE_IS_RUNNING"
	ReleaseExecutionDtoDenyStopReasonONFAILUREPHASEISRUNNING string = "ON_FAILURE_PHASE_IS_RUNNING"

	// ReleaseExecutionDtoDenyStopReasonCALLEROFONERRORPHASEISRUNNING captures enum value "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
	ReleaseExecutionDtoDenyStopReasonCALLEROFONERRORPHASEISRUNNING string = "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
)

// prop value enum
func (m *ReleaseExecutionDto) validateDenyStopReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, releaseExecutionDtoTypeDenyStopReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseExecutionDto) validateDenyStopReason(formats strfmt.Registry) error {

	if swag.IsZero(m.DenyStopReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateDenyStopReasonEnum("denyStopReason", "body", m.DenyStopReason); err != nil {
		return err
	}

	return nil
}

var releaseExecutionDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DESIGN","RUNNING","RUNNING_WITH_FAILURES","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseExecutionDtoTypeStatusPropEnum = append(releaseExecutionDtoTypeStatusPropEnum, v)
	}
}

const (

	// ReleaseExecutionDtoStatusDESIGN captures enum value "DESIGN"
	ReleaseExecutionDtoStatusDESIGN string = "DESIGN"

	// ReleaseExecutionDtoStatusRUNNING captures enum value "RUNNING"
	ReleaseExecutionDtoStatusRUNNING string = "RUNNING"

	// ReleaseExecutionDtoStatusRUNNINGWITHFAILURES captures enum value "RUNNING_WITH_FAILURES"
	ReleaseExecutionDtoStatusRUNNINGWITHFAILURES string = "RUNNING_WITH_FAILURES"

	// ReleaseExecutionDtoStatusDONE captures enum value "DONE"
	ReleaseExecutionDtoStatusDONE string = "DONE"
)

// prop value enum
func (m *ReleaseExecutionDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, releaseExecutionDtoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseExecutionDto) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var releaseExecutionDtoTypeStatusReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILURE_DEPLOYMENT","FAILURE_PERFORMANCE","FAILURE_ENVIRONMENT","FAILURE_FUNCTIONAL","FAILURE_GENERAL","NOT_IN_USE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseExecutionDtoTypeStatusReasonPropEnum = append(releaseExecutionDtoTypeStatusReasonPropEnum, v)
	}
}

const (

	// ReleaseExecutionDtoStatusReasonSUCCESS captures enum value "SUCCESS"
	ReleaseExecutionDtoStatusReasonSUCCESS string = "SUCCESS"

	// ReleaseExecutionDtoStatusReasonFAILUREDEPLOYMENT captures enum value "FAILURE_DEPLOYMENT"
	ReleaseExecutionDtoStatusReasonFAILUREDEPLOYMENT string = "FAILURE_DEPLOYMENT"

	// ReleaseExecutionDtoStatusReasonFAILUREPERFORMANCE captures enum value "FAILURE_PERFORMANCE"
	ReleaseExecutionDtoStatusReasonFAILUREPERFORMANCE string = "FAILURE_PERFORMANCE"

	// ReleaseExecutionDtoStatusReasonFAILUREENVIRONMENT captures enum value "FAILURE_ENVIRONMENT"
	ReleaseExecutionDtoStatusReasonFAILUREENVIRONMENT string = "FAILURE_ENVIRONMENT"

	// ReleaseExecutionDtoStatusReasonFAILUREFUNCTIONAL captures enum value "FAILURE_FUNCTIONAL"
	ReleaseExecutionDtoStatusReasonFAILUREFUNCTIONAL string = "FAILURE_FUNCTIONAL"

	// ReleaseExecutionDtoStatusReasonFAILUREGENERAL captures enum value "FAILURE_GENERAL"
	ReleaseExecutionDtoStatusReasonFAILUREGENERAL string = "FAILURE_GENERAL"

	// ReleaseExecutionDtoStatusReasonNOTINUSE captures enum value "NOT_IN_USE"
	ReleaseExecutionDtoStatusReasonNOTINUSE string = "NOT_IN_USE"
)

// prop value enum
func (m *ReleaseExecutionDto) validateStatusReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, releaseExecutionDtoTypeStatusReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseExecutionDto) validateStatusReason(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusReasonEnum("statusReason", "body", m.StatusReason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseExecutionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseExecutionDto) UnmarshalBinary(b []byte) error {
	var res ReleaseExecutionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
