// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecurrenceDto recurrence dto
// swagger:model RecurrenceDto
type RecurrenceDto struct {

	// recurrence pattern
	// Enum: [DAILY WEEKLY]
	RecurrencePattern string `json:"recurrencePattern,omitempty"`

	// time zone Id
	TimeZoneID string `json:"timeZoneId,omitempty"`
}

// Validate validates this recurrence dto
func (m *RecurrenceDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecurrencePattern(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recurrenceDtoTypeRecurrencePatternPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DAILY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recurrenceDtoTypeRecurrencePatternPropEnum = append(recurrenceDtoTypeRecurrencePatternPropEnum, v)
	}
}

const (

	// RecurrenceDtoRecurrencePatternDAILY captures enum value "DAILY"
	RecurrenceDtoRecurrencePatternDAILY string = "DAILY"

	// RecurrenceDtoRecurrencePatternWEEKLY captures enum value "WEEKLY"
	RecurrenceDtoRecurrencePatternWEEKLY string = "WEEKLY"
)

// prop value enum
func (m *RecurrenceDto) validateRecurrencePatternEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, recurrenceDtoTypeRecurrencePatternPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RecurrenceDto) validateRecurrencePattern(formats strfmt.Registry) error {

	if swag.IsZero(m.RecurrencePattern) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecurrencePatternEnum("recurrencePattern", "body", m.RecurrencePattern); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecurrenceDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecurrenceDto) UnmarshalBinary(b []byte) error {
	var res RecurrenceDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
