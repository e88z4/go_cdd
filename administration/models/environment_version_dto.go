// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentVersionDto environment version dto
// swagger:model EnvironmentVersionDto
type EnvironmentVersionDto struct {

	// application
	Application *NamedIdentifiableDto `json:"application,omitempty"`

	// application version
	ApplicationVersion *NamedIdentifiableDto `json:"applicationVersion,omitempty"`

	// build number
	BuildNumber string `json:"buildNumber,omitempty"`

	// commit Id
	CommitID string `json:"commitId,omitempty"`

	// environment
	Environment *NamedIdentifiableDto `json:"environment,omitempty"`

	// external status
	ExternalStatus string `json:"externalStatus,omitempty"`

	// phase
	Phase *NamedIdentifiableDto `json:"phase,omitempty"`

	// promotion date
	PromotionDate int64 `json:"promotionDate,omitempty"`

	// release
	Release *NamedIdentifiableDto `json:"release,omitempty"`

	// status
	// Enum: [FAILED DEPLOYED SCHEDULED RUNNING]
	Status string `json:"status,omitempty"`

	// task
	Task *NamedIdentifiableDto `json:"task,omitempty"`
}

// Validate validates this environment version dto
func (m *EnvironmentVersionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentVersionDto) validateApplication(formats strfmt.Registry) error {

	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentVersionDto) validateApplicationVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationVersion) { // not required
		return nil
	}

	if m.ApplicationVersion != nil {
		if err := m.ApplicationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationVersion")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentVersionDto) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if m.Environment != nil {
		if err := m.Environment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentVersionDto) validatePhase(formats strfmt.Registry) error {

	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentVersionDto) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

var environmentVersionDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAILED","DEPLOYED","SCHEDULED","RUNNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentVersionDtoTypeStatusPropEnum = append(environmentVersionDtoTypeStatusPropEnum, v)
	}
}

const (

	// EnvironmentVersionDtoStatusFAILED captures enum value "FAILED"
	EnvironmentVersionDtoStatusFAILED string = "FAILED"

	// EnvironmentVersionDtoStatusDEPLOYED captures enum value "DEPLOYED"
	EnvironmentVersionDtoStatusDEPLOYED string = "DEPLOYED"

	// EnvironmentVersionDtoStatusSCHEDULED captures enum value "SCHEDULED"
	EnvironmentVersionDtoStatusSCHEDULED string = "SCHEDULED"

	// EnvironmentVersionDtoStatusRUNNING captures enum value "RUNNING"
	EnvironmentVersionDtoStatusRUNNING string = "RUNNING"
)

// prop value enum
func (m *EnvironmentVersionDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentVersionDtoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentVersionDto) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentVersionDto) validateTask(formats strfmt.Registry) error {

	if swag.IsZero(m.Task) { // not required
		return nil
	}

	if m.Task != nil {
		if err := m.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentVersionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentVersionDto) UnmarshalBinary(b []byte) error {
	var res EnvironmentVersionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
