// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicenseActivityDto license activity dto
// swagger:model LicenseActivityDto
type LicenseActivityDto struct {

	// activity type
	// Enum: [ERROR WARNING INFO]
	ActivityType string `json:"activityType,omitempty"`

	// class name
	// Required: true
	// Enum: [LicenseActivityDto]
	ClassName *string `json:"className"`

	// content
	Content *LicenseActivityContentDto `json:"content,omitempty"`

	// creation date
	CreationDate int64 `json:"creationDate,omitempty"`

	// creator
	Creator *UserDto `json:"creator,omitempty"`

	// entity name
	EntityName string `json:"entityName,omitempty"`

	// event category name
	EventCategoryName string `json:"eventCategoryName,omitempty"`

	// event name
	EventName string `json:"eventName,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// phase Id
	PhaseID int64 `json:"phaseId,omitempty"`

	// project
	Project *NamedIdentifiableDto `json:"project,omitempty"`

	// release Id
	ReleaseID int64 `json:"releaseId,omitempty"`

	// status
	// Enum: [FINAL ACTIVE RESOLVED]
	Status string `json:"status,omitempty"`

	// task Id
	TaskID int64 `json:"taskId,omitempty"`
}

// Validate validates this license activity dto
func (m *LicenseActivityDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var licenseActivityDtoTypeActivityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ERROR","WARNING","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseActivityDtoTypeActivityTypePropEnum = append(licenseActivityDtoTypeActivityTypePropEnum, v)
	}
}

const (

	// LicenseActivityDtoActivityTypeERROR captures enum value "ERROR"
	LicenseActivityDtoActivityTypeERROR string = "ERROR"

	// LicenseActivityDtoActivityTypeWARNING captures enum value "WARNING"
	LicenseActivityDtoActivityTypeWARNING string = "WARNING"

	// LicenseActivityDtoActivityTypeINFO captures enum value "INFO"
	LicenseActivityDtoActivityTypeINFO string = "INFO"
)

// prop value enum
func (m *LicenseActivityDto) validateActivityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseActivityDtoTypeActivityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseActivityDto) validateActivityType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActivityTypeEnum("activityType", "body", m.ActivityType); err != nil {
		return err
	}

	return nil
}

var licenseActivityDtoTypeClassNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LicenseActivityDto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseActivityDtoTypeClassNamePropEnum = append(licenseActivityDtoTypeClassNamePropEnum, v)
	}
}

const (

	// LicenseActivityDtoClassNameLicenseActivityDto captures enum value "LicenseActivityDto"
	LicenseActivityDtoClassNameLicenseActivityDto string = "LicenseActivityDto"
)

// prop value enum
func (m *LicenseActivityDto) validateClassNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseActivityDtoTypeClassNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseActivityDto) validateClassName(formats strfmt.Registry) error {

	if err := validate.Required("className", "body", m.ClassName); err != nil {
		return err
	}

	// value enum
	if err := m.validateClassNameEnum("className", "body", *m.ClassName); err != nil {
		return err
	}

	return nil
}

func (m *LicenseActivityDto) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if m.Content != nil {
		if err := m.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseActivityDto) validateCreator(formats strfmt.Registry) error {

	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseActivityDto) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

var licenseActivityDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FINAL","ACTIVE","RESOLVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseActivityDtoTypeStatusPropEnum = append(licenseActivityDtoTypeStatusPropEnum, v)
	}
}

const (

	// LicenseActivityDtoStatusFINAL captures enum value "FINAL"
	LicenseActivityDtoStatusFINAL string = "FINAL"

	// LicenseActivityDtoStatusACTIVE captures enum value "ACTIVE"
	LicenseActivityDtoStatusACTIVE string = "ACTIVE"

	// LicenseActivityDtoStatusRESOLVED captures enum value "RESOLVED"
	LicenseActivityDtoStatusRESOLVED string = "RESOLVED"
)

// prop value enum
func (m *LicenseActivityDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseActivityDtoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseActivityDto) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseActivityDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseActivityDto) UnmarshalBinary(b []byte) error {
	var res LicenseActivityDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
