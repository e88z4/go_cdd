// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskExecutionDto task execution dto
// swagger:model TaskExecutionDto
type TaskExecutionDto struct {

	// allowed statuses
	AllowedStatuses []string `json:"allowedStatuses"`

	// deny rerun reason
	// Enum: [PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS RELEASE_NOT_IN_EXECUTION_STATE TRANSITION_DOES_NOT_EXIST ALREADY_IN_STATE PHASE_NOT_APPROVED_TO_RUN MAX_ALLOWED_RUNNING_RELEASES_REACHED PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK PHASE_NOT_IN_EXECUTION_STATE TASK_MISSING_PARAMS ON_FAILURE_PHASE_IS_RUNNING CALLER_OF_ON_ERROR_PHASE_IS_RUNNING]
	DenyRerunReason string `json:"denyRerunReason,omitempty"`

	// deployed application versions
	DeployedApplicationVersions []*ApplicationVersionDto `json:"deployedApplicationVersions"`

	// detailed status description
	DetailedStatusDescription string `json:"detailedStatusDescription,omitempty"`

	// detailed status description Json
	DetailedStatusDescriptionJSON interface{} `json:"detailedStatusDescriptionJson,omitempty"`

	// detailed status severity
	// Enum: [INFORMATION WARNING ERROR]
	DetailedStatusSeverity string `json:"detailedStatusSeverity,omitempty"`

	// end date
	EndDate int64 `json:"endDate,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// percent completed
	PercentCompleted float32 `json:"percentCompleted,omitempty"`

	// phase Id
	PhaseID int64 `json:"phaseId,omitempty"`

	// start date
	StartDate int64 `json:"startDate,omitempty"`

	// status
	// Enum: [DESIGN READY PENDING RUNNING FAILED SKIPPED DONE DEFERRED STOPPED RUNNING_WITH_DETAILED_STATUS]
	Status string `json:"status,omitempty"`

	// status description
	StatusDescription string `json:"statusDescription,omitempty"`

	// task execution disabled
	TaskExecutionDisabled bool `json:"taskExecutionDisabled,omitempty"`

	// task Id
	TaskID int64 `json:"taskId,omitempty"`
}

// Validate validates this task execution dto
func (m *TaskExecutionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDenyRerunReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployedApplicationVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailedStatusSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskExecutionDtoAllowedStatusesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DESIGN","READY","PENDING","RUNNING","FAILED","SKIPPED","DONE","DEFERRED","STOPPED","RUNNING_WITH_DETAILED_STATUS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionDtoAllowedStatusesItemsEnum = append(taskExecutionDtoAllowedStatusesItemsEnum, v)
	}
}

func (m *TaskExecutionDto) validateAllowedStatusesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskExecutionDtoAllowedStatusesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionDto) validateAllowedStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedStatuses); i++ {

		// value enum
		if err := m.validateAllowedStatusesItemsEnum("allowedStatuses"+"."+strconv.Itoa(i), "body", m.AllowedStatuses[i]); err != nil {
			return err
		}

	}

	return nil
}

var taskExecutionDtoTypeDenyRerunReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS","RELEASE_NOT_IN_EXECUTION_STATE","TRANSITION_DOES_NOT_EXIST","ALREADY_IN_STATE","PHASE_NOT_APPROVED_TO_RUN","MAX_ALLOWED_RUNNING_RELEASES_REACHED","PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK","PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE","RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK","PHASE_NOT_IN_EXECUTION_STATE","TASK_MISSING_PARAMS","ON_FAILURE_PHASE_IS_RUNNING","CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionDtoTypeDenyRerunReasonPropEnum = append(taskExecutionDtoTypeDenyRerunReasonPropEnum, v)
	}
}

const (

	// TaskExecutionDtoDenyRerunReasonPHASECONTAINSTASKWITHMISSINGPARAMS captures enum value "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"
	TaskExecutionDtoDenyRerunReasonPHASECONTAINSTASKWITHMISSINGPARAMS string = "PHASE_CONTAINS_TASK_WITH_MISSING_PARAMS"

	// TaskExecutionDtoDenyRerunReasonRELEASENOTINEXECUTIONSTATE captures enum value "RELEASE_NOT_IN_EXECUTION_STATE"
	TaskExecutionDtoDenyRerunReasonRELEASENOTINEXECUTIONSTATE string = "RELEASE_NOT_IN_EXECUTION_STATE"

	// TaskExecutionDtoDenyRerunReasonTRANSITIONDOESNOTEXIST captures enum value "TRANSITION_DOES_NOT_EXIST"
	TaskExecutionDtoDenyRerunReasonTRANSITIONDOESNOTEXIST string = "TRANSITION_DOES_NOT_EXIST"

	// TaskExecutionDtoDenyRerunReasonALREADYINSTATE captures enum value "ALREADY_IN_STATE"
	TaskExecutionDtoDenyRerunReasonALREADYINSTATE string = "ALREADY_IN_STATE"

	// TaskExecutionDtoDenyRerunReasonPHASENOTAPPROVEDTORUN captures enum value "PHASE_NOT_APPROVED_TO_RUN"
	TaskExecutionDtoDenyRerunReasonPHASENOTAPPROVEDTORUN string = "PHASE_NOT_APPROVED_TO_RUN"

	// TaskExecutionDtoDenyRerunReasonMAXALLOWEDRUNNINGRELEASESREACHED captures enum value "MAX_ALLOWED_RUNNING_RELEASES_REACHED"
	TaskExecutionDtoDenyRerunReasonMAXALLOWEDRUNNINGRELEASESREACHED string = "MAX_ALLOWED_RUNNING_RELEASES_REACHED"

	// TaskExecutionDtoDenyRerunReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK captures enum value "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"
	TaskExecutionDtoDenyRerunReasonPHASEISASSOCIATEDTOPRODUCTIONOFRELEASETRACK string = "PHASE_IS_ASSOCIATED_TO_PRODUCTION_OF_RELEASE_TRACK"

	// TaskExecutionDtoDenyRerunReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE captures enum value "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"
	TaskExecutionDtoDenyRerunReasonPHASEISASSOCIATEDTOREQUIREDAPPROVEMILESTONE string = "PHASE_IS_ASSOCIATED_TO_REQUIRED_APPROVE_MILESTONE"

	// TaskExecutionDtoDenyRerunReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK captures enum value "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"
	TaskExecutionDtoDenyRerunReasonRELEASEASSOCIATEDTOACTIVERELEASETRACK string = "RELEASE_ASSOCIATED_TO_ACTIVE_RELEASE_TRACK"

	// TaskExecutionDtoDenyRerunReasonPHASENOTINEXECUTIONSTATE captures enum value "PHASE_NOT_IN_EXECUTION_STATE"
	TaskExecutionDtoDenyRerunReasonPHASENOTINEXECUTIONSTATE string = "PHASE_NOT_IN_EXECUTION_STATE"

	// TaskExecutionDtoDenyRerunReasonTASKMISSINGPARAMS captures enum value "TASK_MISSING_PARAMS"
	TaskExecutionDtoDenyRerunReasonTASKMISSINGPARAMS string = "TASK_MISSING_PARAMS"

	// TaskExecutionDtoDenyRerunReasonONFAILUREPHASEISRUNNING captures enum value "ON_FAILURE_PHASE_IS_RUNNING"
	TaskExecutionDtoDenyRerunReasonONFAILUREPHASEISRUNNING string = "ON_FAILURE_PHASE_IS_RUNNING"

	// TaskExecutionDtoDenyRerunReasonCALLEROFONERRORPHASEISRUNNING captures enum value "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
	TaskExecutionDtoDenyRerunReasonCALLEROFONERRORPHASEISRUNNING string = "CALLER_OF_ON_ERROR_PHASE_IS_RUNNING"
)

// prop value enum
func (m *TaskExecutionDto) validateDenyRerunReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskExecutionDtoTypeDenyRerunReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionDto) validateDenyRerunReason(formats strfmt.Registry) error {

	if swag.IsZero(m.DenyRerunReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateDenyRerunReasonEnum("denyRerunReason", "body", m.DenyRerunReason); err != nil {
		return err
	}

	return nil
}

func (m *TaskExecutionDto) validateDeployedApplicationVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.DeployedApplicationVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.DeployedApplicationVersions); i++ {
		if swag.IsZero(m.DeployedApplicationVersions[i]) { // not required
			continue
		}

		if m.DeployedApplicationVersions[i] != nil {
			if err := m.DeployedApplicationVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployedApplicationVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var taskExecutionDtoTypeDetailedStatusSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFORMATION","WARNING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionDtoTypeDetailedStatusSeverityPropEnum = append(taskExecutionDtoTypeDetailedStatusSeverityPropEnum, v)
	}
}

const (

	// TaskExecutionDtoDetailedStatusSeverityINFORMATION captures enum value "INFORMATION"
	TaskExecutionDtoDetailedStatusSeverityINFORMATION string = "INFORMATION"

	// TaskExecutionDtoDetailedStatusSeverityWARNING captures enum value "WARNING"
	TaskExecutionDtoDetailedStatusSeverityWARNING string = "WARNING"

	// TaskExecutionDtoDetailedStatusSeverityERROR captures enum value "ERROR"
	TaskExecutionDtoDetailedStatusSeverityERROR string = "ERROR"
)

// prop value enum
func (m *TaskExecutionDto) validateDetailedStatusSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskExecutionDtoTypeDetailedStatusSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionDto) validateDetailedStatusSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailedStatusSeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateDetailedStatusSeverityEnum("detailedStatusSeverity", "body", m.DetailedStatusSeverity); err != nil {
		return err
	}

	return nil
}

var taskExecutionDtoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DESIGN","READY","PENDING","RUNNING","FAILED","SKIPPED","DONE","DEFERRED","STOPPED","RUNNING_WITH_DETAILED_STATUS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionDtoTypeStatusPropEnum = append(taskExecutionDtoTypeStatusPropEnum, v)
	}
}

const (

	// TaskExecutionDtoStatusDESIGN captures enum value "DESIGN"
	TaskExecutionDtoStatusDESIGN string = "DESIGN"

	// TaskExecutionDtoStatusREADY captures enum value "READY"
	TaskExecutionDtoStatusREADY string = "READY"

	// TaskExecutionDtoStatusPENDING captures enum value "PENDING"
	TaskExecutionDtoStatusPENDING string = "PENDING"

	// TaskExecutionDtoStatusRUNNING captures enum value "RUNNING"
	TaskExecutionDtoStatusRUNNING string = "RUNNING"

	// TaskExecutionDtoStatusFAILED captures enum value "FAILED"
	TaskExecutionDtoStatusFAILED string = "FAILED"

	// TaskExecutionDtoStatusSKIPPED captures enum value "SKIPPED"
	TaskExecutionDtoStatusSKIPPED string = "SKIPPED"

	// TaskExecutionDtoStatusDONE captures enum value "DONE"
	TaskExecutionDtoStatusDONE string = "DONE"

	// TaskExecutionDtoStatusDEFERRED captures enum value "DEFERRED"
	TaskExecutionDtoStatusDEFERRED string = "DEFERRED"

	// TaskExecutionDtoStatusSTOPPED captures enum value "STOPPED"
	TaskExecutionDtoStatusSTOPPED string = "STOPPED"

	// TaskExecutionDtoStatusRUNNINGWITHDETAILEDSTATUS captures enum value "RUNNING_WITH_DETAILED_STATUS"
	TaskExecutionDtoStatusRUNNINGWITHDETAILEDSTATUS string = "RUNNING_WITH_DETAILED_STATUS"
)

// prop value enum
func (m *TaskExecutionDto) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskExecutionDtoTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecutionDto) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskExecutionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskExecutionDto) UnmarshalBinary(b []byte) error {
	var res TaskExecutionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
