// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RoleDto role dto
// swagger:model RoleDto
type RoleDto struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is project specific
	IsProjectSpecific bool `json:"isProjectSpecific,omitempty"`

	// modification date
	ModificationDate int64 `json:"modificationDate,omitempty"`

	// modifier
	Modifier *UserDto `json:"modifier,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of role parties
	NumberOfRoleParties int64 `json:"numberOfRoleParties,omitempty"`

	// permissions
	Permissions []*PermissionDto `json:"permissions"`

	// system
	System bool `json:"system,omitempty"`
}

// Validate validates this role dto
func (m *RoleDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleDto) validateModifier(formats strfmt.Registry) error {

	if swag.IsZero(m.Modifier) { // not required
		return nil
	}

	if m.Modifier != nil {
		if err := m.Modifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifier")
			}
			return err
		}
	}

	return nil
}

func (m *RoleDto) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleDto) UnmarshalBinary(b []byte) error {
	var res RoleDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
