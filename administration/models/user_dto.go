// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDto user dto
// swagger:model UserDto
type UserDto struct {

	// description
	Description string `json:"description,omitempty"`

	// directory server Id
	DirectoryServerID int64 `json:"directoryServerId,omitempty"`

	// dn
	Dn string `json:"dn,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is system
	IsSystem bool `json:"isSystem,omitempty"`

	// language
	Language *LanguageDto `json:"language,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notification severity
	// Enum: [INFORMATION WARNING ERROR OFF]
	NotificationSeverity string `json:"notificationSeverity,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// super user
	SuperUser bool `json:"superUser,omitempty"`
}

// Validate validates this user dto
func (m *UserDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDto) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {
		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language")
			}
			return err
		}
	}

	return nil
}

var userDtoTypeNotificationSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFORMATION","WARNING","ERROR","OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDtoTypeNotificationSeverityPropEnum = append(userDtoTypeNotificationSeverityPropEnum, v)
	}
}

const (

	// UserDtoNotificationSeverityINFORMATION captures enum value "INFORMATION"
	UserDtoNotificationSeverityINFORMATION string = "INFORMATION"

	// UserDtoNotificationSeverityWARNING captures enum value "WARNING"
	UserDtoNotificationSeverityWARNING string = "WARNING"

	// UserDtoNotificationSeverityERROR captures enum value "ERROR"
	UserDtoNotificationSeverityERROR string = "ERROR"

	// UserDtoNotificationSeverityOFF captures enum value "OFF"
	UserDtoNotificationSeverityOFF string = "OFF"
)

// prop value enum
func (m *UserDto) validateNotificationSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userDtoTypeNotificationSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserDto) validateNotificationSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationSeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationSeverityEnum("notificationSeverity", "body", m.NotificationSeverity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDto) UnmarshalBinary(b []byte) error {
	var res UserDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
