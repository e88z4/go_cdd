// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhaseDto phase dto
// swagger:model PhaseDto
type PhaseDto struct {

	// approval gate
	// Enum: [MANUAL AUTOMATIC SCHEDULED ON_FAILURE]
	ApprovalGate string `json:"approvalGate,omitempty"`

	// conflicts
	Conflicts []ConflictDto `json:"conflicts"`

	// description
	Description string `json:"description,omitempty"`

	// environments
	Environments []*EnvironmentDto `json:"environments"`

	// execution data
	ExecutionData *PhaseExecutionDto `json:"executionData,omitempty"`

	// freeze periods
	FreezePeriods []*FreezePeriodDto `json:"freezePeriods"`

	// id
	ID int64 `json:"id,omitempty"`

	// is disabled
	IsDisabled bool `json:"isDisabled,omitempty"`

	// is need approval
	IsNeedApproval bool `json:"isNeedApproval,omitempty"`

	// is production
	IsProduction bool `json:"isProduction,omitempty"`

	// maintenance windows
	MaintenanceWindows []*MaintenanceWindowDto `json:"maintenanceWindows"`

	// milestone phase relations
	MilestonePhaseRelations []*MilestonePhaseRelationDto `json:"milestonePhaseRelations"`

	// name
	Name string `json:"name,omitempty"`

	// next phase
	NextPhase *IdentifiableDto `json:"nextPhase,omitempty"`

	// on failure failed phase
	OnFailureFailedPhase *IdentifiableDto `json:"onFailureFailedPhase,omitempty"`

	// owner parties
	OwnerParties []*PartyDto `json:"ownerParties"`

	// percentage completed
	PercentageCompleted float32 `json:"percentageCompleted,omitempty"`

	// planned end date
	PlannedEndDate int64 `json:"plannedEndDate,omitempty"`

	// planned start date
	PlannedStartDate int64 `json:"plannedStartDate,omitempty"`

	// previous phase
	PreviousPhase *IdentifiableDto `json:"previousPhase,omitempty"`

	// recurrence
	Recurrence *RecurrenceDto `json:"recurrence,omitempty"`

	// release
	Release *ReleaseDto `json:"release,omitempty"`

	// release Id
	ReleaseID int64 `json:"releaseId,omitempty"`

	// skip tasks with unchanged applications
	SkipTasksWithUnchangedApplications bool `json:"skipTasksWithUnchangedApplications,omitempty"`

	// tasks
	Tasks []*TaskDto `json:"tasks"`
}

// Validate validates this phase dto
func (m *PhaseDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalGate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreezePeriods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceWindows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestonePhaseRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextPhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnFailureFailedPhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerParties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousPhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var phaseDtoTypeApprovalGatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","AUTOMATIC","SCHEDULED","ON_FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phaseDtoTypeApprovalGatePropEnum = append(phaseDtoTypeApprovalGatePropEnum, v)
	}
}

const (

	// PhaseDtoApprovalGateMANUAL captures enum value "MANUAL"
	PhaseDtoApprovalGateMANUAL string = "MANUAL"

	// PhaseDtoApprovalGateAUTOMATIC captures enum value "AUTOMATIC"
	PhaseDtoApprovalGateAUTOMATIC string = "AUTOMATIC"

	// PhaseDtoApprovalGateSCHEDULED captures enum value "SCHEDULED"
	PhaseDtoApprovalGateSCHEDULED string = "SCHEDULED"

	// PhaseDtoApprovalGateONFAILURE captures enum value "ON_FAILURE"
	PhaseDtoApprovalGateONFAILURE string = "ON_FAILURE"
)

// prop value enum
func (m *PhaseDto) validateApprovalGateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phaseDtoTypeApprovalGatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhaseDto) validateApprovalGate(formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovalGate) { // not required
		return nil
	}

	// value enum
	if err := m.validateApprovalGateEnum("approvalGate", "body", m.ApprovalGate); err != nil {
		return err
	}

	return nil
}

func (m *PhaseDto) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhaseDto) validateExecutionData(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionData) { // not required
		return nil
	}

	if m.ExecutionData != nil {
		if err := m.ExecutionData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executionData")
			}
			return err
		}
	}

	return nil
}

func (m *PhaseDto) validateFreezePeriods(formats strfmt.Registry) error {

	if swag.IsZero(m.FreezePeriods) { // not required
		return nil
	}

	for i := 0; i < len(m.FreezePeriods); i++ {
		if swag.IsZero(m.FreezePeriods[i]) { // not required
			continue
		}

		if m.FreezePeriods[i] != nil {
			if err := m.FreezePeriods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("freezePeriods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhaseDto) validateMaintenanceWindows(formats strfmt.Registry) error {

	if swag.IsZero(m.MaintenanceWindows) { // not required
		return nil
	}

	for i := 0; i < len(m.MaintenanceWindows); i++ {
		if swag.IsZero(m.MaintenanceWindows[i]) { // not required
			continue
		}

		if m.MaintenanceWindows[i] != nil {
			if err := m.MaintenanceWindows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("maintenanceWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhaseDto) validateMilestonePhaseRelations(formats strfmt.Registry) error {

	if swag.IsZero(m.MilestonePhaseRelations) { // not required
		return nil
	}

	for i := 0; i < len(m.MilestonePhaseRelations); i++ {
		if swag.IsZero(m.MilestonePhaseRelations[i]) { // not required
			continue
		}

		if m.MilestonePhaseRelations[i] != nil {
			if err := m.MilestonePhaseRelations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestonePhaseRelations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhaseDto) validateNextPhase(formats strfmt.Registry) error {

	if swag.IsZero(m.NextPhase) { // not required
		return nil
	}

	if m.NextPhase != nil {
		if err := m.NextPhase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextPhase")
			}
			return err
		}
	}

	return nil
}

func (m *PhaseDto) validateOnFailureFailedPhase(formats strfmt.Registry) error {

	if swag.IsZero(m.OnFailureFailedPhase) { // not required
		return nil
	}

	if m.OnFailureFailedPhase != nil {
		if err := m.OnFailureFailedPhase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onFailureFailedPhase")
			}
			return err
		}
	}

	return nil
}

func (m *PhaseDto) validateOwnerParties(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerParties) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnerParties); i++ {
		if swag.IsZero(m.OwnerParties[i]) { // not required
			continue
		}

		if m.OwnerParties[i] != nil {
			if err := m.OwnerParties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerParties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PhaseDto) validatePreviousPhase(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousPhase) { // not required
		return nil
	}

	if m.PreviousPhase != nil {
		if err := m.PreviousPhase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("previousPhase")
			}
			return err
		}
	}

	return nil
}

func (m *PhaseDto) validateRecurrence(formats strfmt.Registry) error {

	if swag.IsZero(m.Recurrence) { // not required
		return nil
	}

	if m.Recurrence != nil {
		if err := m.Recurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrence")
			}
			return err
		}
	}

	return nil
}

func (m *PhaseDto) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

func (m *PhaseDto) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhaseDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhaseDto) UnmarshalBinary(b []byte) error {
	var res PhaseDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
