// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EndpointDto endpoint dto
// swagger:model EndpointDto
type EndpointDto struct {

	// applications
	Applications []*ApplicationDto `json:"applications"`

	// connectivity arguments
	ConnectivityArguments []*ArgumentDto `json:"connectivityArguments"`

	// description
	Description string `json:"description,omitempty"`

	// environments
	Environments []*EnvironmentDto `json:"environments"`

	// id
	ID int64 `json:"id,omitempty"`

	// in use
	InUse bool `json:"inUse,omitempty"`

	// last connectivity status
	LastConnectivityStatus string `json:"lastConnectivityStatus,omitempty"`

	// last connectivity test date
	LastConnectivityTestDate int64 `json:"lastConnectivityTestDate,omitempty"`

	// last connectivity test message
	LastConnectivityTestMessage string `json:"lastConnectivityTestMessage,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// plugin service
	PluginService *PluginServiceDto `json:"pluginService,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this endpoint dto
func (m *EndpointDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectivityArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointDto) validateApplications(formats strfmt.Registry) error {

	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndpointDto) validateConnectivityArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectivityArguments); i++ {
		if swag.IsZero(m.ConnectivityArguments[i]) { // not required
			continue
		}

		if m.ConnectivityArguments[i] != nil {
			if err := m.ConnectivityArguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectivityArguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndpointDto) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for i := 0; i < len(m.Environments); i++ {
		if swag.IsZero(m.Environments[i]) { // not required
			continue
		}

		if m.Environments[i] != nil {
			if err := m.Environments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndpointDto) validatePluginService(formats strfmt.Registry) error {

	if swag.IsZero(m.PluginService) { // not required
		return nil
	}

	if m.PluginService != nil {
		if err := m.PluginService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pluginService")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointDto) UnmarshalBinary(b []byte) error {
	var res EndpointDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
