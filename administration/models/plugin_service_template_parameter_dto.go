// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PluginServiceTemplateParameterDto plugin service template parameter dto
// swagger:model PluginServiceTemplateParameterDto
type PluginServiceTemplateParameterDto struct {

	// default value
	DefaultValue string `json:"defaultValue,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// direction
	// Enum: [INPUT_PARAMETER OUTPUT_PARAMETER]
	Direction string `json:"direction,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// display type
	// Enum: [STRING PASSWORD TEXTAREA DROPDOWN BOOLEAN]
	DisplayType string `json:"displayType,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is optional
	IsOptional bool `json:"isOptional,omitempty"`

	// multiple selection
	MultipleSelection bool `json:"multipleSelection,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameter dependencies
	ParameterDependencies []string `json:"parameterDependencies"`

	// parameter method
	// Enum: [IMPORT EXECUTION]
	ParameterMethod string `json:"parameterMethod,omitempty"`

	// parameter order
	ParameterOrder int32 `json:"parameterOrder,omitempty"`

	// possible values
	PossibleValues []*PluginServiceTemplateParameterPossibleValueDto `json:"possibleValues"`

	// type
	// Enum: [STRING PASSWORD BOOLEAN LIST_OF_STRINGS]
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this plugin service template parameter dto
func (m *PluginServiceTemplateParameterDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossibleValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pluginServiceTemplateParameterDtoTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INPUT_PARAMETER","OUTPUT_PARAMETER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginServiceTemplateParameterDtoTypeDirectionPropEnum = append(pluginServiceTemplateParameterDtoTypeDirectionPropEnum, v)
	}
}

const (

	// PluginServiceTemplateParameterDtoDirectionINPUTPARAMETER captures enum value "INPUT_PARAMETER"
	PluginServiceTemplateParameterDtoDirectionINPUTPARAMETER string = "INPUT_PARAMETER"

	// PluginServiceTemplateParameterDtoDirectionOUTPUTPARAMETER captures enum value "OUTPUT_PARAMETER"
	PluginServiceTemplateParameterDtoDirectionOUTPUTPARAMETER string = "OUTPUT_PARAMETER"
)

// prop value enum
func (m *PluginServiceTemplateParameterDto) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pluginServiceTemplateParameterDtoTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PluginServiceTemplateParameterDto) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var pluginServiceTemplateParameterDtoTypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","PASSWORD","TEXTAREA","DROPDOWN","BOOLEAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginServiceTemplateParameterDtoTypeDisplayTypePropEnum = append(pluginServiceTemplateParameterDtoTypeDisplayTypePropEnum, v)
	}
}

const (

	// PluginServiceTemplateParameterDtoDisplayTypeSTRING captures enum value "STRING"
	PluginServiceTemplateParameterDtoDisplayTypeSTRING string = "STRING"

	// PluginServiceTemplateParameterDtoDisplayTypePASSWORD captures enum value "PASSWORD"
	PluginServiceTemplateParameterDtoDisplayTypePASSWORD string = "PASSWORD"

	// PluginServiceTemplateParameterDtoDisplayTypeTEXTAREA captures enum value "TEXTAREA"
	PluginServiceTemplateParameterDtoDisplayTypeTEXTAREA string = "TEXTAREA"

	// PluginServiceTemplateParameterDtoDisplayTypeDROPDOWN captures enum value "DROPDOWN"
	PluginServiceTemplateParameterDtoDisplayTypeDROPDOWN string = "DROPDOWN"

	// PluginServiceTemplateParameterDtoDisplayTypeBOOLEAN captures enum value "BOOLEAN"
	PluginServiceTemplateParameterDtoDisplayTypeBOOLEAN string = "BOOLEAN"
)

// prop value enum
func (m *PluginServiceTemplateParameterDto) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pluginServiceTemplateParameterDtoTypeDisplayTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PluginServiceTemplateParameterDto) validateDisplayType(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	return nil
}

var pluginServiceTemplateParameterDtoTypeParameterMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IMPORT","EXECUTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginServiceTemplateParameterDtoTypeParameterMethodPropEnum = append(pluginServiceTemplateParameterDtoTypeParameterMethodPropEnum, v)
	}
}

const (

	// PluginServiceTemplateParameterDtoParameterMethodIMPORT captures enum value "IMPORT"
	PluginServiceTemplateParameterDtoParameterMethodIMPORT string = "IMPORT"

	// PluginServiceTemplateParameterDtoParameterMethodEXECUTION captures enum value "EXECUTION"
	PluginServiceTemplateParameterDtoParameterMethodEXECUTION string = "EXECUTION"
)

// prop value enum
func (m *PluginServiceTemplateParameterDto) validateParameterMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pluginServiceTemplateParameterDtoTypeParameterMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PluginServiceTemplateParameterDto) validateParameterMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateParameterMethodEnum("parameterMethod", "body", m.ParameterMethod); err != nil {
		return err
	}

	return nil
}

func (m *PluginServiceTemplateParameterDto) validatePossibleValues(formats strfmt.Registry) error {

	if swag.IsZero(m.PossibleValues) { // not required
		return nil
	}

	for i := 0; i < len(m.PossibleValues); i++ {
		if swag.IsZero(m.PossibleValues[i]) { // not required
			continue
		}

		if m.PossibleValues[i] != nil {
			if err := m.PossibleValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("possibleValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var pluginServiceTemplateParameterDtoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","PASSWORD","BOOLEAN","LIST_OF_STRINGS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginServiceTemplateParameterDtoTypeTypePropEnum = append(pluginServiceTemplateParameterDtoTypeTypePropEnum, v)
	}
}

const (

	// PluginServiceTemplateParameterDtoTypeSTRING captures enum value "STRING"
	PluginServiceTemplateParameterDtoTypeSTRING string = "STRING"

	// PluginServiceTemplateParameterDtoTypePASSWORD captures enum value "PASSWORD"
	PluginServiceTemplateParameterDtoTypePASSWORD string = "PASSWORD"

	// PluginServiceTemplateParameterDtoTypeBOOLEAN captures enum value "BOOLEAN"
	PluginServiceTemplateParameterDtoTypeBOOLEAN string = "BOOLEAN"

	// PluginServiceTemplateParameterDtoTypeLISTOFSTRINGS captures enum value "LIST_OF_STRINGS"
	PluginServiceTemplateParameterDtoTypeLISTOFSTRINGS string = "LIST_OF_STRINGS"
)

// prop value enum
func (m *PluginServiceTemplateParameterDto) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pluginServiceTemplateParameterDtoTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PluginServiceTemplateParameterDto) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginServiceTemplateParameterDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginServiceTemplateParameterDto) UnmarshalBinary(b []byte) error {
	var res PluginServiceTemplateParameterDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
