// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentItemDto content item dto
// swagger:model ContentItemDto
type ContentItemDto struct {

	// commit files
	CommitFiles []*CommitFilesDto `json:"commitFiles"`

	// content
	Content string `json:"content,omitempty"`

	// content item conflict
	// Enum: [PROGRESS_OF_UNPLANNED_WORK_ITEM WORKING_ON_ACCEPTED_ITEM WORK_ITEM_IN_PROGRESS NO_INFORMATION ACCEPTED]
	ContentItemConflict string `json:"contentItemConflict,omitempty"`

	// content item Url
	ContentItemURL string `json:"contentItemUrl,omitempty"`

	// content source Id
	ContentSourceID int64 `json:"contentSourceId,omitempty"`

	// content type
	ContentType string `json:"contentType,omitempty"`

	// display Id
	DisplayID string `json:"displayId,omitempty"`

	// display type
	DisplayType string `json:"displayType,omitempty"`

	// endpoint
	Endpoint *NamedIdentifiableDto `json:"endpoint,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// hierarchy path
	HierarchyPath string `json:"hierarchyPath,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is conflict enable
	IsConflictEnable bool `json:"isConflictEnable,omitempty"`

	// last import date
	LastImportDate int64 `json:"lastImportDate,omitempty"`

	// parent content item
	ParentContentItem *IdentifiableDto `json:"parentContentItem,omitempty"`

	// parent external Id
	ParentExternalID string `json:"parentExternalId,omitempty"`

	// plugin
	Plugin *NamedIdentifiableDto `json:"plugin,omitempty"`

	// release
	Release *NamedVersionedIdentifiableDto `json:"release,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this content item dto
func (m *ContentItemDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommitFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentItemConflict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentContentItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentItemDto) validateCommitFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.CommitFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.CommitFiles); i++ {
		if swag.IsZero(m.CommitFiles[i]) { // not required
			continue
		}

		if m.CommitFiles[i] != nil {
			if err := m.CommitFiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commitFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var contentItemDtoTypeContentItemConflictPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROGRESS_OF_UNPLANNED_WORK_ITEM","WORKING_ON_ACCEPTED_ITEM","WORK_ITEM_IN_PROGRESS","NO_INFORMATION","ACCEPTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentItemDtoTypeContentItemConflictPropEnum = append(contentItemDtoTypeContentItemConflictPropEnum, v)
	}
}

const (

	// ContentItemDtoContentItemConflictPROGRESSOFUNPLANNEDWORKITEM captures enum value "PROGRESS_OF_UNPLANNED_WORK_ITEM"
	ContentItemDtoContentItemConflictPROGRESSOFUNPLANNEDWORKITEM string = "PROGRESS_OF_UNPLANNED_WORK_ITEM"

	// ContentItemDtoContentItemConflictWORKINGONACCEPTEDITEM captures enum value "WORKING_ON_ACCEPTED_ITEM"
	ContentItemDtoContentItemConflictWORKINGONACCEPTEDITEM string = "WORKING_ON_ACCEPTED_ITEM"

	// ContentItemDtoContentItemConflictWORKITEMINPROGRESS captures enum value "WORK_ITEM_IN_PROGRESS"
	ContentItemDtoContentItemConflictWORKITEMINPROGRESS string = "WORK_ITEM_IN_PROGRESS"

	// ContentItemDtoContentItemConflictNOINFORMATION captures enum value "NO_INFORMATION"
	ContentItemDtoContentItemConflictNOINFORMATION string = "NO_INFORMATION"

	// ContentItemDtoContentItemConflictACCEPTED captures enum value "ACCEPTED"
	ContentItemDtoContentItemConflictACCEPTED string = "ACCEPTED"
)

// prop value enum
func (m *ContentItemDto) validateContentItemConflictEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contentItemDtoTypeContentItemConflictPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContentItemDto) validateContentItemConflict(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentItemConflict) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentItemConflictEnum("contentItemConflict", "body", m.ContentItemConflict); err != nil {
		return err
	}

	return nil
}

func (m *ContentItemDto) validateEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	if m.Endpoint != nil {
		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *ContentItemDto) validateParentContentItem(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentContentItem) { // not required
		return nil
	}

	if m.ParentContentItem != nil {
		if err := m.ParentContentItem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentContentItem")
			}
			return err
		}
	}

	return nil
}

func (m *ContentItemDto) validatePlugin(formats strfmt.Registry) error {

	if swag.IsZero(m.Plugin) { // not required
		return nil
	}

	if m.Plugin != nil {
		if err := m.Plugin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugin")
			}
			return err
		}
	}

	return nil
}

func (m *ContentItemDto) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentItemDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentItemDto) UnmarshalBinary(b []byte) error {
	var res ContentItemDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
