// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectUserDto project user dto
// swagger:model ProjectUserDto
type ProjectUserDto struct {

	// description
	Description string `json:"description,omitempty"`

	// directory server Id
	DirectoryServerID int64 `json:"directoryServerId,omitempty"`

	// dn
	Dn string `json:"dn,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// has Api access token
	HasAPIAccessToken bool `json:"hasApiAccessToken,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is project party
	IsProjectParty bool `json:"isProjectParty,omitempty"`

	// is system
	IsSystem bool `json:"isSystem,omitempty"`

	// language
	Language *LanguageDto `json:"language,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notification severity
	// Enum: [INFORMATION WARNING ERROR OFF]
	NotificationSeverity string `json:"notificationSeverity,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// project role
	ProjectRole *RoleDto `json:"projectRole,omitempty"`

	// project user groups
	ProjectUserGroups []*NamedIdentifiableDto `json:"projectUserGroups"`

	// role
	Role *RoleDto `json:"role,omitempty"`

	// super user
	SuperUser bool `json:"superUser,omitempty"`
}

// Validate validates this project user dto
func (m *ProjectUserDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectUserDto) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {
		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language")
			}
			return err
		}
	}

	return nil
}

var projectUserDtoTypeNotificationSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFORMATION","WARNING","ERROR","OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectUserDtoTypeNotificationSeverityPropEnum = append(projectUserDtoTypeNotificationSeverityPropEnum, v)
	}
}

const (

	// ProjectUserDtoNotificationSeverityINFORMATION captures enum value "INFORMATION"
	ProjectUserDtoNotificationSeverityINFORMATION string = "INFORMATION"

	// ProjectUserDtoNotificationSeverityWARNING captures enum value "WARNING"
	ProjectUserDtoNotificationSeverityWARNING string = "WARNING"

	// ProjectUserDtoNotificationSeverityERROR captures enum value "ERROR"
	ProjectUserDtoNotificationSeverityERROR string = "ERROR"

	// ProjectUserDtoNotificationSeverityOFF captures enum value "OFF"
	ProjectUserDtoNotificationSeverityOFF string = "OFF"
)

// prop value enum
func (m *ProjectUserDto) validateNotificationSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, projectUserDtoTypeNotificationSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProjectUserDto) validateNotificationSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationSeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationSeverityEnum("notificationSeverity", "body", m.NotificationSeverity); err != nil {
		return err
	}

	return nil
}

func (m *ProjectUserDto) validateProjectRole(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectRole) { // not required
		return nil
	}

	if m.ProjectRole != nil {
		if err := m.ProjectRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectRole")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectUserDto) validateProjectUserGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectUserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectUserGroups); i++ {
		if swag.IsZero(m.ProjectUserGroups[i]) { // not required
			continue
		}

		if m.ProjectUserGroups[i] != nil {
			if err := m.ProjectUserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectUserGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectUserDto) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectUserDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectUserDto) UnmarshalBinary(b []byte) error {
	var res ProjectUserDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
