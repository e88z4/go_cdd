// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TaskDto task dto
// swagger:model TaskDto
type TaskDto struct {

	// application versions
	ApplicationVersions []*IdentifiableDto `json:"applicationVersions"`

	// description
	Description string `json:"description,omitempty"`

	// execution data
	ExecutionData *TaskExecutionDto `json:"executionData,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is disabled
	IsDisabled bool `json:"isDisabled,omitempty"`

	// is on failure phase enabled
	IsOnFailurePhaseEnabled bool `json:"isOnFailurePhaseEnabled,omitempty"`

	// is skip task on failure
	IsSkipTaskOnFailure bool `json:"isSkipTaskOnFailure,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// next tasks
	NextTasks []*IdentifiableDto `json:"nextTasks"`

	// owner parties
	OwnerParties []*PartyDto `json:"ownerParties"`

	// phase Id
	PhaseID int64 `json:"phaseId,omitempty"`

	// plugin service
	PluginService *PluginServiceDto `json:"pluginService,omitempty"`

	// prev tasks
	PrevTasks []*IdentifiableDto `json:"prevTasks"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this task dto
func (m *TaskDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerParties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskDto) validateApplicationVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationVersions); i++ {
		if swag.IsZero(m.ApplicationVersions[i]) { // not required
			continue
		}

		if m.ApplicationVersions[i] != nil {
			if err := m.ApplicationVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDto) validateExecutionData(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionData) { // not required
		return nil
	}

	if m.ExecutionData != nil {
		if err := m.ExecutionData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executionData")
			}
			return err
		}
	}

	return nil
}

func (m *TaskDto) validateNextTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.NextTasks) { // not required
		return nil
	}

	for i := 0; i < len(m.NextTasks); i++ {
		if swag.IsZero(m.NextTasks[i]) { // not required
			continue
		}

		if m.NextTasks[i] != nil {
			if err := m.NextTasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nextTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDto) validateOwnerParties(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerParties) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnerParties); i++ {
		if swag.IsZero(m.OwnerParties[i]) { // not required
			continue
		}

		if m.OwnerParties[i] != nil {
			if err := m.OwnerParties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerParties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskDto) validatePluginService(formats strfmt.Registry) error {

	if swag.IsZero(m.PluginService) { // not required
		return nil
	}

	if m.PluginService != nil {
		if err := m.PluginService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pluginService")
			}
			return err
		}
	}

	return nil
}

func (m *TaskDto) validatePrevTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.PrevTasks) { // not required
		return nil
	}

	for i := 0; i < len(m.PrevTasks); i++ {
		if swag.IsZero(m.PrevTasks[i]) { // not required
			continue
		}

		if m.PrevTasks[i] != nil {
			if err := m.PrevTasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prevTasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskDto) UnmarshalBinary(b []byte) error {
	var res TaskDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
