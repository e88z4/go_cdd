// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PluginServiceTemplateDto plugin service template dto
// swagger:model PluginServiceTemplateDto
type PluginServiceTemplateDto struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is plugin endpoint exist
	IsPluginEndpointExist bool `json:"isPluginEndpointExist,omitempty"`

	// is taggable
	IsTaggable bool `json:"isTaggable,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// plugin endpoints optional
	PluginEndpointsOptional bool `json:"pluginEndpointsOptional,omitempty"`

	// plugin Id
	PluginID int64 `json:"pluginId,omitempty"`

	// plugin name
	PluginName string `json:"pluginName,omitempty"`

	// service type
	ServiceType string `json:"serviceType,omitempty"`

	// template parameters
	TemplateParameters []*PluginServiceTemplateParameterDto `json:"templateParameters"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this plugin service template dto
func (m *PluginServiceTemplateDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTemplateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginServiceTemplateDto) validateTemplateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.TemplateParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.TemplateParameters); i++ {
		if swag.IsZero(m.TemplateParameters[i]) { // not required
			continue
		}

		if m.TemplateParameters[i] != nil {
			if err := m.TemplateParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("templateParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginServiceTemplateDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginServiceTemplateDto) UnmarshalBinary(b []byte) error {
	var res PluginServiceTemplateDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
