/*
 * REPORTING
 *
 * Retrieves, updates, and deletes report and widget information
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ReleaseQualityReportApiService service

/* 
ReleaseQualityReportApiService Get release quality metrics for application version
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param releaseId releaseId
 * @param applicationId applicationId
 * @param applicationVersionId applicationVersionId
 * @param optional nil or *GetReleaseQualityMetricsPerApplicationVersionUsingGETOpts - Optional Parameters:
     * @param "Embed" (optional.String) -  embedField
     * @param "IsChangedFileExcluded" (optional.Bool) -  isChangedFileExcluded
     * @param "ChangedFileStatus" (optional.Interface of []string) -  fileStatuses

@return ReleaseQualityReportApplicationVersionDto
*/

type GetReleaseQualityMetricsPerApplicationVersionUsingGETOpts struct { 
	Embed optional.String
	IsChangedFileExcluded optional.Bool
	ChangedFileStatus optional.Interface
}

func (a *ReleaseQualityReportApiService) GetReleaseQualityMetricsPerApplicationVersionUsingGET(ctx context.Context, releaseId int64, applicationId int64, applicationVersionId int64, localVarOptionals *GetReleaseQualityMetricsPerApplicationVersionUsingGETOpts) (ReleaseQualityReportApplicationVersionDto, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ReleaseQualityReportApplicationVersionDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reports/releases/{releaseId}/applications/{applicationId}/application-versions/{applicationVersionId}/release-quality"
	localVarPath = strings.Replace(localVarPath, "{"+"releaseId"+"}", fmt.Sprintf("%v", releaseId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", fmt.Sprintf("%v", applicationId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationVersionId"+"}", fmt.Sprintf("%v", applicationVersionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Embed.IsSet() {
		localVarQueryParams.Add("embed", parameterToString(localVarOptionals.Embed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsChangedFileExcluded.IsSet() {
		localVarQueryParams.Add("is_changed_file_excluded", parameterToString(localVarOptionals.IsChangedFileExcluded.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangedFileStatus.IsSet() {
		localVarQueryParams.Add("changed_file_status", parameterToString(localVarOptionals.ChangedFileStatus.Value(), "multi"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ReleaseQualityReportApplicationVersionDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
ReleaseQualityReportApiService Get release quality report
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param releaseId releaseId
 * @param optional nil or *GetReleaseQualityReportUsingGETOpts - Optional Parameters:
     * @param "IsChangedFileExcluded" (optional.Bool) -  isChangedFileExcluded
     * @param "ChangedFileStatus" (optional.Interface of []string) -  fileStatuses

@return ReleaseQualityReportDto
*/

type GetReleaseQualityReportUsingGETOpts struct { 
	IsChangedFileExcluded optional.Bool
	ChangedFileStatus optional.Interface
}

func (a *ReleaseQualityReportApiService) GetReleaseQualityReportUsingGET(ctx context.Context, releaseId int64, localVarOptionals *GetReleaseQualityReportUsingGETOpts) (ReleaseQualityReportDto, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ReleaseQualityReportDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/reports/releases/{releaseId}/release-quality"
	localVarPath = strings.Replace(localVarPath, "{"+"releaseId"+"}", fmt.Sprintf("%v", releaseId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsChangedFileExcluded.IsSet() {
		localVarQueryParams.Add("is_changed_file_excluded", parameterToString(localVarOptionals.IsChangedFileExcluded.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangedFileStatus.IsSet() {
		localVarQueryParams.Add("changed_file_status", parameterToString(localVarOptionals.ChangedFileStatus.Value(), "multi"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ReleaseQualityReportDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
