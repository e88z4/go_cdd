// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestSuiteDto test suite dto
// swagger:model TestSuiteDto
type TestSuiteDto struct {

	// application
	Application *NamedIdentifiableDto `json:"application,omitempty"`

	// application version
	ApplicationVersion *NamedIdentifiableDto `json:"applicationVersion,omitempty"`

	// basic plugin
	BasicPlugin *BasicPluginDto `json:"basicPlugin,omitempty"`

	// creation date
	CreationDate int64 `json:"creationDate,omitempty"`

	// endpoint
	Endpoint *NamedIdentifiableDto `json:"endpoint,omitempty"`

	// endpoint parameters
	EndpointParameters map[string]string `json:"endpointParameters,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// import date
	ImportDate int64 `json:"importDate,omitempty"`

	// is favorite
	IsFavorite bool `json:"isFavorite,omitempty"`

	// is recently failed test suite
	IsRecentlyFailedTestSuite bool `json:"isRecentlyFailedTestSuite,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// strategies
	Strategies []*StrategyDto `json:"strategies"`

	// tags
	Tags []string `json:"tags"`

	// test source
	TestSource *NamedIdentifiableDto `json:"testSource,omitempty"`

	// test source parameters
	TestSourceParameters map[string]string `json:"testSourceParameters,omitempty"`

	// test suite modification date
	TestSuiteModificationDate int64 `json:"testSuiteModificationDate,omitempty"`
}

// Validate validates this test suite dto
func (m *TestSuiteDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasicPlugin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestSuiteDto) validateApplication(formats strfmt.Registry) error {

	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuiteDto) validateApplicationVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationVersion) { // not required
		return nil
	}

	if m.ApplicationVersion != nil {
		if err := m.ApplicationVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationVersion")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuiteDto) validateBasicPlugin(formats strfmt.Registry) error {

	if swag.IsZero(m.BasicPlugin) { // not required
		return nil
	}

	if m.BasicPlugin != nil {
		if err := m.BasicPlugin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basicPlugin")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuiteDto) validateEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	if m.Endpoint != nil {
		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *TestSuiteDto) validateStrategies(formats strfmt.Registry) error {

	if swag.IsZero(m.Strategies) { // not required
		return nil
	}

	for i := 0; i < len(m.Strategies); i++ {
		if swag.IsZero(m.Strategies[i]) { // not required
			continue
		}

		if m.Strategies[i] != nil {
			if err := m.Strategies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestSuiteDto) validateTestSource(formats strfmt.Registry) error {

	if swag.IsZero(m.TestSource) { // not required
		return nil
	}

	if m.TestSource != nil {
		if err := m.TestSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestSuiteDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestSuiteDto) UnmarshalBinary(b []byte) error {
	var res TestSuiteDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
