// Code generated by go-swagger; DO NOT EDIT.

package test_suite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTestSuitesUsingGETParams creates a new GetTestSuitesUsingGETParams object
// with the default values initialized.
func NewGetTestSuitesUsingGETParams() *GetTestSuitesUsingGETParams {
	var ()
	return &GetTestSuitesUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTestSuitesUsingGETParamsWithTimeout creates a new GetTestSuitesUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTestSuitesUsingGETParamsWithTimeout(timeout time.Duration) *GetTestSuitesUsingGETParams {
	var ()
	return &GetTestSuitesUsingGETParams{

		timeout: timeout,
	}
}

// NewGetTestSuitesUsingGETParamsWithContext creates a new GetTestSuitesUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTestSuitesUsingGETParamsWithContext(ctx context.Context) *GetTestSuitesUsingGETParams {
	var ()
	return &GetTestSuitesUsingGETParams{

		Context: ctx,
	}
}

// NewGetTestSuitesUsingGETParamsWithHTTPClient creates a new GetTestSuitesUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTestSuitesUsingGETParamsWithHTTPClient(client *http.Client) *GetTestSuitesUsingGETParams {
	var ()
	return &GetTestSuitesUsingGETParams{
		HTTPClient: client,
	}
}

/*GetTestSuitesUsingGETParams contains all the parameters to send to the API endpoint
for the get test suites using g e t operation typically these are written to a http.Request
*/
type GetTestSuitesUsingGETParams struct {

	/*ApplicationID
	  applicationId

	*/
	ApplicationID int64
	/*ApplicationVersionID
	  applicationVersionId

	*/
	ApplicationVersionID int64
	/*Embed
	  embedFilter

	*/
	Embed *string
	/*EndpointID
	  endpointId

	*/
	EndpointID *int64
	/*Filter
	  filter

	*/
	Filter *string
	/*PageNumber
	  pageNumber

	*/
	PageNumber *int32
	/*PageSize
	  pageSize

	*/
	PageSize *int32
	/*SortDirection
	  sortDirection

	*/
	SortDirection *string
	/*SortField
	  sortField

	*/
	SortField *string
	/*Tag
	  tagsCsv

	*/
	Tag *string
	/*TestSource
	  testSourceId

	*/
	TestSource *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithTimeout(timeout time.Duration) *GetTestSuitesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithContext(ctx context.Context) *GetTestSuitesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithHTTPClient(client *http.Client) *GetTestSuitesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithApplicationID(applicationID int64) *GetTestSuitesUsingGETParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetApplicationID(applicationID int64) {
	o.ApplicationID = applicationID
}

// WithApplicationVersionID adds the applicationVersionID to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithApplicationVersionID(applicationVersionID int64) *GetTestSuitesUsingGETParams {
	o.SetApplicationVersionID(applicationVersionID)
	return o
}

// SetApplicationVersionID adds the applicationVersionId to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetApplicationVersionID(applicationVersionID int64) {
	o.ApplicationVersionID = applicationVersionID
}

// WithEmbed adds the embed to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithEmbed(embed *string) *GetTestSuitesUsingGETParams {
	o.SetEmbed(embed)
	return o
}

// SetEmbed adds the embed to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetEmbed(embed *string) {
	o.Embed = embed
}

// WithEndpointID adds the endpointID to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithEndpointID(endpointID *int64) *GetTestSuitesUsingGETParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetEndpointID(endpointID *int64) {
	o.EndpointID = endpointID
}

// WithFilter adds the filter to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithFilter(filter *string) *GetTestSuitesUsingGETParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPageNumber adds the pageNumber to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithPageNumber(pageNumber *int32) *GetTestSuitesUsingGETParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithPageSize(pageSize *int32) *GetTestSuitesUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortDirection adds the sortDirection to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithSortDirection(sortDirection *string) *GetTestSuitesUsingGETParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetSortDirection(sortDirection *string) {
	o.SortDirection = sortDirection
}

// WithSortField adds the sortField to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithSortField(sortField *string) *GetTestSuitesUsingGETParams {
	o.SetSortField(sortField)
	return o
}

// SetSortField adds the sortField to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetSortField(sortField *string) {
	o.SortField = sortField
}

// WithTag adds the tag to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithTag(tag *string) *GetTestSuitesUsingGETParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTestSource adds the testSource to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) WithTestSource(testSource *int64) *GetTestSuitesUsingGETParams {
	o.SetTestSource(testSource)
	return o
}

// SetTestSource adds the testSource to the get test suites using g e t params
func (o *GetTestSuitesUsingGETParams) SetTestSource(testSource *int64) {
	o.TestSource = testSource
}

// WriteToRequest writes these params to a swagger request
func (o *GetTestSuitesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param applicationId
	if err := r.SetPathParam("applicationId", swag.FormatInt64(o.ApplicationID)); err != nil {
		return err
	}

	// path param applicationVersionId
	if err := r.SetPathParam("applicationVersionId", swag.FormatInt64(o.ApplicationVersionID)); err != nil {
		return err
	}

	if o.Embed != nil {

		// query param embed
		var qrEmbed string
		if o.Embed != nil {
			qrEmbed = *o.Embed
		}
		qEmbed := qrEmbed
		if qEmbed != "" {
			if err := r.SetQueryParam("embed", qEmbed); err != nil {
				return err
			}
		}

	}

	if o.EndpointID != nil {

		// query param endpoint_id
		var qrEndpointID int64
		if o.EndpointID != nil {
			qrEndpointID = *o.EndpointID
		}
		qEndpointID := swag.FormatInt64(qrEndpointID)
		if qEndpointID != "" {
			if err := r.SetQueryParam("endpoint_id", qEndpointID); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page_number
		var qrPageNumber int32
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page_number", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortDirection != nil {

		// query param sort_direction
		var qrSortDirection string
		if o.SortDirection != nil {
			qrSortDirection = *o.SortDirection
		}
		qSortDirection := qrSortDirection
		if qSortDirection != "" {
			if err := r.SetQueryParam("sort_direction", qSortDirection); err != nil {
				return err
			}
		}

	}

	if o.SortField != nil {

		// query param sort_field
		var qrSortField string
		if o.SortField != nil {
			qrSortField = *o.SortField
		}
		qSortField := qrSortField
		if qSortField != "" {
			if err := r.SetQueryParam("sort_field", qSortField); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if o.TestSource != nil {

		// query param test_source
		var qrTestSource int64
		if o.TestSource != nil {
			qrTestSource = *o.TestSource
		}
		qTestSource := swag.FormatInt64(qrTestSource)
		if qTestSource != "" {
			if err := r.SetQueryParam("test_source", qTestSource); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
