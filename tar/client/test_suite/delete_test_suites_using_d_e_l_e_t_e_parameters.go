// Code generated by go-swagger; DO NOT EDIT.

package test_suite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteTestSuitesUsingDELETEParams creates a new DeleteTestSuitesUsingDELETEParams object
// with the default values initialized.
func NewDeleteTestSuitesUsingDELETEParams() *DeleteTestSuitesUsingDELETEParams {
	var ()
	return &DeleteTestSuitesUsingDELETEParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteTestSuitesUsingDELETEParamsWithTimeout creates a new DeleteTestSuitesUsingDELETEParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteTestSuitesUsingDELETEParamsWithTimeout(timeout time.Duration) *DeleteTestSuitesUsingDELETEParams {
	var ()
	return &DeleteTestSuitesUsingDELETEParams{

		timeout: timeout,
	}
}

// NewDeleteTestSuitesUsingDELETEParamsWithContext creates a new DeleteTestSuitesUsingDELETEParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteTestSuitesUsingDELETEParamsWithContext(ctx context.Context) *DeleteTestSuitesUsingDELETEParams {
	var ()
	return &DeleteTestSuitesUsingDELETEParams{

		Context: ctx,
	}
}

// NewDeleteTestSuitesUsingDELETEParamsWithHTTPClient creates a new DeleteTestSuitesUsingDELETEParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteTestSuitesUsingDELETEParamsWithHTTPClient(client *http.Client) *DeleteTestSuitesUsingDELETEParams {
	var ()
	return &DeleteTestSuitesUsingDELETEParams{
		HTTPClient: client,
	}
}

/*DeleteTestSuitesUsingDELETEParams contains all the parameters to send to the API endpoint
for the delete test suites using d e l e t e operation typically these are written to a http.Request
*/
type DeleteTestSuitesUsingDELETEParams struct {

	/*ApplicationID
	  applicationId

	*/
	ApplicationID int64
	/*ApplicationVersionID
	  applicationVersionId

	*/
	ApplicationVersionID int64
	/*TestSuite
	  ids

	*/
	TestSuite []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) WithTimeout(timeout time.Duration) *DeleteTestSuitesUsingDELETEParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) WithContext(ctx context.Context) *DeleteTestSuitesUsingDELETEParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) WithHTTPClient(client *http.Client) *DeleteTestSuitesUsingDELETEParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) WithApplicationID(applicationID int64) *DeleteTestSuitesUsingDELETEParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) SetApplicationID(applicationID int64) {
	o.ApplicationID = applicationID
}

// WithApplicationVersionID adds the applicationVersionID to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) WithApplicationVersionID(applicationVersionID int64) *DeleteTestSuitesUsingDELETEParams {
	o.SetApplicationVersionID(applicationVersionID)
	return o
}

// SetApplicationVersionID adds the applicationVersionId to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) SetApplicationVersionID(applicationVersionID int64) {
	o.ApplicationVersionID = applicationVersionID
}

// WithTestSuite adds the testSuite to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) WithTestSuite(testSuite []string) *DeleteTestSuitesUsingDELETEParams {
	o.SetTestSuite(testSuite)
	return o
}

// SetTestSuite adds the testSuite to the delete test suites using d e l e t e params
func (o *DeleteTestSuitesUsingDELETEParams) SetTestSuite(testSuite []string) {
	o.TestSuite = testSuite
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteTestSuitesUsingDELETEParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param applicationId
	if err := r.SetPathParam("applicationId", swag.FormatInt64(o.ApplicationID)); err != nil {
		return err
	}

	// path param applicationVersionId
	if err := r.SetPathParam("applicationVersionId", swag.FormatInt64(o.ApplicationVersionID)); err != nil {
		return err
	}

	valuesTestSuite := o.TestSuite

	joinedTestSuite := swag.JoinByFormat(valuesTestSuite, "multi")
	// query array param test_suite
	if err := r.SetQueryParam("test_suite", joinedTestSuite...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
