// Code generated by go-swagger; DO NOT EDIT.

package test_suite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/tar/models"
)

// NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParams creates a new AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams object
// with the default values initialized.
func NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParams() *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	var ()
	return &AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParamsWithTimeout creates a new AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParamsWithTimeout(timeout time.Duration) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	var ()
	return &AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams{

		timeout: timeout,
	}
}

// NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParamsWithContext creates a new AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParamsWithContext(ctx context.Context) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	var ()
	return &AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams{

		Context: ctx,
	}
}

// NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParamsWithHTTPClient creates a new AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParamsWithHTTPClient(client *http.Client) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	var ()
	return &AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams{
		HTTPClient: client,
	}
}

/*AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams contains all the parameters to send to the API endpoint
for the add tags and is favorite to test suites using p a t c h operation typically these are written to a http.Request
*/
type AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams struct {

	/*ApplicationID
	  applicationId

	*/
	ApplicationID int64
	/*ApplicationVersionID
	  applicationVersionId

	*/
	ApplicationVersionID int64
	/*IsFavorite
	  isFavorite

	*/
	IsFavorite *bool
	/*Tag
	  tags

	*/
	Tag []string
	/*TestSuiteIds
	  testSuiteIds

	*/
	TestSuiteIds *models.StringsDtoList

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithTimeout(timeout time.Duration) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithContext(ctx context.Context) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithHTTPClient(client *http.Client) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithApplicationID(applicationID int64) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetApplicationID(applicationID int64) {
	o.ApplicationID = applicationID
}

// WithApplicationVersionID adds the applicationVersionID to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithApplicationVersionID(applicationVersionID int64) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetApplicationVersionID(applicationVersionID)
	return o
}

// SetApplicationVersionID adds the applicationVersionId to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetApplicationVersionID(applicationVersionID int64) {
	o.ApplicationVersionID = applicationVersionID
}

// WithIsFavorite adds the isFavorite to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithIsFavorite(isFavorite *bool) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetIsFavorite(isFavorite)
	return o
}

// SetIsFavorite adds the isFavorite to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetIsFavorite(isFavorite *bool) {
	o.IsFavorite = isFavorite
}

// WithTag adds the tag to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithTag(tag []string) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetTag(tag []string) {
	o.Tag = tag
}

// WithTestSuiteIds adds the testSuiteIds to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WithTestSuiteIds(testSuiteIds *models.StringsDtoList) *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams {
	o.SetTestSuiteIds(testSuiteIds)
	return o
}

// SetTestSuiteIds adds the testSuiteIds to the add tags and is favorite to test suites using p a t c h params
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) SetTestSuiteIds(testSuiteIds *models.StringsDtoList) {
	o.TestSuiteIds = testSuiteIds
}

// WriteToRequest writes these params to a swagger request
func (o *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param applicationId
	if err := r.SetPathParam("applicationId", swag.FormatInt64(o.ApplicationID)); err != nil {
		return err
	}

	// path param applicationVersionId
	if err := r.SetPathParam("applicationVersionId", swag.FormatInt64(o.ApplicationVersionID)); err != nil {
		return err
	}

	if o.IsFavorite != nil {

		// query param is_favorite
		var qrIsFavorite bool
		if o.IsFavorite != nil {
			qrIsFavorite = *o.IsFavorite
		}
		qIsFavorite := swag.FormatBool(qrIsFavorite)
		if qIsFavorite != "" {
			if err := r.SetQueryParam("is_favorite", qIsFavorite); err != nil {
				return err
			}
		}

	}

	valuesTag := o.Tag

	joinedTag := swag.JoinByFormat(valuesTag, "multi")
	// query array param tag
	if err := r.SetQueryParam("tag", joinedTag...); err != nil {
		return err
	}

	if o.TestSuiteIds != nil {
		if err := r.SetBodyParam(o.TestSuiteIds); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
