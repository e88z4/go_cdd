// Code generated by go-swagger; DO NOT EDIT.

package test_suite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new test suite API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for test suite API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddTagsAndIsFavoriteToTestSuitesUsingPATCH(params *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) (*AddTagsAndIsFavoriteToTestSuitesUsingPATCHOK, *AddTagsAndIsFavoriteToTestSuitesUsingPATCHNoContent, error)

	DeleteTestSuitesUsingDELETE(params *DeleteTestSuitesUsingDELETEParams) (*DeleteTestSuitesUsingDELETEOK, *DeleteTestSuitesUsingDELETENoContent, error)

	GetTestSuitesUsingGET(params *GetTestSuitesUsingGETParams) (*GetTestSuitesUsingGETOK, error)

	UpdateTagsAndIsFavoriteForTestSuiteUsingPATCH(params *UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHParams) (*UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHOK, *UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddTagsAndIsFavoriteToTestSuitesUsingPATCH adds tags to test suites
*/
func (a *Client) AddTagsAndIsFavoriteToTestSuitesUsingPATCH(params *AddTagsAndIsFavoriteToTestSuitesUsingPATCHParams) (*AddTagsAndIsFavoriteToTestSuitesUsingPATCHOK, *AddTagsAndIsFavoriteToTestSuitesUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagsAndIsFavoriteToTestSuitesUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTagsAndIsFavoriteToTestSuitesUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/applications/{applicationId}/application-versions/{applicationVersionId}/test-suites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTagsAndIsFavoriteToTestSuitesUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddTagsAndIsFavoriteToTestSuitesUsingPATCHOK:
		return value, nil, nil
	case *AddTagsAndIsFavoriteToTestSuitesUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for test_suite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTestSuitesUsingDELETE deletes test suites
*/
func (a *Client) DeleteTestSuitesUsingDELETE(params *DeleteTestSuitesUsingDELETEParams) (*DeleteTestSuitesUsingDELETEOK, *DeleteTestSuitesUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestSuitesUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTestSuitesUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/applications/{applicationId}/application-versions/{applicationVersionId}/test-suites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTestSuitesUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTestSuitesUsingDELETEOK:
		return value, nil, nil
	case *DeleteTestSuitesUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for test_suite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTestSuitesUsingGET retrieves all test suites
*/
func (a *Client) GetTestSuitesUsingGET(params *GetTestSuitesUsingGETParams) (*GetTestSuitesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestSuitesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTestSuitesUsingGET",
		Method:             "GET",
		PathPattern:        "/applications/{applicationId}/application-versions/{applicationVersionId}/test-suites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTestSuitesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestSuitesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTestSuitesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTagsAndIsFavoriteForTestSuiteUsingPATCH updates test suite tags or is favorite
*/
func (a *Client) UpdateTagsAndIsFavoriteForTestSuiteUsingPATCH(params *UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHParams) (*UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHOK, *UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTagsAndIsFavoriteForTestSuiteUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTagsAndIsFavoriteForTestSuiteUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/applications/{applicationId}/application-versions/{applicationVersionId}/test-suites/{testSuiteHexId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHOK:
		return value, nil, nil
	case *UpdateTagsAndIsFavoriteForTestSuiteUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for test_suite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
