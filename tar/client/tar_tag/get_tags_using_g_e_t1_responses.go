// Code generated by go-swagger; DO NOT EDIT.

package tar_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/e88z4/go_cdd/tar/models"
)

// GetTagsUsingGET1Reader is a Reader for the GetTagsUsingGET1 structure.
type GetTagsUsingGET1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTagsUsingGET1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTagsUsingGET1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTagsUsingGET1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTagsUsingGET1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTagsUsingGET1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTagsUsingGET1OK creates a GetTagsUsingGET1OK with default headers values
func NewGetTagsUsingGET1OK() *GetTagsUsingGET1OK {
	return &GetTagsUsingGET1OK{}
}

/*GetTagsUsingGET1OK handles this case with default header values.

OK
*/
type GetTagsUsingGET1OK struct {
	Payload *models.PagedResultDtoString
}

func (o *GetTagsUsingGET1OK) Error() string {
	return fmt.Sprintf("[GET /tags][%d] getTagsUsingGET1OK  %+v", 200, o.Payload)
}

func (o *GetTagsUsingGET1OK) GetPayload() *models.PagedResultDtoString {
	return o.Payload
}

func (o *GetTagsUsingGET1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedResultDtoString)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsUsingGET1Unauthorized creates a GetTagsUsingGET1Unauthorized with default headers values
func NewGetTagsUsingGET1Unauthorized() *GetTagsUsingGET1Unauthorized {
	return &GetTagsUsingGET1Unauthorized{}
}

/*GetTagsUsingGET1Unauthorized handles this case with default header values.

Unauthorized
*/
type GetTagsUsingGET1Unauthorized struct {
}

func (o *GetTagsUsingGET1Unauthorized) Error() string {
	return fmt.Sprintf("[GET /tags][%d] getTagsUsingGET1Unauthorized ", 401)
}

func (o *GetTagsUsingGET1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTagsUsingGET1Forbidden creates a GetTagsUsingGET1Forbidden with default headers values
func NewGetTagsUsingGET1Forbidden() *GetTagsUsingGET1Forbidden {
	return &GetTagsUsingGET1Forbidden{}
}

/*GetTagsUsingGET1Forbidden handles this case with default header values.

Forbidden
*/
type GetTagsUsingGET1Forbidden struct {
}

func (o *GetTagsUsingGET1Forbidden) Error() string {
	return fmt.Sprintf("[GET /tags][%d] getTagsUsingGET1Forbidden ", 403)
}

func (o *GetTagsUsingGET1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTagsUsingGET1NotFound creates a GetTagsUsingGET1NotFound with default headers values
func NewGetTagsUsingGET1NotFound() *GetTagsUsingGET1NotFound {
	return &GetTagsUsingGET1NotFound{}
}

/*GetTagsUsingGET1NotFound handles this case with default header values.

Not Found
*/
type GetTagsUsingGET1NotFound struct {
}

func (o *GetTagsUsingGET1NotFound) Error() string {
	return fmt.Sprintf("[GET /tags][%d] getTagsUsingGET1NotFound ", 404)
}

func (o *GetTagsUsingGET1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
